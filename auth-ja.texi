\input texinfo                  @c -*-texinfo-*-
@setfilename auth-ja
@settitle Emacs auth-source Library @value{VERSION}

@set VERSION 0.2

@copying
このファイルは Emacs auth-source ライブラリーを説明します。

Copyright @copyright{} 2008-2011 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''
in the Emacs manual.

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.3 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分は指定しません。“A GNU Manual”は表表紙
テキスト、以下の (a) は裏表紙テキストです。この利用許諾契約書の複写
は Emacs マニュアルの「GNU フリー文書利用許諾契約書」という章に含まれて
います。

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom.''

(a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を複製したり変更す
る自由があります。FSF からの複写の購入は GNU の開発とソフトウェアの自由
の促進を支援します。」

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.

この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集著作物
の一部です。もしあなたがこの文書を収集著作物から分離して配布したいときは、
契約書の第 6 項に記述されているように、文書に契約書の複写を付加すること
によって、行なうことができます。
@end quotation
@end copying

@dircategory Emacs
@direntry
* Auth-source-ja: (auth-ja).    The Emacs auth-source library (Japanese).
@end direntry

@titlepage
@title Emacs auth-source Library
@author by Ted Zlatanov
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Emacs auth-source
このマニュアルは Emacs auth-source ライブラリーを説明します。

利用者の便宜のために、複数のアプリケーションで、(Emacs またはファイルに
ある) 一つの設定を共有するための手段です。

@insertcopying

@menu
* Overview::                    auth-source ライブラリーの概要
* Help for users::
* Secret Service API::
* Help for developers::
* GnuPG and EasyPG Assistant Configuration::
* Index::
* Function Index::
* Variable Index::
@end menu
@end ifnottex

@node Overview
@chapter 概要

auth-source ライブラリーは、「サーバー名とポートはわかってるんだけど、ユー
ザー名とパスワードは何だっけ?」という昔ながらの熱烈な問いに答えるための、
Emacs と Gnus 用の数ある単純な手段の一つです。

実際には auth-source ライブラリーは単なるユーザー名 (いわゆる login) や
パスワード以外のものも扱うことができますが、今日の Emacs と Gnus ではそ
れら 2つだけが使われています。同様に auth-source ライブラリーは多くの記
録形式、現在は伝統的な ``netrc'' 形式 (この文書の後の方にあります) また
はシークレットサービス API をサポートします。

@node Help for users
@chapter 利用者のためのヘルプ

``Netrc'' ファイルは事実上の標準です。それらはこのようになっています:
@example
machine @var{mymachine} login @var{myloginname} password @var{mypassword} port @var{myport}
@end example

machine はサーバーです (DNS 名または IP アドレス)。

ポートの指定は無くても構いません。無い場合、auth-source はどんなポート
も OK なのだと解釈します。実際のところ、ポートはプロトコルの名前かポート
番号のどちらでも良いので、もしそうしたいのならば、ポート @var{143} とプ
ロトコル @code{imap} のための項目を別々に持つことができます。ともあれ、
もしポートの指定が要らない場合は省略しても構いません。

login と password は、サーバーに対して簡潔にあなたのログイン資格を証明す
るためのものです。

``Netrc'' ファイルは通常 @code{.authinfo} または @code{.netrc} と呼ばれ
ます。今では @code{.authinfo} の方が普及しているようなので、後でわかるよ
うに auth-source ライブラリーはそれをディフォルトにすることによって、こ
の混乱を助長しています。

もしポートで問題があるのなら @code{auth-source-debug} を @code{t} に設定
して、ライブラリーがどのポートをチェックしているか
を @code{*Messages*} バッファーで見てください。同様に他のどんな問題につ
いても、何がチェックされているかを調べるのが、あなたの第一歩です。第二の
ステップはもちろんそれについての blog を書いて、コメントで回答を待つこと
です。

変数 @code{auth-sources} をカスタマイズすることができます。もし古いバー
ジョンの Emacs を使っているか、何かの理由のために auth-source ライブラリー
が読み込まれない場合、次のものが必要になるでしょう。

@lisp
(require 'auth-source)             ;; おそらく不要
(customize-variable 'auth-sources) ;; 任意、一回だけ行なってください
@end lisp

@defvar auth-sources
@code{auth-sources} 変数は、個々のホストとプロトコルのための netrc ファ
イルまたはシークレットサービス API の収集物がどこに在るか
を auth-source ライブラリーに知らせます。好みに応じてどうにでもできます
が、ディフォルトの最も簡潔な設定は次の通りです:

@lisp
;;; 旧ディフォルト: :host と :protocol が必要だったが、もはや不要。
(setq auth-sources '((:source "~/.authinfo.gpg" :host t :protocol t)))
;;; ほぼ等価だが、より短い (後述の fallback についての記述を参照)。
(setq auth-sources '((:source "~/.authinfo.gpg")))
@end lisp

これは「どんなホストのどのポートでも、この単一のファイルを使う」という意
味です。素晴らしく簡単でしょう。実際には後者がすでにディフォルトになって
いるので、そのファイルがあれば、これは機能します。それがあることを確かめ
てください。

特定のホストかプロトコルのエントリーを複数 @code{auth-sources} に追加す
ることによって、そのホストかプロトコルに特化した netrc ファイルを持つこ
とができます。普通これは必要ありませんが、netrc ファイルを共有したり変わっ
た設定がある場合は意味があるかもしれません (90% の Emacs ユーザーは変な
設定を持っていて、残りの 10% は @emph{本当に} 変わっています)。

これは、すべての参照にシークレットサービス API を使う例です。デフォルト
の収集物を使います:

@lisp
(setq auth-sources '((:source (:secrets default))))
@end lisp

そしてこれは、混在する 2つのソースを使う例です:

@lisp
(setq auth-sources '((:source (:secrets default) :host "myserver" :user "joe")
                     (:source "~/.authinfo.gpg")))
@end lisp

最善の合致は、初回の走査だけで (下から始まる) 順序によって決定されま
す (各要素は厳密に照合されます)。上の例では、初回の走査でホス
ト @code{myserver} への単一の合致を見つけるでしょう。Netrc 選択では、そ
れがどんなホストやプロトコルにも暗に (@emph{fallback} として) 合致してし
まうので、失敗するでしょう。@code{auth-sources} におけ
る @code{:host t} の設定値は、@code{:host} が無い場合と違って、初回の走
査における合致を目論んだものであると考慮されます。

さて、もし ``未設定'' のホストを探そうとすると、それはどんなソースにも明
らかな合致はしないでしょう。2回目の走査 (@emph{fallback} パス) では、す
べての暗黙の合致を調べて、それらを収集します。それらはスコア付けされ、ス
コアによって並べ変えられます。スコアは、合致する明示的なパラメーターの数
値に基づいています。詳細は @code{auth-pick} 関数を参照してください。

訳注 fallback: ある要素が指定されていないために厳密な合致が起こらなくて
も、ある規則によって選択する目的物、あるいは選択すること。
@end defvar

もし @code{auth-sources} をカスタマイズしないと、ディフォルトで生活する
ことになるでしょう。そのディフォルトとは、どんなホストもポートについて
も netrc ファイル @file{~/.authinfo.gpg} を参照するということです。これ
は GnuPG で暗号化されたファイルです (@pxref{GnuPG and EasyPG Assistant
Configuration})。

実際に使える最も簡単な netrc 行の例は、ポートが無いものです。

@example
machine YOURMACHINE login YOU password YOURPASSWORD
@end example

これはどの認証ポートにも対応します。簡単でしょう?  でも SMTP サーバー
が IMAP サーバーと異なるパスワードを必要とするそのマシンのポート 433 に
あるならば、どうですか？

@example
machine YOURMACHINE login YOU password SMTPPASSWORD port 433
machine YOURMACHINE login YOU password GENERALPASSWORD
@end example

url-auth 認証 (HTTP/HTTPS) のためには、これを netrc ファイルに置いておく
必要があります:

@example
machine yourmachine.com:80 port http login testuser password testpass
@end example

これは HTTP で接続するどんな界面と認証方式 (basic または digest) にも対
応します。HTTPS も同様に設定します。もっときめ細かい制御が必要なら、
url-auth のソースコードと変数を調べてください。

Tramp の認証にはこれを使ってください:

@example
machine yourmachine.com port scp login testuser password testpass
@end example

ポートは Tramp の接続方法を意味することに注意してください。もしポートの
項を使わなければ、最初の方で説明したように、すべての Tramp の方式に合致
します。Tramp には 88 種類の接続方法があるので、変わった設定がある場合は
これが必要かもしれません (それらについての以前のコメントを見てください)。

@node Secret Service API
@chapter シークレットサービス API

TODO: どう働くかを一般的に、secrets.el はどうやるか、いくつかの例。

@node Help for developers
@chapter 開発者のためのヘルプ

auth-source ライブラリーには、外部で使うための関数は一つしかありません。

@defun auth-source-user-or-password mode host port &optional username
ホスト @var{host} およびポート @var{port} のための @var{mode} で決まる適
切な認証トークンを取り込みます。もし @var{username} が与えられれば、同様
に照合されます。@code{auth-source-debug} が @code{t} だったらデバッグの
ためのメッセージを表示します。ログを採るための関数を使うには、
@code{auth-source-debug} をその関数に設定してください。渡されるパラメー
ターは @code{message} 関数が受け取るものと同じです。つまり様式使用の文字
列と任意のパラメーターです。

もし @var{mode} が文字列のリストならば、関数は文字列のリスト
か @code{nil} を返します (そのため、もう 1回 netrc ファイルを解析せずに、
またはシークレットサービス API を照合せずに済みます)。今のとこ
ろ ``login'' と ``password'' だけが認められていますが、将来はもっと多く
のものが追加されるでしょう。

@var{host} はホスト名の文字列です。

@var{port} はプロトコル名 (例えば ``imap'') またはポート番号です。ユーザー
の netrc ファイルにあるポートに対応する文字列でなければなりません。

@var{username} はユーザー名の文字列 (例えば ``joe'') です。

@example
;; IMAP example
(setq auth (auth-source-user-or-password
            '("login" "password")
            "anyhostnamehere"
            "imap"))
(nth 0 auth) ; ログイン名
(nth 1 auth) ; パスワード
@end example
@end defun

@node GnuPG and EasyPG Assistant Configuration
@appendix GnuPG および EasyPG アシスタントの設定

@code{auth-sources} をカスタマイズしない場合、auth-source ライブラリー
は @file{~/.authinfo.gpg} (GnuPG で暗号化されたファイル) を読み込みます。

Emacs 23 以降では @code{*.gpg} ファイルの暗号を自動的に解くためのオプショ
ン @code{auto-encryption-mode} があります。ディフォルトで有効です。もし
何らかの理由で Emacs の初期の版を使っている場合は、以下が必要です:

@lisp
(require 'epa-file)
(epa-file-enable)
@end lisp

あなたの GnuPG のパスワードがキャッシュされるようにしたいなら、
@code{gpg-agent} または EasyPG アシスアントを設定してくださ
い (@pxref{Caching Passphrases, , Caching Passphrases, epa})。

手早く使い始めるには、まず以下の設問に対する答を用意してください:

@enumerate
@item
GnuPG のバージョン 1 ではなく、バージョン 2 を使っていますか?
@item
公開鍵暗号でななく、共通鍵暗号を使っていますか?
@item
gpg-agent を使いたいですか?
@end enumerate

以下は上記の質疑に対するあなたの回答に基づいた設定です:

@multitable {111} {222} {333} {configuration configuration configuration}
@item @b{1} @tab @b{2} @tab @b{3} @tab Configuration
@item Yes @tab Yes @tab Yes @tab gpg-agent を設定してください。
@item Yes @tab Yes @tab No @tab gpg-agent 無しではできません。
@item Yes @tab No @tab Yes @tab gpg-agent を設定してください。
@item Yes @tab No @tab No @tab gpg-agent 無しではできません。
@item No @tab Yes @tab Yes @tab ELisp 版のパスワード・キャッシュを設定してください。
@item No @tab Yes @tab No @tab ELisp 版のパスワード・キャッシュを設定してください。
@item No @tab No @tab Yes @tab gpg-agent を設定してください。
@item No @tab No @tab No @tab gpg-agent 無しではできません。
@end multitable

gpg-agent を設定するには GnuPG マニュアル (@pxref{Invoking GPG-AGENT, ,
Invoking GPG-AGENT, gnupg}) の説明に従ってください。

ELisp 版のパスワード・キャッシュを使う場合
は @code{epa-file-cache-passphrase-for-symmetric-encryption} を設定して
ください。

@node Index
@chapter Index
@printindex cp

@node Function Index
@chapter Function Index
@printindex fn

@node Variable Index
@chapter Variable Index
@printindex vr

@bye

@c Local Variables:
@c coding: iso-2022-7bit
@c fill-column: 72
@c mode: texinfo
@c use-kuten-for-period: t
@c use-touten-for-comma: t
@c End:

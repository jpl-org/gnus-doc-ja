\input texinfo-ja               @c -*-texinfo-*-

@c @set VERSION 0.3

@setfilename auth-ja.info
@c @settitle Emacs auth-source Library @value{VERSION}
@settitle Emacs auth-source Library 0.3
@documentencoding UTF-8
@documentlanguage ja

@copying
このファイルは Emacs auth-source ライブラリーを説明します。

Copyright @copyright{} 2008--2021 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''.

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.3 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分は指定しません。“A GNU Manual”は表表紙
テキスト、以下の (a) は裏表紙テキストです。この利用許諾契約書の複写は
「GNU フリー文書利用許諾契約書」という章に含まれています。

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.''

(a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を複製したり変更す
る自由があります。」
@end quotation
@end copying

@dircategory Emacs lisp libraries
@direntry
* Auth-source-ja: (auth-ja).    The Emacs auth-source library (Japanese).
@end direntry

@titlepage
@ifset WEBHACKDEVEL
@title Emacs auth-source Library (DEVELOPMENT VERSION)
@end ifset
@ifclear WEBHACKDEVEL
@title Emacs auth-source Library
@end ifclear
@author by Ted Zlatanov
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Emacs auth-source
このマニュアルは Emacs auth-source ライブラリーを説明します。

利用者の便宜のために、複数のアプリケーションで、(Emacs またはファイルに
ある) 一つの設定を共有するための手段です。

@insertcopying

@menu
* Overview::                    auth-source ライブラリーの概要
* Help for users::
* Multiple GMail accounts with Gnus::
* Secret Service API::
* The Unix password store::
* Help for developers::
* GnuPG and EasyPG Assistant Configuration::
* GNU Free Documentation License:: この文書の利用許諾契約書
* Index::
* Function Index::
* Variable Index::
@end menu
@end ifnottex

@node Overview
@chapter 概要

auth-source ライブラリーは、「私のユーザー名とパスワードは何だっけ?」と
いう昔ながらの切迫した問いに答えるための、Emacs と Gnus 用の数ある単純な
手段の一つです。

(これは「消火器はどこだ?」という古くからの切迫した問いとは異なります。)

Auth-source ライブラリーは単なるユーザー名やパスワード (いわゆる秘密) 以
外のものも扱うことができます。

同様に auth-source ライブラリーは多くの貯蔵バックエンド、現在は伝統的
な ``netrc'' バックエンド (この文書の後の方に例があります)、JSON ファイ
ル、シークレットサービス API、そしてパス、すなわち unix の標準パスワード・
マネージャーをサポートします。これは EIEIO に基づいたバックエンドで行な
われ、もし必要ならあなた独自のものを書くことができます。

@node Help for users
@chapter 利用者のためのヘルプ

``Netrc'' ファイルは事実上の標準です。それらはこのようになっています:

@example
machine @var{mymachine} login @var{myloginname} password @var{mypassword} port @var{myport}
@end example

@code{machine} はサーバーです (DNS 名または IP アドレスのどちらか)。
@code{auth-source-search} 検索における @var{:host} でもあります。

@code{port} は接続するポートまたはプロトコルです。
@code{auth-source-search} 検索における @var{:port} でもあります。

@code{user} はユーザー名です。@code{auth-source-search} 検索におけ
る @var{:user} でもあります。@code{login} および @code{account} も使うこ
とができます。

さらに、このファイルを TLS 接続を設定するときに使うクライアント証明書を
定義するために使うこともできます。そのフォーマットは次の通りです:

@example
machine @var{mymachine} port @var{myport} key @var{key} cert @var{cert}
@end example

@var{key} と @var{cert} はそれぞれ key を含むファイル名と使用する証明書
です。ネットワーク接続でそれらを自動的に使用するに
は @code{:client-certificate t} を @code{open-network-stream} に渡す
か @code{network-stream-use-client-certificates} を @code{t} にカスタマ
イズしてください。

シングルまたはダブルクオートで囲むことによって、パスワードや他の要素の中
で空白文字を使うことができます。

ダブルクオートで囲むことによって、パスワードや他の要素の中で、アポストロ
フィー (’) を使うことができます。例えばこんなふうに: @code{"he'llo"}@*
同様にアポストロフィーで囲むことによって、パスワードや他の要素の中で、ダ
ブルクオートを使うことができます。例えばこんなふうに: @code{'he"llo'}@*
両方を混ぜて使うことはできません(つまりパスワードなどの要素は、アポスト
ロフィーとダブルクオートの両方を持つことはできません)。

すべてこれらは任意です。どこでも同じパスワードを使うために、ただ単に

@example
password @var{mypassword}
@end example

と設定することができます---ということが可能であることを示しているのであっ
て、それを推奨しているわけではありません。繰り返しますが @emph{これは使
わないでください}。さもないとひどい目に会うでしょう。

``Netrc'' ファイルは通常 @file{.authinfo} または @file{.netrc} と呼ばれ
ます。今では @file{.authinfo} の方が普及しているようですが、後でわかるよ
うに auth-source ライブラリーはそれらの両方を受け入れるために、この混乱
を助長しています。

もし検索で問題があるのなら @code{auth-source-debug} を @code{'trivia} に
設定して、ライブラリーがどのホスト、ポートおよびユーザーをチェックしてい
るかを @file{*Messages*} バッファーで見てください。同様に他のどんな問題
についても、何がチェックされているかを調べるのが、あなたの第一歩です。第
二のステップはもちろんそれについての blog を書いて、コメントで回答を待つ
ことです。

変数 @code{auth-sources} をカスタマイズすることができます。もし古いバー
ジョンの Emacs を使っているか、何かの理由のために auth-source ライブラリー
が読み込まれない場合、次のものが必要になるでしょう。

@lisp
(require 'auth-source)             ;; おそらく不要
(customize-variable 'auth-sources) ;; 任意、一回だけ行なってください
@end lisp

@defvar auth-sources
@code{auth-sources} 変数は、個々のホストとプロトコルのための netrc ファ
イル、シークレットサービス API の収集物、またはあなたの保存したパスワー
ドがどこに在るかを auth-source ライブラリーに知らせます。好みに応じてど
うにでもできますが、ディフォルトの最も簡潔な設定は次の通りです:

@lisp
;;; 旧ディフォルト: :host と :port が必要だったが、もはや不要。
(setq auth-sources '((:source "~/.authinfo.gpg" :host t :port t)))
;;; ほぼ等価だが、より短い (後述の fallback についての記述を参照)。
(setq auth-sources '((:source "~/.authinfo.gpg")))
;;; さらに短い @emph{ディフォルト}:
(setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
;;; シークレット API の @var{Login} コレクションを使う
;;; (@pxref{Secret Service API})
(setq auth-sources '("secrets:Login"))
;;; パス (@file{~/.password-store}) を使う
;;; (@pxref{The Unix password store})
(setq auth-sources '(password-store))
;;; [@{ "machine": "SERVER", "login": "USER",
;;; "password": "PASSWORD" @}...] というフォーマットの JSON データ
(setq auth-sources '("~/.authinfo.json.gpg"))
@end lisp

特定のホストかプロトコルのエントリーを複数 @code{auth-sources} に追加す
ることによって、そのホストかプロトコルに特化した netrc ファイルを持つこ
とができます。普通これは必要ありませんが、netrc ファイルを共有したり変わっ
た設定がある場合は意味があるかもしれません (90% の Emacs ユーザーは変な
設定を持っていて、残りの 10% は @emph{本当に} 変わっています)。

これは、混在する 2つのソースを使う例です:

@lisp
(setq auth-sources '((:source (:secrets default)
                      :host "myserver" :user "joe")
                     "~/.authinfo.gpg"))
@end lisp

@end defvar

もし @code{auth-sources} をカスタマイズしないと、ディフォルトで生活する
ことになるでしょう。そのディフォルトとは、どんなホストやポートについても
暗号化されていない netrc ファイル @file{~/.authinfo} が使われるというこ
とです。

もしそれに失敗すると、どんなホストやポートも netrc ファイ
ル @file{~/.authinfo.gpg} で探します。こちらは GnuPG で暗号化されたファ
イルです (@pxref{GnuPG and EasyPG Assistant Configuration})。

(それも失敗する場合は) どんなホストやポートについても暗号化されていな
い netrc ファイル @file{~/.netrc} が使われます。

代表的な netrc 行の例は、ポートが無いものです。

@example
machine YOURMACHINE login YOU password YOURPASSWORD
@end example

これはどの認証ポートにも対応します。簡単でしょう?  でも SMTP サーバー
が IMAP サーバーと異なるパスワードを必要とするそのマシンのポート 433 に
あるならば、どうですか？

@example
machine YOURMACHINE login YOU password SMTPPASSWORD port 433
machine YOURMACHINE login YOU password GENERALPASSWORD
@end example

あるマシンが使う特定の SMTP 認証方法を指定するには @code{smtp-auth} キー
ワードを使ってください。使うことができる方法について
は @xref{Authentication,, Authentication, smtpmail, Emacs SMTP Library}.

url-auth 認証 (HTTP/HTTPS) のためには、これを netrc ファイルに置いておく
必要があります:

@example
machine yourmachine.com:80 port http login testuser password testpass
@end example

これは HTTP で接続するどんな界面と認証方式 (basic または digest) にも対
応します。HTTPS も同様に設定します。もっときめ細かい制御が必要なら、
url-auth のソースコードと変数を調べてください。

Tramp の認証にはこれを使ってください:

@example
machine yourmachine.com port scp login testuser password testpass
@end example

ポートは Tramp の接続方法を意味することに注意してください。もしポートの
項を使わなければ、最初の方で説明したように、どんな Tramp の方式にも合い
ます。Tramp にはおよそ 88 種類の接続方法があるので、変わった設定がある場
合はこれが必要かもしれません (それらに関する前のコメントを見てください)。

もしあなたがそんな類のものにはまっているのなら、netrc フォーマットを直接
JSON に翻訳しましょう。そんなエントリーを持つ JSON ファイルの例です:

@example
[
 @{ "machine": "yourmachine.com", "port": "http",
    "login": "testuser", "password": "testpass" @}
]
@end example

@node Multiple GMail accounts with Gnus
@chapter 複数の GMail アカウントを Gnus で扱う

複数の GMail アカウントを Gnus で扱うには、別の名前で 2つのエントリー
を @code{gnus-secondary-select-methods} に作る必要があります:

@example
(setq gnus-secondary-select-methods '((nnimap "gmail"
                                         (nnimap-address "imap.gmail.com"))
                                      (nnimap "gmail2"
                                         (nnimap-address "imap.gmail.com"))))
@end example

そうすると netrc は次のようになるでしょう:

@example
machine gmail login account@@gmail.com password "account password" port imap
machine gmail2 login account2@@gmail.com password "account2 password" port imap
@end example

@node Secret Service API
@chapter シークレットサービス API

@dfn{Secret Service API} はパスワードや他の機密情報を安全に保存するため
の @uref{https://www.freedesktop.org/wiki/Specifications/secret-storage-spec/,freedesktop.org} に
よる標準です。この API は GNOME 鍵リングと KDE ウォレットのようなシステ
ム・デーモン (それぞれ最近はたいていの GNU/Linux システムに備わって
る GNOME と KDE のパッケージ) によって実装されます。

auth-source ライブラリーはシークレットサービス API を通してつな
ぐ @file{secrets.el} ライブラリーを使います。そのライブラリーを他のパッ
ケージでも使うことができます。auth-source 専用ではありません。

@defvar secrets-enabled
この変数が @code{nil} ではない値だったら @file{secrets.el} を読み込んだ
後にシークレットサービス API を提供するデーモンを表示します。
@end defvar

@deffn Command secrets-show-secrets
このコマンドはすべてのコレクション、item、およびそれらの属性を表示します。
@end deffn

シークレットサービス API によって管理されるアトミックオブジェクト
は @dfn{secret items} です。それらはパスワードのようなアプリケーションが
安全に保存することを必要とするものの集合です。Secret items はラベル (名
前)、@dfn{secret} (パスワードのような文字列)、およびルックアップ属性を持
ちます。属性は後日 secret item を検索したり取り出すために使うことができ
ます。

Secret items は @dfn{collections} にグループ化されます。コレクション
は GNOME 鍵リングと KDE ウォレットでは時に @samp{keyring} また
は @samp{wallet} と呼ばれますが同じもので、secrets の集合です。コレクショ
ンは個人の持ち物で保護されていて、持ち主だけがそれらを開くことができます。

もっとも一般的なコレクションは @code{"login"} と呼ばれます。

コレクションは別名を持つことができます。一般に @code{"default"} という別
名が使われるので、クライアントは開くコレクションの明示的な名前を知ってい
る必要がありません。他の別名はまだサポートされていません。別名はどこから
でもアクセスできるので、適切であることを確信している場合に限って別
名 @code{"default"} を設定してください。

@defun secrets-list-collections
この関数はすべてのコレクション名をリストで返します。
@end defun

@defun secrets-set-alias collection alias
@var{alias} を @var{collection} という名のコレクションの別名として設定し
ます。今のところ別名 @code{"default"} だけがサポートされています。
@end defun

@defun secrets-get-alias alias
@var{alias} に相当するコレクション名を返します。今のところ別
名 @code{"default"} だけがサポートされています。
@end defun

コレクションは関数 @code{secrets-create-collection} およ
び @code{secrets-delete-collection} で作ったり削除することができます。通
常これは Emacs の中からは行なわれません。@code{"login"} のような標準のコ
レクションを削除しないでください。

特別なコレクション @code{"session"} は対応するクライアント (我々の場合
は Emacs) が走っている期間存在します。これは Emacs がシークレットサービ
スのインターフェースを使う際に自動的に作られ、Emacs が終了するときに削除
されます。その故に臨時に secret items を保存したり取り出すために使うこと
ができます。Secret items を Emacs より永く生かしておくべきではない場合、
@code{"session"} コレクションは永続させるコレクションより有利です。コレ
クション session は以下の関数においてコレクションのパラメーターが必要に
なるときはいつでも、文字列 @code{"session"} または @code{nil} のどちらか
で引くことができます。

@defun secrets-list-items collection
@var{collection} のすべての item のラベルをリストで返します。
@end defun

@defun secrets-create-item collection item password &rest attributes
この関数はラベル @var{item} とパスワード @var{password} を備えた新し
い item を @var{collection} の中に作ります。ラベ
ル @var{item} は @var{collection} の中でユニークである必要はありません。
@var{attributes} は生成される item に設定される鍵と値の対です。鍵はコロ
ンで始まるキーワード・シンボルです。以下に例を示します:

@example
;; セッションは "session" 、ラベルは "my item" で
;; secret (パスワード) は "geheim" です。
(secrets-create-item "session" "my item" "geheim"
 :method "sudo" :user "joe" :host "remote-host")
@end example

@code{:xdg:schema} キーは生成される item の範囲、すなわち item が目的と
するアプリケーション、を決定します。これ
は "org.freedesktop.NetworkManager.Mobile"、あるい
は "org.gnome.OnlineAccounts" のような単なる文字列で、他の必要なキーはこ
れによって決定されます。もし @code{:xdg:schema} の指定が無い場合は、ディ
フォルトで "org.freedesktop.Secret.Generic" が使われます。
@end defun

@defun secrets-get-secret collection item
@var{collection} の中で @var{item} というラベルが付いてい
る item の secret を返します。もし @var{item} というラベルの item がいく
つかある場合、どれが返されるかは決まっていません。該当する item が無い場
合は @code{nil} を返します。
@end defun

@defun secrets-delete-item collection item
この関数は @var{collection} の中の @var{item} という item を取り除きます。
もし @var{item} というラベルの item がいくつかある場合、どれが取り除かれ
るかは決まっていません。
@end defun

Secret item を生成する間に設定されるルックアップ属性は、鍵と値の対でなけ
ればなりません。鍵はコロンで始まるキーワード・シンボル、値は文字列です。
それらは与えられた secret item から取り出すことができ、それらを使っ
て item を逆引きすることができます。

@defun secrets-get-attribute collection item attribute
@var{collection} の中で @var{item} というラベルが付いている item の、
鍵 @var{attribute} に対応する値を返します。もし @var{item} というラベル
の item がいくつかある場合、どれが返されるかは決まっていません。該当す
る item が無かったり item がこの鍵を持っていない場合、この関数
は @code{nil} を返します。
@end defun

@defun secrets-get-attributes collection item
@var{collection} の中で @var{item} というラベルが付いている、item のルッ
クアップ属性を返します。もし @var{item} というラベルの item がいくつかあ
る場合、どれが返されるかは決まっていません。該当する item が無かった
り item が属性を持っていない場合は @code{nil} を返します。以下に例を示し
ます:

@example
(secrets-get-attributes "session" "my item")
     @result{} ((:user . "joe") (:host . "remote-host"))
@end example
@end defun

@defun secrets-search-items collection &rest attributes
@var{collection} の中で合致する @var{attributes} を持つ item を探します。
@var{attributes} は @code{secrets-create-item} で使われる鍵と値の対です。
以下に例を示します:

@example
(secrets-search-items "session" :user "joe")
     @result{} ("my item" "another item")
@end example
@end defun

auth-source ライブラリーは @code{"secrets:COLLECTION"} に合致す
る source を検索するとき、@file{secrets.el} ライブラリーに加えて次のよう
にシークレットサービス API を使います。例えば @code{"session"} コレクショ
ンを Emacs が走っている間だけ開くために @code{"secrets:session"} を使う
ことができます。あるいは @code{"Login"} コレクションを開くために
は @code{"secrets:Login"} が使えます。特別な場合とし
て @code{auth-sources} の中では別名 @code{"default"} を示すため
に @code{default} というシンボル (文字列ではない) を使うことができます。
ここに 3つのコレクションを検索し、無かったら @file{~/.authinfo.gpg} を使
うように @code{auth-sources} を設定するためのわざとらしい例があります。

@example
(setq auth-sources '(default
                     "secrets:session"
                     "secrets:Login"
                     "~/.authinfo.gpg"))
@end example

@node The Unix password store
@chapter Unix パスワード・マネージャー

@uref{https://www.passwordstore.org,標準 Unix パスワードマネージャー} (ま
たは単に @code{pass}) は、あなたのパスワードを Unix 哲学に基づい
て @code{gpg} で保護されたファイルに格納します。格納する場所 (任意のディ
レクトリー) は、@code{auth-source-pass-filename} 変数で指定しなければな
りません。ディフォルトは @file{~/.password-store} です。

Emacs の @code{pass} の統合は、パス・プロジェクト自体によって提案された、
データを検索するためのデータの組織化の取り組みです。特に、ホス
ト @code{gnu.org} およびポート @code{22} にユーザー @code{rms} のパスワー
ドを保存するには、次のファイル名のいずれかを使用してください。

@table @file
@item gnu.org.gpg
ファイル名にユーザー名またはポートがない場合は、どんなユーザー名とポート
も合致することを意味します。

@item gnu.org/rms.gpg
合致するユーザー名は、名前がホストと合致するディレクトリ内のファイル名と
して表すことができます。これはストアに同じホスト上の複数のユーザーのパ
スワードがある場合に便利です。

@item rms@@gnu.org.gpg
ユーザー名はアットマーク (@code{@@}) でホストから分離された接頭辞として
表すこともできます。

@item gnu.org:22.gpg
合致させるポート (あるいはサービス) はホストの後にのみ記述することができ、
コロン (@code{:}) で区切ります。区切り文字
は @code{auth-source-pass-port-separator} 変数で変更可能です。

@item gnu.org:22/rms.gpg

@item rms@@gnu.org:22.gpg

@item a/b/gnu.org.gpg
エントリーは任意のディレクトリーに格納することができます。

@item a/b/gnu.org/rms.gpg

@item a/b/rms@@gnu.org.gpg

@item a/b/gnu.org:22.gpg

@item a/b/gnu.org:22/rms.gpg

@item a/b/rms@@gnu.org:22.gpg
@end table

複数のエントリーが合致する場合、最も多くの項目に合致するものが優先されま
す (ここで「項目」はユーザー名、ポート、またはホストのいずれかです)。た
とえば、ホスト @code{gnu.org} およびポート @code{22} の @code{rms} ユー
ザーに合致するエントリを検索しているとき、エント
リー @file{gnu.org:22/rms.gpg} は @file {gnu.org.gpg} より優先されます。

@code{pass} のユーザーは、Emacs パッケージが提供する機能にも興味があるか
もしれません:

@itemize
@item
@uref{https://git.zx2c4.com/password-store/tree/contrib/emacs/password-store.el,password-store}: @code{pass} をラップするライブラリー;
@item
@uref{https://github.com/NicolasPetton/pass,pass}: パスワード・マネージャーとエントリーを編集するためのメジャーモード;
@item
@uref{https://github.com/jabranham/helm-pass,helm-pass}: パスへの helm インターフェース。
@end itemize

@defvar auth-source-pass-filename
この変数をディスク上のパスワードストアを特定する文字列に設定してください。
ディフォルトは @file{~/.password-store} です。
@end defvar

@defvar auth-source-pass-port-separator
この変数を、エントリー内のポートからホスト名を区切る文字列に設定してくだ
さい。ディフォルトは @samp{:} です。
@end defvar

@node Help for developers
@chapter 開発者のためのヘルプ

auth-source ライブラリーは、何らかの動作を行なった結果の記録を採ることが
できます。

@defvar auth-source-debug
この変数を @code{'trivia} にすると、@file{*Messages*} バッファーへのたく
さんの出力を見ることができます。あるいはこれに @code{message} に似た関数
を設定して、あなた独自のやり方で記録を採ることもできます。
@end defvar

auth-source ライブラリーには、外部で使うための関数は少ししかありません。

@defun auth-source-search &rest spec &key type max host user port secret require create delete &allow-other-keys
この関数は @var{spec} に従って認証バックエンドを探し (または変更し) ます。
詳細はその関数の doc-string を見てください。
@c TODO more details.
@end defun

では Gnus の @code{nnimap.el} から @code{auth-source-search} を使う例を
見てみましょう。

@example
(defun nnimap-credentials (address ports)
  (let* ((auth-source-creation-prompts
          '((user  . "IMAP user at %h: ")
            (secret . "IMAP password for %u@@%h: ")))
         (found (nth 0 (auth-source-search :max 1
                                           :host address
                                           :port ports
                                           :require '(:user :secret)
                                           :create t))))
    (if found
        (list (plist-get found :user)
              (let ((secret (plist-get found :secret)))
                (if (functionp secret)
                    (funcall secret)
                  secret))
              (plist-get found :save-function))
      nil)))
@end example

@c 以下の訳文の質が悪いのは原文の出来の酷さのため。
この呼び出しはその結果にユーザー名とパスワード (式中の @code{secret}) が
含まれることを求めています。さらに、もしその項目がまだ無かったら作る必要
もあります。その項目を作る際にユーザーとやり取りする場合は、式中にある質
問文が使われます。この呼び出しは、ユーザーへの質問文のディフォルト値のた
めに @code{auth-source-creation-defaults} にあるデータを渡すこともできま
す。

パスワードがもし関数だったら、それは評価される必要があることに注意してく
ださい。ある程度の安全対策として、それは関数で包まれています。

その後ログインに成功したら @code{nnimap.el} は次のよう
に @code{:save-function} を呼びます:

@example
(when (functionp (nth 2 credentials))
   (funcall (nth 2 credentials)))
@end example

これは @code{:save-function} の有無に関わらす動作するでしょう。
@code{:save-function}は新しい項目が作られたときだけ提供されるので、これ
は実際に「ログイン成功後」なのです。そして我々がちょうど使っていた認証情
報 (ただしこれが新た作られたものであるのなら) をセーブします。

最初にそれが呼ばれた後、@code{:save-function} が再度走ることはありません
(しかしもし @code{auth-source-debug} を @code{'trivia} に設定してあるな
らば、そのことを多少記録します。これすなわち、それは鬱陶しい同じ質問が繰
り返されることはないということです。

したがって @code{:create t} を設定した API ユーザーの責任は、もし存在す
るならば @code{:save-function} を呼ぶことです。

@defun auth-source-delete &rest spec &key delete &allow-other-keys
この関数は @var{spec} に合致するエントリーを認証バックエンドから取り除き
ます。取り除かれたエントリーを返します。実際にはバックエンドはそれらのエ
ントリーを取り除かないかもしれません。
@end defun

@defun auth-source-forget spec
この関数は厳密に @var{spec} に合致するすべてのキャッシュされたデータを忘
れ (訳注: 無効にし) ます。いくつかのデータを忘れるときは @code{t} を、合
致するデータが見つからなかったときは @code{nil} を返します。
@end defun

@defun auth-source-forget+ &rest spec &allow-other-keys
この関数は @var{spec} に合致するすべてのキャッシュされたデータを忘れ (訳
注: 無効にし) ます。忘れたデータの数を返します。
@end defun

@node GnuPG and EasyPG Assistant Configuration
@appendix GnuPG および EasyPG アシスタントの設定

もし変数 @code{auth-sources} が @file{~/.authinfo} より前
に @file{~/.authinfo.gpg} を含んでいるならば、auth-source ライブラリーは
暗号化されていないファイルより先に、まずは GnuPG で暗号化され
た @file{.gpg} を読み込もうとします。

Emacs 23 以降では @file{*.gpg} ファイルの暗号を自動的に解くためのオプショ
ン @code{auto-encryption-mode} があります。ディフォルトで有効です。もし
何らかの理由で Emacs の初期の版を使っている場合は、以下が必要です:

@lisp
(require 'epa-file)
(epa-file-enable)
@end lisp

あなたの GnuPG のパスワードがキャッシュされるようにしたいなら、
@code{gpg-agent} または EasyPG アシスアントを設定してくださ
い (@pxref{Caching Passphrases, , Caching Passphrases, epa})。

手早く使い始めるには、まず以下の設問に対する答を用意してください:

@itemize
@item
GnuPG のバージョン 1 ではなく、バージョン 2 を使っていますか?
@item
公開鍵暗号でななく、共通鍵暗号を使っていますか?
@item
gpg-agent を使いたいですか?
@end itemize

以下は上記の質疑に対するあなたの回答に基づいた設定です:

@multitable {111} {222} {333} {configuration configuration configuration}
@item @b{1} @tab @b{2} @tab @b{3} @tab Configuration
@item Yes @tab Yes @tab Yes @tab gpg-agent を設定してください。
@item Yes @tab Yes @tab No @tab gpg-agent 無しではできません。
@item Yes @tab No @tab Yes @tab gpg-agent を設定してください。
@item Yes @tab No @tab No @tab gpg-agent 無しではできません。
@item No @tab Yes @tab Yes @tab ELisp 版のパスワード・キャッシュを設定してください。
@item No @tab Yes @tab No @tab ELisp 版のパスワード・キャッシュを設定してください。
@item No @tab No @tab Yes @tab gpg-agent を設定してください。
@item No @tab No @tab No @tab gpg-agent 無しではできません。
@end multitable

gpg-agent を設定するには GnuPG マニュアル (@pxref{Invoking GPG-AGENT, ,
Invoking GPG-AGENT, gnupg}) の説明に従ってください。

ELisp 版のパスワード・キャッシュを使う場合
は @code{epa-file-cache-passphrase-for-symmetric-encryption} を設定して
ください。

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include doclicense.texi

@node Index
@unnumbered Index
@printindex cp

@node Function Index
@unnumbered Function Index
@printindex fn

@node Variable Index
@unnumbered Variable Index
@printindex vr

@bye

@c Local Variables:
@c fill-column: 72
@c End:

\input texinfo                  @c -*-texinfo-*-

@setfilename auth-ja

@set VERSION 0.1

@dircategory Emacs
@direntry
* auth-source-ja: (auth-ja).   The Emacs auth-source library (Japanese).
@end direntry

@settitle Emacs auth-source Library @value{VERSION}

@copying
このファイルは Emacs auth-source ライブラリーを説明します。

Copyright @copyright{} 2008, 2009
Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''
in the Emacs manual.

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.3 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分は指定しません。“A GNU Manual”は表表紙
テキスト、以下の (a) は裏表紙テキストです。この利用許諾契約書の複写
は Emacs マニュアルの「GNU フリー文書利用許諾契約書」という章に含まれて
います。

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom.''

(a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を複製したり変更す
る自由があります。FSF からの複写の購入は GNU の開発とソフトウェアの自由
の促進を支援します。」

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.

この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集著作物
の一部です。もしあなたがこの文書を収集著作物から分離して配布したいときは、
契約書の第 6 項に記述されているように、文書に契約書の複写を付加すること
によって、行なうことができます。
@end quotation
@end copying

@tex

@titlepage
@title Emacs auth-source Library

@author by Ted Zlatanov
@page

@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@page

@end tex

@node Top
@top Emacs auth-source
このマニュアルは Emacs auth-source ライブラリーを説明します。

利用者の便宜のために、複数のアプリケーションで、(Emacs またはファイルに
ある) 一つの設定を共有するための手段です。

@menu
* Overview::                    auth-source ライブラリーの概要
* Help for users::
* Help for developers::
* Index::
* Function Index::
* Variable Index::
@end menu

@node Overview
@chapter 概要

To be done.

@node Help for users
@chapter 利用者のためのヘルプ

もしポートで問題があるのなら、@code{gnus-verbose} の値を大きくして、その
ライブラリーがどのポートをチェックしているかを見てください。同様に他のど
んな問題についても、何がチェックされているかを調べるのが、あなたの第一歩
です。

設定:

@lisp
(require 'auth-source)
(customize-variable 'auth-sources) ;; 任意、一回だけ行なってください
@end lisp

@defvar auth-sources
@var{auth-sources} 変数は、個々のホストとプロトコルのための netrc ファイ
ルがどこに在るかを auth-source ライブラリーに知らせます。好みに応じてど
うにでもできますが、ディフォルトの最も簡潔な設定は次の通りです:

@lisp
(setq auth-sources '((:source "~/.authinfo.gpg" :host t :protocol t)))
@end lisp

個々のホストまたはプロトコルのための複数の項目をそのリストに加えることに
よって、そのホストやプロトコルのための特定の netrc ファイルを持つことが
できます。
@end defvar

``Netrc'' ファイルは事実上の標準です。それらはこのようになっています:
@example
machine mymachine login myloginname password mypassword port myport
@end example

ポートの指定は無くても構いません。無い場合、auth-source はどんなポート
も OK なのだと解釈します。実際のところ、ポートはプロトコルの名前かポート
番号のどちらでも良いので、もしそうしたいのならば、ポート 143 とプロトコ
ル ``imap'' のための項目を別々に持つことができます。

もし @var{auth-sources} をカスタマイズしないと、ディフォルトで生活するこ
とになるでしょう。そのディフォルトとは、どんなホストもポートについて
も netrc ファイル @code{~/.authinfo.gpg} を参照するということです。これ
は暗号化されたファイルです。EPA を使えるようにしている場合に限りますが、
それが強く推奨されます。

@lisp
(require 'epa-file)
(epa-file-enable)
(setq epa-file-cache-passphrase-for-symmetric-encryption t) ; とても重要
@end lisp

url-auth 認証 (HTTP/HTTPS) のためには、これを netrc ファイルに置いておく
必要があります:

@example
machine yourmachine.com:80 port http login testuser password testpass
@end example

これはどんな界面と認証方式 (basic または digest) にも合致します。もっと
詳細な制御が必要な場合は、url-auth のソースコードと変数を調べてください。

Tramp の認証にはこれを使ってください:

@example
machine yourmachine.com port scp login testuser password testpass
@end example

ポートは Tramp の接続方法を意味することに注意してください。もしポートの
項を使わなければ、最初の方で説明したように、すべての Tramp の方式に合致
します。

@node Help for developers
@chapter 開発者のためのヘルプ

auth-source ライブラリーには、外部で使うための関数は一つしかありません。

@defun auth-source-user-or-password mode host port
ホスト @var{host} およびポート @var{port} のための @var{mode} で決まる、
適切な認証トークンを取り込みます。@code{gnus-verbose} が 9 以上であれば、
デバッグのためのメッセージを表示します。

もし @var{mode} が文字列のリストならば、関数は文字列のリストまた
は @code{nil} を返します。それがただの文字列ならば、関数は一つの文字列
か @code{nil} を返します。今のところ mode とし
て ``login'' と ``password'' だけを認識しますが、将来はもっと加えられる
でしょう。

@var{host} はホスト名の文字列です。

@var{port} はプロトコル名 (例えば ``imap'') またはポート番号です。ユーザー
の netrc ファイルにあるポートに対応する文字列でなければなりません。

@example
;; IMAP example
(setq auth (auth-source-user-or-password
            '("login" "password")
            "anyhostnamehere"
            "imap"))
(nth 0 auth) ; ログイン名
(nth 1 auth) ; パスワード
@end example
@end defun

@node Index
@chapter Index
@printindex cp

@node Function Index
@chapter Function Index
@printindex fn

@node Variable Index
@chapter Variable Index
@printindex vr

@summarycontents
@contents
@bye

@c Local Variables:
@c coding: iso-2022-7bit
@c fill-column: 72
@c mode: texinfo
@c use-kuten-for-period: t
@c use-touten-for-comma: t
@c End:

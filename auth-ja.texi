\input texinfo                  @c -*-texinfo-*-

@include gnus-overrides-ja.texi

@setfilename auth-ja
@settitle Emacs auth-source Library @value{VERSION}

@set VERSION 0.3

@copying
このファイルは Emacs auth-source ライブラリーを説明します。

Copyright @copyright{} 2008-2011 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''
in the Emacs manual.

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.3 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分は指定しません。“A GNU Manual”は表表紙
テキスト、以下の (a) は裏表紙テキストです。この利用許諾契約書の複写
は Emacs マニュアルの「GNU フリー文書利用許諾契約書」という章に含まれて
います。

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom.''

(a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を複製したり変更す
る自由があります。FSF からの複写の購入は GNU の開発とソフトウェアの自由
の促進を支援します。」

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.

この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集著作物
の一部です。もしあなたがこの文書を収集著作物から分離して配布したいときは、
契約書の第 6 項に記述されているように、文書に契約書の複写を付加すること
によって、行なうことができます。
@end quotation
@end copying

@dircategory Emacs lisp libraries
@direntry
* Auth-source-ja: (auth-ja).    The Emacs auth-source library (Japanese).
@end direntry

@titlepage
@ifset WEBHACKDEVEL
@title Emacs auth-source Library (DEVELOPMENT VERSION)
@end ifset
@ifclear WEBHACKDEVEL
@title Emacs auth-source Library
@end ifclear
@author by Ted Zlatanov
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Emacs auth-source
このマニュアルは Emacs auth-source ライブラリーを説明します。

利用者の便宜のために、複数のアプリケーションで、(Emacs またはファイルに
ある) 一つの設定を共有するための手段です。

@insertcopying

@menu
* Overview::                    auth-source ライブラリーの概要
* Help for users::
* Secret Service API::
* Help for developers::
* GnuPG and EasyPG Assistant Configuration::
* Index::
* Function Index::
* Variable Index::
@end menu
@end ifnottex

@node Overview
@chapter 概要

auth-source ライブラリーは、「私のユーザー名とパスワードは何だっけ?」と
いう昔ながらの熱烈な問いに答えるための、Emacs と Gnus 用の数ある単純な手
段の一つです。

(これは火事のときの「消火器はどこだ?」という古くからの問いとは異なります。)

Auth-source ライブラリーは単なるユーザー名やパスワード (いわゆる秘密) 以
外のものも扱うことができます。

同様に auth-source ライブラリーは多くの貯蔵バックエンド、現在は伝統的
な ``netrc'' バクエンド (この文書の後の方にあります) またはシークレット
サービス API をサポートします。これは EIEIO に基づいたバクエンドで行なわ
れ、もし必要ならあなた独自のものを書くことができます。

@node Help for users
@chapter 利用者のためのヘルプ

``Netrc'' ファイルは事実上の標準です。それらはこのようになっています:
@example
machine @var{mymachine} login @var{myloginname} password @var{mypassword} port @var{myport}
@end example

@code{machine} はサーバーです (DNS 名または IP アドレスのどちらか)。
@code{auth-source-search} 検索における @var{:host} でもあります。
@code{host} も使うことができます。

@code{port} は接続するポートまたはプロトコルです。
@code{auth-source-search} 検索における @var{:port} でもあります。

@code{user} はユーザー名です。@code{auth-source-search} 検索におけ
る @var{:user} でもあります。@code{login} および @code{account} も使うこ
とができます。

空白文字は auth-source に関しては常に OK です (他のプログラムには良くな
いかもしれませんが)。データは引用符で囲んでください。データ中の引用符は
あなたの予想通り @code{\} でエスケープしてください。

すべてこれらは任意です。どこでも同じパスワードを使うために、ただ単に

@example
password @var{mypassword}
@end example

と設定することができます---ということが可能であることを示しているのであっ
て、それを推奨しているわけではありません。繰り返しますが @emph{これは使
わないでください}。さもないとひどい目に会うでしょう。

``Netrc'' ファイルは通常 @code{.authinfo} または @code{.netrc} と呼ばれ
ます。今では @code{.authinfo} の方が普及しているようですが、後でわかるよ
うに auth-source ライブラリーはそれらの両方を受け入れるために、この混乱
を助長しています。

もし検索で問題があるのなら @code{auth-source-debug} を @code{trivia} に
設定して、ライブラリーがどのホスト、ポートおよびユーザーをチェックしてい
るかを @code{*Messages*} バッファーで見てください。同様に他のどんな問題
についても、何がチェックされているかを調べるのが、あなたの第一歩です。第
二のステップはもちろんそれについての blog を書いて、コメントで回答を待つ
ことです。

変数 @code{auth-sources} をカスタマイズすることができます。もし古いバー
ジョンの Emacs を使っているか、何かの理由のために auth-source ライブラリー
が読み込まれない場合、次のものが必要になるでしょう。

@lisp
(require 'auth-source)             ;; おそらく不要
(customize-variable 'auth-sources) ;; 任意、一回だけ行なってください
@end lisp

@defvar auth-sources
@code{auth-sources} 変数は、個々のホストとプロトコルのための netrc ファ
イルまたはシークレットサービス API の収集物がどこに在るか
を auth-source ライブラリーに知らせます。好みに応じてどうにでもできます
が、ディフォルトの最も簡潔な設定は次の通りです:

@lisp
;;; 旧ディフォルト: :host と :port が必要だったが、もはや不要。
(setq auth-sources '((:source "~/.authinfo.gpg" :host t :port t)))
;;; ほぼ等価だが、より短い (後述の fallback についての記述を参照)。
(setq auth-sources '((:source "~/.authinfo.gpg")))
;;; さらに短い @emph{ディフォルト}:
(setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
;;; シークレット API の @var{Login} コレクションを使う
;;; (@pxref{Secret Service API})
(setq auth-sources '("secrets:Login"))
@end lisp

特定のホストかプロトコルのエントリーを複数 @code{auth-sources} に追加す
ることによって、そのホストかプロトコルに特化した netrc ファイルを持つこ
とができます。普通これは必要ありませんが、netrc ファイルを共有したり変わっ
た設定がある場合は意味があるかもしれません (90% の Emacs ユーザーは変な
設定を持っていて、残りの 10% は @emph{本当に} 変わっています)。

これは、混在する 2つのソースを使う例です:

@lisp
(setq auth-sources '((:source (:secrets default) :host "myserver" :user "joe")
                     "~/.authinfo.gpg"))
@end lisp

@end defvar

もし @code{auth-sources} をカスタマイズしないと、ディフォルトで生活する
ことになるでしょう。そのディフォルトとは、どんなホストもポートについて
も netrc ファイル @file{~/.authinfo.gpg} を参照するということです。これ
は GnuPG で暗号化されたファイルです (@pxref{GnuPG and EasyPG Assistant
Configuration})。

もしその読み込みに失敗すると、暗号化されていない netrc ファイルであ
る @code{~/.authinfo}、続いて @code{~/.netrc} が使われます。

代表的な netrc 行の例は、ポートが無いものです。

@example
machine YOURMACHINE login YOU password YOURPASSWORD
@end example

これはどの認証ポートにも対応します。簡単でしょう?  でも SMTP サーバー
が IMAP サーバーと異なるパスワードを必要とするそのマシンのポート 433 に
あるならば、どうですか？

@example
machine YOURMACHINE login YOU password SMTPPASSWORD port 433
machine YOURMACHINE login YOU password GENERALPASSWORD
@end example

url-auth 認証 (HTTP/HTTPS) のためには、これを netrc ファイルに置いておく
必要があります:

@example
machine yourmachine.com:80 port http login testuser password testpass
@end example

これは HTTP で接続するどんな界面と認証方式 (basic または digest) にも対
応します。HTTPS も同様に設定します。もっときめ細かい制御が必要なら、
url-auth のソースコードと変数を調べてください。

Tramp の認証にはこれを使ってください:

@example
machine yourmachine.com port scp login testuser password testpass
@end example

ポートは Tramp の接続方法を意味することに注意してください。もしポートの
項を使わなければ、最初の方で説明したように、すべての Tramp の方式に合致
します。Tramp には 88 種類の接続方法があるので、変わった設定がある場合は
これが必要かもしれません (それらについての以前のコメントを見てください)。

@node Secret Service API
@chapter シークレットサービス API

TODO: どう働くかを一般的に、secrets.el はどうやるか、いくつかの例。

@node Help for developers
@chapter 開発者のためのヘルプ

auth-source ライブラリーは、何らかの動作を行なった結果の記録を採ることが
できます。

@defvar auth-source-debug
この変数を @code{trivia} にすると、@code{*Messages*} バッファーへのたく
さんの出力を見ることができます。あるいはこれに @code{message} に似た関数
を設定して、あなた独自のやり方で記録を採ることもできます。
@end defvar

auth-source ライブラリーには、外部で使うための関数は少ししかありません。

@defun auth-source-search SPEC

TODO: どうやって docstring を含める?

@end defun

では Gnus の @code{nnimap.el} から @code{auth-source-search} を使う例を
見てみましょう。

@example
(defun nnimap-credentials (address ports)
  (let* ((auth-source-creation-prompts
          '((user  . "IMAP user at %h: ")
            (secret . "IMAP password for %u@@%h: ")))
         (found (nth 0 (auth-source-search :max 1
                                           :host address
                                           :port ports
                                           :require '(:user :secret)
                                           :create t))))
    (if found
        (list (plist-get found :user)
              (let ((secret (plist-get found :secret)))
                (if (functionp secret)
                    (funcall secret)
                  secret))
              (plist-get found :save-function))
      nil)))
@end example

@c 以下の訳文の質が悪いのは原文の出来の酷さのため。
この呼び出しはその結果にユーザー名とパスワード (式中の @code{secret}) が
含まれることを求めています。さらに、もしその項目がまだ無かったら作る必要
もあります。その項目を作る際にユーザーとやり取りする場合は、式中にある質
問文が使われます。この呼び出しは、ユーザーへの質問文のディフォルト値のた
めに @code{auth-source-creation-defaults} にあるデータを渡すこともできま
す。

パスワードがもし関数だったら、それは評価される必要があることに注意してく
ださい。ある程度の安全対策として、それは関数で包まれています。

その後ログインに成功したら @code{nnimal.el} は次のよう
に @code{:save-function} を呼びます:

@example
(when (functionp (nth 2 credentials))
   (funcall (nth 2 credentials)))
@end example

これは @code{:save-function} の有無に関わらす動作するでしょう。
@code{:save-function}は新しい項目が作られたときだけ提供されるので、これ
は実際に「ログイン成功後」なのです。そして我々がちょうど使っていた認証情
報 (ただしこれが新た作られたものであるのなら) をセーブします。

最初にそれが呼ばれた後、@code{:save-function} が再度走ることはありません
(しかしもし @code{auth-source-debug} を @code{'trivia} に設定してあるな
らば、そのことを多少記録します。これすなわち、それは鬱陶しい同じ質問が繰
り返されることはないということです。

したがって @code{:create t} を設定した API ユーザーの責任は、もし存在す
るならば @code{:save-function} を呼ぶことです。

@defun auth-source-delete SPEC

TODO: どうやって docstring を含める?

@end defun

@defun auth-source-forget SPEC

TODO: どうやって docstring を含める?

@end defun

@defun auth-source-forget+ SPEC

TODO: どうやって docstring を含める?

@end defun

@node GnuPG and EasyPG Assistant Configuration
@appendix GnuPG および EasyPG アシスタントの設定

@code{auth-sources} をカスタマイズしない場合、auth-source ライブラリー
は @file{~/.authinfo.gpg} (GnuPG で暗号化されたファイル) を読み込みます。
その後で @file{~/.authinfo} を検査しますが、そのような暗号化されていない
ファイルを使うことは推奨しません。

Emacs 23 以降では @code{*.gpg} ファイルの暗号を自動的に解くためのオプショ
ン @code{auto-encryption-mode} があります。ディフォルトで有効です。もし
何らかの理由で Emacs の初期の版を使っている場合は、以下が必要です:

@lisp
(require 'epa-file)
(epa-file-enable)
@end lisp

あなたの GnuPG のパスワードがキャッシュされるようにしたいなら、
@code{gpg-agent} または EasyPG アシスアントを設定してくださ
い (@pxref{Caching Passphrases, , Caching Passphrases, epa})。

手早く使い始めるには、まず以下の設問に対する答を用意してください:

@enumerate
@item
GnuPG のバージョン 1 ではなく、バージョン 2 を使っていますか?
@item
公開鍵暗号でななく、共通鍵暗号を使っていますか?
@item
gpg-agent を使いたいですか?
@end enumerate

以下は上記の質疑に対するあなたの回答に基づいた設定です:

@multitable {111} {222} {333} {configuration configuration configuration}
@item @b{1} @tab @b{2} @tab @b{3} @tab Configuration
@item Yes @tab Yes @tab Yes @tab gpg-agent を設定してください。
@item Yes @tab Yes @tab No @tab gpg-agent 無しではできません。
@item Yes @tab No @tab Yes @tab gpg-agent を設定してください。
@item Yes @tab No @tab No @tab gpg-agent 無しではできません。
@item No @tab Yes @tab Yes @tab ELisp 版のパスワード・キャッシュを設定してください。
@item No @tab Yes @tab No @tab ELisp 版のパスワード・キャッシュを設定してください。
@item No @tab No @tab Yes @tab gpg-agent を設定してください。
@item No @tab No @tab No @tab gpg-agent 無しではできません。
@end multitable

gpg-agent を設定するには GnuPG マニュアル (@pxref{Invoking GPG-AGENT, ,
Invoking GPG-AGENT, gnupg}) の説明に従ってください。

ELisp 版のパスワード・キャッシュを使う場合
は @code{epa-file-cache-passphrase-for-symmetric-encryption} を設定して
ください。

@node Index
@chapter Index
@printindex cp

@node Function Index
@chapter Function Index
@printindex fn

@node Variable Index
@chapter Variable Index
@printindex vr

@bye

@c Local Variables:
@c coding: iso-2022-7bit
@c fill-column: 72
@c mode: texinfo
@c use-kuten-for-period: t
@c use-touten-for-comma: t
@c End:

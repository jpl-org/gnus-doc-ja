\input texinfo                  @c -*-texinfo-*-

@setfilename pgg-ja
@iftex
@firstparagraphindent insert
@end iftex

@set VERSION 0.1

@copying
This file describes PGG, an Emacs interface to various PGP implementations.

Copyright @copyright{} 2001, 2003, 2004, 2005, 2006, 2007  Free Software
Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License.''.

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.2 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分、表表紙テキストおよび裏表紙テキストは指
定しません。この利用許諾契約書の複写は「GNU フリー文書利用許諾契約書」と
いう章に含まれています。
@end quotation
@end copying

@dircategory Emacs
@direntry
* PGG-ja: (pgg-ja).        Emacs interface to various PGP implementations (Ja).
@end direntry

@settitle PGG @value{VERSION}

@titlepage
@title PGG

@author by Daiki Ueno
@page

@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@page

@node Top
@top PGG

これは PGG のマニュアルです。PGG は、安全な通信のための様々なツール
と Emacs の仲を取り持つライブラリーです。また、PGG は MIME メッセージの
暗号化と解読、それに署名と検証のための単純なユーザーインタフェースも提供
します。

@menu
* Overview::                    PGG とは
* Prerequisites::               あらかじめしておくべき複雑な事柄
* How to use::                  とっとと使い始めよう
* Architecture::                
* Parsing OpenPGP packets::     
* Function Index::              
* Variable Index::              
@end menu

@node Overview
@chapter 概要

PGG は、安全な通信のための様々なツールと Emacs の仲を取り持つライブラリー
です。同様の機能は Mailcrypt も持っていますが、Mailcrypt は PGP/MIME の
インフラで通常用いられる分離された PGP メッセージを取り扱うことができま
せん。これが、私 (作者) が新しいライブラリーを書いた主な理由です。

PGP/MIME は MIME Object Security Services (RFC1848) の実装です。その標準
は RFC2015 で記述されています。

@node Prerequisites
@chapter 必要条件

PGG を使うためには、少なくとも一つのプライバシー保護システムの実装が必要
です。このマニュアルは、そのようなプログラムをすでに取得、インストールし
ていて、基本的な使い方を知っていることを想定しています。

ディフォルトでは PGG は GnuPG を使います。そのようなシステムに慣れていな
いのであれば、@uref{http://www.gnupg.org/documentation/} にある GNU
Privacy Handbook (GPH) に目を通すことを勧めます。

GnuPG を使う場合には @code{gpg-agent} の利用を推奨します。それはバージョ
ン 2.0 以降の GnuPG とともに配布されています。これは、どんなプロトコルを
使うかとは無関係に秘密鍵を管理するデーモンで、パスフレーズを入力してキャッ
シュするための最も安全な手段を提供します (@pxref{Caching passphrase})。
それが稼働している場合、PGG はディフォルトで @code{gpg-agent} を使おうと
します。@xref{Invoking GPG-AGENT,,,gnupg,Using the GNU Privacy Guard}.

PGG は Pretty Good Privacy バージョン 2 またはバージョン 5 もサポートし
ます。

@node How to use
@chapter 使い方

このライブラリーの最上位インタフェースはとても単純で、公開鍵による暗号の
操作のみを想定しています。

PGG を使うためには、アプリケーションプログラムの冒頭で次の S 式を評価し
て下さい。

@lisp
(require 'pgg)
@end lisp

実行時に pgg.el の存在を確認したいなら、上記の方法ではなく以下のように、
必要な機能の autoload を設定することもできます。

@lisp
(autoload 'pgg-encrypt-region "pgg"
  "Encrypt the current region." t)
(autoload 'pgg-encrypt-symmetric-region "pgg"
  "Encrypt the current region with symmetric algorithm." t)
(autoload 'pgg-decrypt-region "pgg"
  "Decrypt the current region." t)
(autoload 'pgg-sign-region "pgg"
  "Sign the current region." t)
(autoload 'pgg-verify-region "pgg"
  "Verify the current region." t)
(autoload 'pgg-insert-key "pgg"
  "Insert the ASCII armored public key." t)
(autoload 'pgg-snarf-keys-region "pgg"
  "Import public keys in the current region." t)
@end lisp

@menu
* User Commands::               
* Selecting an implementation::  
* Caching passphrase::          
* Default user identity::	
@end menu

@node User Commands
@section ユーザーコマンド

この時点で、いくつかの暗号に関するコマンドを使うことができます。これらの
コマンドの挙動は起動方法に依存します。これらのコマンドは、ライブラリー関
数として利用されることもあるからです。例えば、あなたがある署名者の公開鍵
を持っていないと @code{pgg-verify-region} という関数は即座に失敗しますが、
これが対話的に呼び出された場合には、サーバーから公開鍵をダウンロードする
かどうかをあなたに尋ねます。

@deffn Command pgg-encrypt-region start end recipients &optional sign passphrase
@var{start} と @var{end} の間の領域を @var{recipients} 宛に送るものとし
て暗号化します。対話的に呼ぶと、受信者を尋ねます。

暗号化に成功すると、現在の領域の内容を暗号化したデータで置き換えます。

オプション引数 @var{sign} が @code{nil} でなかったら、署名と暗号化を同時
に行ないます。現在この機能は GnuPG で動作することが確認されていますが、
PGP や PGP5 では動作しないかもしれません。

オプション引数 @var{passphrase} が @code{nil} だったら、パスフレーズの
キャッシュからか、またはユーザーに入力してもらうことによってパスフレーズ
を得ます。
@end deffn

@deffn Command pgg-encrypt-symmetric-region &optional start end passphrase
現在の @var{start} と @var{end} の間の領域を、共通鍵暗号 (symmetric
cipher) で暗号化します。呼び出した後でパスフレーズが尋ねられます。

オプション引数 @var{passphrase} が @code{nil} だったら、パスフレーズの
キャッシュからか、またはユーザーに入力してもらうことによってパスフレーズ
を得ます。

共通鍵暗号による暗号化は、現在 GnuPG だけで実装されています。
@end deffn

@deffn Command pgg-decrypt-region start end &optional passphrase
@var{start} と @var{end} の間の領域を解読します。解読に成功すると、現在
の領域の内容を解読したデータで置き換えます。

オプション引数 @var{passphrase} が @code{nil} だったら、パスフレーズの
キャッシュからか、またはユーザーに入力してもらうことによってパスフレーズ
を得ます。
@end deffn

@deffn Command pgg-sign-region start end &optional cleartext passphrase
@var{start} と @var{end} の間のテキストに署名します。三番目のオプション
引数 @var{cleartext} が @code{nil} ではないか、あるいは対話的に呼ばれた
場合、分離された署名を作りません。そのような場合には、現在の領域の内容を
署名したデータで置き換えます。

オプション引数 @var{passphrase} が @code{nil} だったら、パスフレーズの
キャッシュからか、またはユーザーに入力してもらうことによってパスフレーズ
を得ます。
@end deffn

@deffn Command pgg-verify-region start end &optional signature fetch
@var{start} と @var{end} の間の領域にある署名を検証します。三番目のオプ
ション引数 @var{signature} が @code{nil} でなかったら、その引数は現在の
領域の分離された署名のファイルとして取り扱われます。

四番目のオプション引数 @var{fetch} が @code{nil} ではないか、あるいは対
話的に呼ばれた場合、公開鍵をサーバーから取得します。
@end deffn

@deffn Command pgg-insert-key
ユーザーの公開鍵を取得して、それを ASCII 装甲の形式で挿入します。
@end deffn

@deffn Command pgg-snarf-keys-region start end
@var{start} と @var{end} の間の領域にある公開鍵を集め、ユーザーの鍵
束 (keyring) に追加します。
@end deffn

@node Selecting an implementation
@section どの実装を使うか

PGP は歴史が長く、今では多くの実装を利用することができるので、それぞれが
持っている個々の機能がずいぶん異なっていることがあります。例え
ば GnuPG を使っているのならば、暗号アルゴリズムとして 3DES や CAST5、
BLOWFISH などを選ぶことができますが、PGP のバージョン 2 は IDEA しかサポー
トしていません。

どの実装を使うかは @code{pgg-scheme} 変数が制御します。@code{nil} だった
ら (それがディフォルト)、代わりに @code{pgg-default-scheme} 変数の値を使
います。

@defvar pgg-scheme
どの PGP 実装を用いるかを強制します。設定できるのは @code{gpg}、
@code{pgp} および @code{pgp5} のどれかです。ディフォルトは @code{nil} で
す。
@end defvar

@defvar pgg-default-scheme
ディフォルトの PGP 実装です。値は @code{gpg}、@code{pgp} およ
び @code{pgp5} のどれかでなければなりません。ディフォルト
は @code{gpg} です。
@end defvar

@node Caching passphrase
@section パスフレーズをキャッシュする

PGP 実装として GnuPG (gpg) を使うのであれば、パスフレーズの入力とキャッ
シュ@footnote{@code{gpg-agent} は実際にはパスフレーズではなくて秘密鍵を
キャッシュします。一方ユーザーの視点からは、この技術的な差異は見えませ
ん。}するために @code{gpg-agent} というプログラムを使うことを推奨します。

@defvar pgg-gpg-use-agent
@code{nil} でない値では、可能な場合は常にいつでも @code{gpg-agent} を使
おうとします。ディフィフォルトは @code{t} です。@code{gpg-agent} が稼働
していないか、または GnuPG が現在の PGP 実装として選択されていない場合は、
PGG 自身が持っているパスフレーズをキャッシュする仕組みが使われます (下記
参照)。
@end defvar

PGG で @code{gpg-agent}を使うには、第一に @code{gpg-agent} が確実に稼働
しているようにして下さい。例えば X Window System を走らせているのであれ
ば、以下の行をあなたの @file{.xsession} ファイルに置くことによって、それ
を確実にすることができます:

@smallexample
eval "$(gpg-agent --daemon)"
@end smallexample

@code{gpg-agent} の起動に関するさらに詳しいことは、@xref{Invoking
GPG-AGENT,,,gnupg,Using the GNU Privacy Guard}.

GnuPG のパスフレーズを必要とする PGG の機能を実行するときはいつも、
GnuPG は @code{gpg-agent} とやり取りを行ない、それはあなたにパスフレーズ
を入力することを要求します。しかし @code{gpg-agent} がその結果を「キャッ
シュ」するので、次回以降の実行では再びパスフレーズの入力は要りません。
(通常このキャッシュは一定時間経過後に期限切れ消去されます。これを変更す
るには、@code{gpg-agent} を起動するときに @code{--default-cache-ttl} オ
プションを使って下さい。)

X Window System の環境では @code{gpg-agent} はパスフレーズの入力を要求す
るためにグラフィックなウィンドウを開きます。しかし文字端末で Emacs を使っ
ている場合は、@code{gpg-agent} は端末からの入力を受け取る上で問題があり
ます。それが Emacs に送られてしまうからです。この問題に対処するための暫
定的な対策のひとつは、@code{gpg-agent} を @code{--keep-tty} オプションと
ともに Emacs とは別の端末で走らせることです。これは @code{gpg-agent} に、
パスフレーズの入力にそれ自身の端末を使うようにさせます。

@code{gpg-agent} を使わない場合、PGG は Emacs を介してパスフレーズの入力
を要求します。これにはパスフレーズをキャッシュする仕組みがあり、それは変
数 @code{pgg-read-passphrase} で制御されます (下記参照)。

@code{gpg-agent} ではなく PGG でパスフレーズを扱う場合には安全上のリスク
があります。Emacs の要求に従ってパスフレーズを入力すると、それは一時的
に Emacs が実行しているメモリーに cleartext 文字列として格納されます。も
しそのメモリーがディスクとの間で swap されると、理論上 root ユーザーはパ
スフレーズを swap ファイルから抽出することができます。その上、そのシステ
ムが廃棄されたり盗難に会った後も、その cleartext のパスフレーズが含まれ
ている swap ファイルはディスクに残っているかもしれないのです。
@code{gpg-agent} はメモリーを lock するような策をもって、この問題を回避
しています。それは Emacs には実装されていません。

@defvar pgg-cache-passphrase
@code{nil} でなければ、パスフレーズを保持します。初期値は @code{t} です。
しかし、あなたがセキュリティについて気掛かりなら、この変数
を @code{nil} に設定することによって、パスフレーズのキャッシュをやめさせ
ることができます。
@end defvar

@defvar pgg-passphrase-cache-expiry
パスフレーズを保持しておく時間を秒で指定します。
@end defvar

@node Default user identity
@section ディフォルトのユーザー ID

通常 PGP の実装は、暗号化および復号化に使う適切な鍵を選ぶことができます
が、あなたが一つ以上の鍵を持っている場合、用いる鍵の id を指定する必要が
あります。

@defvar pgg-default-user-id
ディフォルトのユーザー ID です。指定しない場合
は @samp{(user-login-name)} の戻り値がディフォルトになります。この変数は
カスタマイズ可能です。
@end defvar

@defvar pgg-gpg-user-id
GnuPG で使うディフォルトのユーザー ID です。ディフォルトは @samp{nil} で
す。@code{nil} ではない値にすると、@samp{pgg-default-user-id} より優先し
て使われます。カスタマイズ可能です。
@end defvar

@defvar pgg-pgp-user-id
PGP 2.x/6.x で使うディフォルトのユーザー ID です。ディフォルト
は @samp{nil} です。@code{nil} ではない値にすると、
@samp{pgg-default-user-id} より優先して使われます。カスタマイズ可能です。
@end defvar

@defvar pgg-pgp5-user-id
PGP 5.x で使うディフォルトのユーザ ID です。ディフォルトは @samp{nil} で
す。@code{nil} ではない値にすると、@samp{pgg-default-user-id} より優先し
て使われます。カスタマイズ可能です。
@end defvar

@node Architecture
@chapter 構成

PGG は「PGP 実装のスキーム (枠組)」という考えを導入します。以後、「スキー
ム (scheme)」と表記します。この用語は luna object system での singleton
object に由来します。

PGG は PGP の機能にアクセスすると同時にそれを開発するために設計されたの
で、その構成は、相互運用性だけでなく拡張性も考慮する必要がありました。こ
の章では、PGG のバックエンドをどのように記述するかを探しながら、PGG がど
のようにつくられているかを探検してみましょう。

@menu
* Initializing::                
* Back end methods::             
* Getting output::              
@end menu

@node Initializing
@section 初期化

スキームは、使う前に初期化されなければなりません。ただ一つのスキームを使
うことを保証するのが良いでしょう。

以下のコードは @file{pgg-gpg.el} からの抜き書きです。あ
る @code{pgg-gpg} のスキームがいったん初期化されると、それ
は @code{pgg-scheme-gpg-instance} 変数に保存され、以後、再利用されます。

@lisp
(defvar pgg-scheme-gpg-instance nil)

(defun pgg-make-scheme-gpg ()
  (or pgg-scheme-gpg-instance
      (setq pgg-scheme-gpg-instance
	    (luna-make-entity 'pgg-scheme-gpg))))
@end lisp

関数の名前は @code{pgg-make-scheme-} の後ろにバックエンド名を付加したも
のにしなければなりません。

@node Back end methods
@section バックエンドのメソッド

各バックエンドには、これらのメソッドが存在しなければなりません。メソッド
の実行結果のステータスを知らせなければならないので、メソッドの出力は特別
なバッファーに保存されます (@pxref{Getting output})。

@deffn Method pgg-scheme-lookup-key scheme string &optional type
@var{string} に関連付けられた鍵を返します。三番目のオプション引
数 @var{type} が非-@code{nil} だったら、秘密の鍵束から検索します。
@end deffn

@deffn Method pgg-scheme-encrypt-region scheme start end recipients &optional sign passphrase
@var{start} と @var{end} の間の領域を @var{recipients} 宛に送るものとし
て暗号化します。オプション引数 @var{sign} が @code{nil} でなかったら、署
名と暗号化を同時に行ないます。暗号化に成功すると @code{t} を、失敗する
と @code{nil} を返します。
@end deffn

@deffn Method pgg-scheme-encrypt-symmetric-region scheme start end &optional passphrase
現在の @var{start} と @var{end} の間の領域を、共通鍵暗号 (symmetric
cipher) とパスフレーズで暗号化します。暗号化に成功すると @code{t} を返し、
そうでなければ @code{nil} を返します。この機能は現在 GnuPG だけで実装さ
れています。
@end deffn

@deffn Method pgg-scheme-decrypt-region scheme start end &optional passphrase
@var{start} と @var{end} の間の領域を解読します。解読に成功する
と @code{t} を、失敗すると @code{nil} を返します。
@end deffn

@deffn Method pgg-scheme-sign-region scheme start end &optional cleartext passphrase
@var{start} と @var{end} の間のテキストに署名します。三番目のオプション
引数 @var{cleartext} が @code{nil} ではない場合、分離された署名を作りま
せん。署名に成功すると @code{t} を、失敗すると @code{nil} を返します。
@end deffn

@deffn Method pgg-scheme-verify-region scheme start end &optional signature
@var{start} と @var{end} の間の領域にある署名を検証します。三番目のオプ
ション引数 @var{signature} が @code{nil} でなかったら、その引数は現在の
領域の分離された署名のファイルとして取り扱われます。署名が正しく検証され
た場合は @code{t} を、失敗すると @code{nil} を返します。
@end deffn

@deffn Method pgg-scheme-insert-key scheme
ユーザーの公開鍵を取得して、それを ASCII 装甲の形式で挿入します。成功す
ると @code{t} を、失敗すると @code{nil} を返します。
@end deffn

@deffn Method pgg-scheme-snarf-keys-region scheme start end
@var{start} と @var{end} の間の領域にある公開鍵を集め、ユーザーの鍵
束 (keyring) に追加します。成功すると @code{t} を、失敗する
と @code{nil} を返します。
@end deffn

@node Getting output
@section 出力を得る

バックエンドメソッド (@pxref{Back end methods}) の出力は特別なバッファー
に格納されます。したがって、これらのメソッドは実行結果を伝える必要があり
ます。

@defvar pgg-errors-buffer
PGP コマンド実行時の標準エラー出力は、このバッファーに格納されます。
@end defvar

@defvar pgg-output-buffer
PGP コマンド実行時の標準出力は、このバッファーに格納されます。
@end defvar

@defvar pgg-status-buffer
PGP コマンド実行時のその他の結果の情報は、このバッファーに格納されます。
@end defvar

@node Parsing OpenPGP packets
@chapter OpenPGP パケットの解析

OpenPGP のメッセージのフォーマットは、相互運用できるアプリケーション開発
に必要なすべての情報を出力するように維持されています。その標準
は RFC2440 に記載されています。

PGG は OpenPGP パケットに対応した独自のメッセージ解析を行ないます。

@defun pgg-parse-armor string
@var{string} 内のパケットの並びを @code{list} の形式で返します。
@end defun

@defun pgg-parse-armor-region start end
@var{start} と @var{end} の間の領域にあるパケットの並びを @code{list} の
形式で返します。
@end defun

@defvar pgg-ignore-packet-checksum
@code{nil} でなかったら、パケットのチェックサムを検証しません。
@end defvar

@node Function Index
@chapter Function Index
@printindex fn

@node Variable Index
@chapter Variable Index
@printindex vr

@summarycontents
@contents
@bye

@c Local Variables:
@c coding: iso-2022-7bit
@c fill-column: 72
@c mode: texinfo
@c use-kuten-for-period: t
@c use-touten-for-comma: t
@c End:

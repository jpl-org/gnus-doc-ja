\input texinfo                  @c -*-texinfo-*-

@setfilename pgg-ja

@set VERSION 0.1


@copying
This file describes the PGG.

Copyright (C) 2003 Free Software Foundation, Inc.
Copyright (C) 2001 Daiki Ueno.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.1 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分、表表紙テキストおよび裏表紙テキストは指
定しません。この利用許諾契約書の複写は「GNU フリー文書利用許諾契約書」と
いう章に含まれています。
@end quotation
@end copying

@dircategory Emacs
@direntry
* PGG-ja: (pgg-ja).        Emacs interface to various PGP implementations (Ja).
@end direntry

@settitle PGG @value{VERSION}


@titlepage
@title PGG

@author by Daiki Ueno
@page

@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@page

@node Top
@top PGG
これは PGG のマニュアルです。PGG は、安全な通信のための様々なツールと
Emacs の仲を取り持つインタフェースです。また、PGG は、MIME メッセージ
の暗号化、復号化、署名、検証のための単純なユーザインタフェースも提供しま
す。

@menu
* Overview::                    PGG とは
* Prerequisites::               あらかじめしておくべき複雑な事柄
* How to use::                  とっとと使い始めよう
* Architecture::                
* Parsing OpenPGP packets::     
* Function Index::              
* Variable Index::              
@end menu

@node Overview
@chapter Overview

PGG は、安全な通信のための様々なツールと Emacs の仲を取り持つインタフェー
スです。同様の機能は Mailcrypt も持っていますが、
Mailcrypt は PGP/MIME のインフラで通常用いられる分離された
PGP メッセージを取り扱うことができません。これが、私(作者)が新しいライブ
ラリを書いた主な理由です。

PGP/MIME は MIME Object Security Services (RFC1848) の実装です。その標準
は RFC2015 で記述されています。

@node Prerequisites
@chapter Prerequisites

PGG を使うためには少なくとも1つのプライバシー保護システムの実装が必要で
す。このマニュアルでは、あなたがそのようなプログラムをすでに取得、インス
トールしていて、基本的な使い方を知っていることを仮定します。

ディフォルトでは、PGG は GnuPG を使います。しかし、PGP (Pretty Good
Privacy) のバージョン2または5もサポートします。もし、あなたがこのような
システムに慣れていないのであれば、GNU Privacy Handbook (GPH) を先に読ま
れることをお薦めします。GPH は、@uref{http://www.gnupg.org/gph/} で見る
ことができます。

@node How to use
@chapter How to use

このライブラリの最上位インタフェースはとても単純で、公開鍵による暗号の操
作のみを想定しています。

PGG を使うためには、あなたのアプリケーションプログラムの冒頭で次の S 式
を評価します。

@lisp
(require 'pgg)
@end lisp

あなたが pgg.el の存在を確認したいなら、上記の方法ではなく以下のように、
必要な機能について autoload のリストを設定することもできます。

@lisp
(autoload 'pgg-encrypt-region "pgg"
  "Encrypt the current region." t)
(autoload 'pgg-decrypt-region "pgg"
  "Decrypt the current region." t)
(autoload 'pgg-sign-region "pgg"
  "Sign the current region." t)
(autoload 'pgg-verify-region "pgg"
  "Verify the current region." t)
(autoload 'pgg-insert-key "pgg"
  "Insert the ASCII armored public key." t)
(autoload 'pgg-snarf-keys-region "pgg"
  "Import public keys in the current region." t)
@end lisp

@menu
* User Commands::               
* Selecting an implementation::  
* Caching passphrase::          
* Default user identity::	
@end menu

@node User Commands
@section User Commands

この時点で、あなたはいくつかの暗号に関するコマンドを使うことができます。
これらのコマンドの挙動は起動方法に依存します。これらのコマンドはライブラ
リ関数として利用されることもあるからです。例えば、あなたがある署名者の公
開鍵を持っていないとき、@code{pgg-verify-region} という関数は即座に失敗
しますが、これが対話的に呼び出された場合には、サーバから公開鍵をダウンロー
ドするかどうか、あなたに確認します。

@deffn Command pgg-encrypt-region start end recipients &optional sign
@var{recipients}宛のメッセージについて、@var{start}と@var{end}の間で指定
された現在の範囲を暗号化します。対話的に呼ばれると、受信者を聞かれます。

暗号化に成功すると、現在の範囲の内容が(可能な部分について)暗号化された内
容に置き換えられます。

オプション引数 @var{sign} が non-@code{nil} ならば、署名と暗号化が同時に
行われます。現在、この機能は GnuPG でだけ動作します。
@end deffn

@deffn Command pgg-decrypt-region start end
@var{start}と@var{end}の間で指定された現在の範囲を復号化します。復号化に
成功すると、現在の範囲の内容が(可能な部分について)復号化された内容に置き
換えられます。
@end deffn

@deffn Command pgg-sign-region start end &optional cleartext
@var{start}と@var{end}の間のテキストに署名します。3番目のオプション引数
@var{cleartext} が non-@code{nil} であるか、あるいは対話的に呼ばれた場合、
分離された署名は作られません。そのような場合、現在の範囲の内容が(可能な
部分について)署名された結果に置き換えられます。
@end deffn

@deffn Command pgg-verify-region start end &optional signature fetch
@var{start}と@var{end}の間の範囲を検査します。3番目のオプション引数
@var{signature} が non-@code{nil} であるか、あるいは対話的に呼ばれた場合、
分離された署名として取り扱われます。

4番目のオプション引数 @var{fetch} が non-@code{nil} であるか、あるいは対
話的に呼ばれた場合、公開鍵をサーバから取得します。
@end deffn

@deffn Command pgg-insert-key
ユーザの公開鍵を取得して、ASCII-armored フォーマットで挿入します。
@end deffn

@deffn Command pgg-snarf-keys-region start end
@var{start}と@var{end}の間の範囲にある公開鍵を集め、
ユーザの鍵輪 (keyring) に追加します。
@end deffn

@node Selecting an implementation
@section Selecting an implementation

PGP は歴史が長く、今では多くの実装を利用することができるので、それぞれが
持っている個々の機能がずいぶん異なっていることがあります。例えば、あなた
が GnuPG をお使いなら、暗号アルゴリズムに 3DES や CAST5、BLOWFISH などを
選ぶことができるが、PGP のバージョン 2 では IDEA しかサポートされていな
いことをご存じでしょう。

デフォルトでは、@code{pgg-scheme} 変数が設定されていなければ、PGG はあら
かじめ用意されたスキーム (scheme) から、用いたい暗号アルゴリズムに必要な
サービスの実装を検索します。言い換えれば、やってくる PGP 武装を処理する
のにどのコマンドを使うかを制御するための 2 つのオプションがあります。
1つは暗号化と署名について、もう一方は復号化と検証について、です。

@defvar pgg-scheme
復号化と検証にどの PGP 実装を用いるかを強制します。
設定できるのは @code{gpg}、@code{pgp} および @code{pgp5} のどれかです。
@end defvar

@defvar pgg-default-scheme
暗号化と署名にどの PGP 実装を用いるかを強制します。
設定できるのは @code{gpg}、@code{pgp} および @code{pgp5} のどれかです。
@end defvar

@node Caching passphrase
@section Caching passphrase

PGG はパスフレーズをキャッシュしておくのに単純なメカニズムを使います。こ
れがデフォルトです。

@defvar pgg-cache-passphrase
non-@code{nil} でなければ、パスフレーズを保持します。
初期値は @code{t} です。しかし、あなたがセキュリティについて気掛かりなら、
これを @code{nil} に設定してやれば、パスフレーズの保持をやめさせることが
できます。
@end defvar

@defvar pgg-passphrase-cache-expiry
パスフレーズを保持しておく時間を秒で指定します。
@end defvar

@node Default user identity
@section Default user identity

PGP の実装は、通常、暗号化および復号化に使う適切な鍵を選ぶことができます
が、あなたが1つ以上の鍵を持っている場合、用いる鍵の id を指定する必要が
あります。

@defvar pgg-default-user-id
あなた自身の通常用いるユーザ ID です。
指定しない場合、初期値は @samp{(user-login-name)} の戻値で決定されます。
カスタマイズ可能です。
@end defvar

@defvar pgg-gpg-user-id
GnuPG で使うあなた自身のユーザ ID です。デフォルトは @samp{nil} です。
この値は @samp{pgg-default-user-id} を上書きします。カスタマイズ可能です。
@end defvar

@defvar pgg-pgp-user-id
PGP 2.x/6.x で使うあなた自身のユーザ ID です。
デフォルトは @samp{nil} です。この値は @samp{pgg-default-user-id} を上書
きします。カスタマイズ可能です。
@end defvar

@defvar pgg-pgp5-user-id
PGP 5.x で使うあなた自身のユーザ ID です。デフォルトは @samp{nil} です。
この値は @samp{pgg-default-user-id} を上書きします。カスタマイズ可能です。
@end defvar

@node Architecture
@chapter Architecture

PGG は「PGP 実装のスキーム(枠組)」という考えを導入します。以後、
「スキーム (scheme)」と表記します。この用語は luna object system での
singleton object に由来します。

PGG は PGP の機能にアクセスできると同時にそれを開発するために設計された
ので、その基本設計では、相互運用性だけでなく拡張性も考えないといけません。
この章では、PGG のバックエンドをどのように記述するかを探しながら、PGG が
どのようにつくられているかを探検してみましょう。

@menu
* Initializing::                
* Back end methods::             
* Getting output::              
@end menu

@node Initializing
@section Initializing

スキームは、使う前に初期化されなければなりません。
ただひとつのスキームを保つよう保証するのがよいでしょう。

以下のコードは @file{pgg-gpg.el} からの抜き書きです。
一旦、ある @code{pgg-gpg} のスキームが初期化されると、
それは @code{pgg-scheme-gpg-instance} 変数に保存され、以後、再利用されま
す。

@lisp
(defvar pgg-scheme-gpg-instance nil)

(defun pgg-make-scheme-gpg ()
  (or pgg-scheme-gpg-instance
      (setq pgg-scheme-gpg-instance
	    (luna-make-entity 'pgg-scheme-gpg))))
@end lisp

関数の名前は @code{pgg-make-scheme-} の後ろにバックエンド名が付加するよ
うに付けられなければなりません。

@node Back end methods
@section Back end methods

各バックエンドにはメソッドが存在しなければなりません。メソッドの実行結果
のステータスを知らせなければならないので、メソッドの出力は特別なバッファ
に保存されます(@ref{Getting output})。

@deffn Method pgg-scheme-lookup-key scheme string &optional type
@var{string} に関連づけられた鍵を返します。
3番目のオプション引数 @var{type} が non-@code{nil} ならば、秘密鍵輪から
検索します。
@end deffn

@deffn Method pgg-scheme-encrypt-region scheme start end recipients &optional sign
@var{recipients}宛のメッセージについて、@var{start}と@var{end}の間で指定
された現在の範囲を暗号化します。
オプション引数 @var{sign} が non-@code{nil} ならば、署名と暗号化が同時に
行われます。暗号化に成功すると @code{t} を、失敗すると @code{nil} を返し
ます。
@end deffn

@deffn Method pgg-scheme-decrypt-region scheme start end
@var{start}と@var{end}の間で指定された現在の範囲を復号化します。復号化に
成功すると @code{t} を、失敗すると @code{nil} を返します。
@end deffn

@deffn Method pgg-scheme-sign-region scheme start end &optional cleartext
@var{start}と@var{end}の間のテキストに署名します。3番目のオプション引数
@var{cleartext} が non-@code{nil} であるか、あるいは対話的に呼ばれた場合、
分離された署名は作られません。署名に成功すると @code{t} を、
失敗すると @code{nil} を返します。
@end deffn

@deffn Method pgg-scheme-verify-region scheme start end &optional signature
@var{start}と@var{end}の間の範囲を検査します。3番目のオプション引数
@var{signature} が non-@code{nil} である場合、分離された署名として取り扱
われます。署名が正しく検証された場合、@code{t} を、
失敗すると @code{nil}を返します。
@end deffn

@deffn Method pgg-scheme-insert-key scheme
ユーザの公開鍵を取得して、ASCII-armored フォーマットで挿入します。
成功すると @code{t} を、失敗すると @code{nil} を返します。
@end deffn

@deffn Method pgg-scheme-snarf-keys-region scheme start end
@var{start}と@var{end}の間の範囲にある公開鍵を集め、
ユーザの鍵輪 (keyring) に追加します。
成功すると @code{t} を、失敗すると @code{nil} を返します。
@end deffn

@node Getting output
@section Getting output

バックエンドメソッド (@ref{Back end methods}) の出力は特別なバッファに保
存されます。したがって、これらのメソッドは実行結果を伝える必要があります。

@defvar pgg-errors-buffer
PGP コマンド実行時の標準エラー出力は、このバッファに保存されます。
@end defvar

@defvar pgg-output-buffer
PGP コマンド実行時の標準出力は、このバッファに保存されます。
@end defvar

@defvar pgg-status-buffer
PGP コマンド実行時のその他の結果情報は、このバッファに保存されます。
@end defvar

@node Parsing OpenPGP packets
@chapter Parsing OpenPGP packets

OpenPGP のメッセージのフォーマットは、相互運用できるアプリケーション開発
に必要なすべての情報を出力するように維持されています。
その標準は、RFC2440 に記載されています。

PGG は OpenPGP に対応した独自のメッセージ解析を行います。

@defun pgg-parse-armor string
@var{string} 内のパケットの並びを一覧します。
@end defun

@defun pgg-parse-armor-region start end
@var{start}と@var{end}の間の範囲内のパケットの並びを一覧します。
@end defun

@defvar pgg-ignore-packet-checksum
non-@code{nil} ならば、パケットのチェックサムを検証しません。
@end defvar

@node Function Index
@chapter Function Index
@printindex fn

@node Variable Index
@chapter Variable Index
@printindex vr

@summarycontents
@contents
@bye

@c Local Variables:
@c coding: iso-2022-7bit
@c fill-column: 72
@c mode: texinfo
@c use-kuten-for-period: t
@c use-touten-for-comma: t
@c End:

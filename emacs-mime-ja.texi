\input texinfo

@setfilename emacs-mime-ja
@settitle Emacs MIME Manual
@synindex fn cp
@synindex vr cp
@synindex pg cp

@copying
このファイルは Emacs MIME インターフェースの機能を文書化したものです。

Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003
          Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU
Manual'', and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License'' in the Emacs manual.

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.1 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分は指定しません。「A GNU Manual」は表表紙
テキスト、以下の (a) は裏表紙テキストです。この利用許諾契約書の複写は
「Emacs manual」の「GNU フリー文書利用許諾契約書」という章に含まれていま
す。

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

(a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を GNU ソフトウェア
のように複製したり変更する自由があります。複製はフリーソフトウェア財団に
よって出版されました。(フリーソフトウェア財団は) GNU の開発のために必要
な資金を集めています。」

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.

この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集著作物
の一部です。もしあなたがこの文書を収集著作物から分離して配布したいときは、
契約書の第 6 項に記述されているように、文書に契約書の複写を付加すること
によって、行なうことができます。
@end quotation
@end copying

@dircategory Emacs
@direntry
* Emacs MIME-ja: (emacs-mime-ja). Emacs MIME de/composition library (Japanese).
@end direntry
@iftex
@finalout
@end iftex
@setchapternewpage odd

@titlepage
@title Emacs MIME Manual

@author by Lars Magne Ingebrigtsen
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@node Top
@top Emacs MIME

このマニュアルは @acronym{MIME} メッセージの表示と作成に使われるライブラ
リーを文書化したものです。

このマニュアルは、@acronym{MIME} のエンコード/デコード・プロセスの振る舞
いを変更したいか、Emacs @acronym{MIME} ライブラリーがどのように動作する
かのもっと詳細な描写を望むユーザ、および @acronym{MIME} の要素を操作する
関数およびコマンドを書きたい人たちを対象にしています。

@acronym{MIME} は @dfn{Multipurpose Internet Mail Extensions} の省略表記
です。この標準は多数の RFC に文書化されていて、主なものは次の通りです:
RFC2045 (インターネット・メッセージ本文の書式), RFC2046 (メディアタイプ),
RFC2047 (メッセージヘッダーの非-@acronym{ASCII} テキスト拡張),
RFC2048 (登録手続), RFC2049 (適合基準と事例)。@acronym{MIME} に準拠した
ソフトウェアを書こうと思っている人は誰でも、少なくと
も RFC2045 と RFC2047 は読んでおくことを強く勧めます。

@menu
* Decoding and Viewing::  デコードと表示のための枠組み
* Composing::             @acronym{MML}; @acronym{MIME} パート記述用言語
* Interface Functions::   基本的な関数の抽象化
* Basic Functions::       ユーティリティーおよび基本的な解析のための関数
* Standards::             使われている RFC と作業文書の概略
* Index::                 関数および変数の索引
@end menu

@node Decoding and Viewing
@chapter デコードと表示

この章は、上位階層での @acronym{MIME} メッセージのデコードと表示を扱いま
す。

その主な目的は、最初に @acronym{MIME} の記事を解析し、次にその解析の結果
返される「@dfn{ハンドル}」 のリストに基づいて、他のプログラムが物事を行
なうことを可能にすることです。

@menu
* Dissection::             @acronym{MIME} メッセージの解析
* Non-MIME::               非-@acronym{MIME} メッセージの解析
* Handles::                ハンドルの取り扱い
* Display::                ハンドルの表示
* Display Customization::  表示に影響する変数
* Files and Directories::  添付ファイルの保存と命名
* New Viewers::            自分用ビューワーの書き方
@end menu

@node Dissection
@section 解体

@code{mm-dissect-buffer} は @acronym{MIME} 記事の解体を担当する関数です。
マルチパートのメッセージが与えられると、メッセージを再帰的に掘り下げ、構
造に従って、そのメッセージの構造を描写する @acronym{MIME} ハンドルの木構
造を返します。

@node Non-MIME
@section 非-MIME
@vindex mm-uu-configure-list

Gnus はいくつかの非-@acronym{MIME} の添付ファイルも理解します。それら
は postscript, uuencode, binhex, yenc, shar, forward, gnatsweb, pgp,
diff のようなものです。それぞれの機能は @code{mm-uu-configure-list} に項
目を追加することによって、無効にすることができます。例です。

@lisp
(require 'mm-uu)
(add-to-list 'mm-uu-configure-list '(pgp-signed . disabled))
@end lisp

@table @code
@item postscript
@findex postscript
ポストスクリプトのファイル。

@item uu
@findex uu
Uuencode されたファイル。

@item binhex
@findex binhex
Binhex でエンコードされたファイル。

@item yenc
@findex yenc
Yenc でエンコードされたファイル。

@item shar
@findex shar
Shar 書庫ファイル。

@item forward
@findex forward
非-@acronym{MIME} で転送されたメッセージ。

@item gnatsweb
@findex gnatsweb
Gnatsweb の添付ファイル。

@item pgp-signed
@findex pgp-signed
@acronym{PGP} で署名された平文 (clear text)。

@item pgp-encrypted
@findex pgp-encrypted
@acronym{PGP} で暗号化された平文 (clear text)。

@item pgp-key
@findex pgp-key
@acronym{PGP} の公開鍵。

@item emacs-sources
@findex emacs-sources
@vindex mm-uu-emacs-sources-regexp
Emacs のソースコード。この項目は @code{mm-uu-emacs-sources-regexp} に合
致するグループでのみ動作します。

@item diff
@vindex diff
@vindex mm-uu-diff-groups-regexp
パッチ。これは、コミットされたファイルの差分が自動的に送られるグループを
対象にしたものです。@code{mm-uu-diff-groups-regexp} に合致するグループで
のみ動作します。
@end table

@node Handles
@section ハンドル

@acronym{MIME} ハンドルは、@acronym{MIME} の構成要素を完全に記述するリス
トです。

ハンドルの要素をアクセスするために、以下のマクロを使うことができます:

@table @code
@item mm-handle-buffer
@findex mm-handle-buffer
デコードされていない @acronym{MIME} パートの内容物を保持しているバッファ
を返します。

@item mm-handle-type
@findex mm-handle-type
解析済みの、パートの @code{Content-Type} を返します。

@item mm-handle-encoding
@findex mm-handle-encoding
パートの @code{Content-Transfer-Encoding} を返します。

@item mm-handle-undisplayer
@findex mm-handle-undisplayer
表示されているパートを消すことができるもの (訳注: 関数など) を (それが表
示されている場合に) 返します。

@item mm-handle-set-undisplayer
@findex mm-handle-set-undisplayer
表示されているパートを消すことができるもの (訳注: 関数など) を設定します。

@item mm-handle-disposition
@findex mm-handle-disposition
解析済みの、パートの @code{Content-Disposition} (訳注: 配置指定) を返し
ます。

@item mm-get-content-id
@code{Content-ID} で参照されるハンドル (単数または複数) を返します。
@end table

@node Display
@section 表示

表示し、消去し、保存するための関数。

@table @code
@item mm-display-part
@findex mm-display-part
パートを表示します。

@item mm-remove-part
@findex mm-remove-part
パートを (それが表示されていたら) 消去します。

@item mm-inlinable-p
@findex mm-inlinable-p
@acronym{MIME} タイプがインラインで表示可能かどうかを返します。

@item mm-automatic-display-p
@findex mm-automatic-display-p
@acronym{MIME} タイプが自動的に表示されるべきかどうかを返します。

@item mm-destroy-part
@findex mm-destroy-part
パートによって使われているすべての資源を開放します (訳注: パートの表示、
およびパートを解体して得た個々の部品を一時的に保持しているバッファやファ
イルを消去します)。

@item mm-save-part
@findex mm-save-part
パートをファイルに保存します。

@item mm-pipe-part
@findex mm-pipe-part
パートをあるプロセスにパイプします。

@item mm-interactively-view-part
@findex mm-interactively-view-part
パートを表示するために使う mailcap の手段を尋ねます。
@end table

@node Display Customization
@section 表示のカスタマイズ

@table @code
@item mm-inline-media-tests
@vindex mm-inline-media-tests
これは連想リストです。鍵 (第一要素) は @acronym{MIME} タイプ、第二要素は
パートを @dfn{インライン} で (すなわち Emacs の画面に埋め込んで) 表示す
るための関数、そして第三要素はそのパートがインラインで表示することが可能
かどうかを調べるために評価 (@code{eval}) されるフォームです。

この変数は、あるパートがインライン表示可能かどうかと、もし可能ならそのや
り方を指定します。パートが現実にインライン表示されているかどうかを示すも
のではありません。

@item mm-inlined-types
@vindex mm-inlined-types
一方これは、上記の変数によって設定された条件を満足する、インライン表示可
能なタイプを示します。これは @acronym{MIME} メディアタイプのリストです。
(訳注: それぞれの要素は正規表現です。)

@item mm-automatic-display
@vindex mm-automatic-display
これは上記の変数が認めるタイプのうちで、「自動的」に表示されるタイプのリ
ストです。つまり、インライン表示が可能なパートだけが自動的に表示されます。

@item mm-automatic-external-display
@vindex mm-automatic-external-display
これは外部ビューワーで自動的に表示されるタイプのリストです。

@item mm-keep-viewer-alive-types
@vindex mm-keep-viewer-alive-types
これは、別の記事を選択しても、外部ビューワーが kill されないメディアタイ
プのリストです。

@quotation
訳注: postscript や dvi など (変数のディフォルト値を参照のこと) のように、
読むのに時間がかかるかもしれないパートのタイプを含むリストです。一方、こ
れに含まれない単純な画像のパートなどは、それが含まれていた記事の表示をや
めたときに、自動的に外部ビューワーが kill されます。
@end quotation

@item mm-attachment-override-types
@vindex mm-attachment-override-types
いくつかの @acronym{MIME} エージェントは、配置指
定 (content-disposition) として @samp{添付} (@samp{attachment}) ファイル
であることを設定したパートを生成します。この変数はそんな配置指定を上書き
して、そのパートをインライン表示することを許します。(そのパートのインラ
イン表示することが可能で、私たちがそうすることを望む場合だけ、配置指定が
上書きされることに注意して下さい。)

@item mm-discouraged-alternatives
@vindex mm-discouraged-alternatives
@samp{multipart/alternative} を表示することが嫌われる @acronym{MIME} タ
イプのリストです。それが最も興味深いものであると想定しているために、表示
エージェントはメッセージの後半にある可視なパートを表示することになってい
ます。しかし、ユーザーは代わりに他のタイプを好むかもしれません。このリス
トは、何のタイプが最も望まれないかを示します。例えばもし、
@samp{text/html} パートは非常に望まず、かつ @samp{text/richtext} パート
をやや望まないということであれば、以下のように宣言することができます:

@lisp
(setq mm-discouraged-alternatives
      '("text/html" "text/richtext")
      mm-automatic-display
      (remove "text/html" mm-automatic-display))
@end lisp

@item mm-inline-large-images
@vindex mm-inline-large-images
ウィンドウより大きなインライン画像を表示すると、Emacs はスクロールするこ
とができない、つまり画像の全体を見ることができません。これを避けるため、
ライブラリーはそれをインライン表示する前に画像のサイズを計って、それが
ウィンドウに合わない場合は、ライブラリーはそれを外部で (例え
ば @samp{ImageMagick} や @samp{xv} で) 表示します。この変数
を @code{t} に設定するとこの検査をさせなくして、ライブラリーにすべてのイ
ンライン画像をサイズに関わりなくインラインで表示させます。

@item mm-inline-override-types
@vindex mm-inline-override-types
@code{mm-inlined-types} は、例えばすべての @samp{text/.*} パートをインラ
インで表示することを指示するような、正規表現を含むことができます。一方、
インライン表示が可能だけれども添付ファイルとして扱いたいタイプがあるなら
ば、そのタイプに合致する正規表現のリストを、この変数に設定することによっ
て成し遂げることができます。例え
ば @code{mm-inlined-types} が @samp{text/.*} を含んでいるものとすると、
この変数に @samp{text/html} を含ませることによって、@samp{text/html} パー
トは添付ファイルとして扱われるようになります。

@item mm-text-html-renderer
@vindex mm-text-html-renderer
@acronym{HTML} を描画するために使う関数を選択します。すでに用意してある
描画プログラムは、@code{w3}, @code{w3m}@footnote{emacs-w3m についての詳
細は @uref{http://emacs-w3m.namazu.org/} を見て下さい。}, @code{links},
@code{lynx}, @code{w3m-standalone} または @code{html2text} のシンボル群
のうちの一つを指定することによって選択します。もし @code{nil} だったら、
外部ビューワーを使います。さらに関数 (引数として @acronym{MIME} ハンドル
が与えられて呼ばれる) を設定することもできます。

@item mm-inline-text-html-with-images
@vindex mm-inline-text-html-with-images
@acronym{HTML} メールには @samp{<img>} タグを使った spammers (spam をば
らまくやから) の卑劣な悪巧みが含まれているかもしれません。最もありそうな
のは、あなたがそのメールを読んだことを確認するための意図があることです。
このオプションを @code{nil} に設定する (それがディフォルトです) ことによっ
て、あなたの個人情報が流出するのを防ぐことができます。現在 Emacs/w3 は、
これを無視します。Emacs-w3m では、これが @code{nil} であっても、画像を表
示するために、それが埋め込まれた場所で @kbd{t} コマンドを使うことができ
ます。@footnote{@kbd{T} コマンドはすべての画像を取り込みます。
@code{w3m-key-binding} オプションを @code{info} に設定したならば、代わり
に @kbd{i} か @kbd{I} を使って下さい。}

@item mm-w3m-safe-url-regexp
@vindex mm-w3m-safe-url-regexp
安全な URL 名、すなわち @acronym{HTML} メールを描画するときに個人情報が
流出しそうもない URL に合致する正規表現です (ディフォルト値
は @samp{\\`cid:} です)。@code{nil} であると、すべての URL が安全だと判
断します。

@item mm-inline-text-html-with-w3m-keymap
@vindex mm-inline-text-html-with-w3m-keymap
このオプションを非-@code{nil} に設定することによって、インライン表示され
た text/html パートで emacs-w3m のコマンドキーを使うことができます。ディ
フォルト値は @code{t} です。

@item mm-external-terminal-program
@vindex mm-external-terminal-program
外部の端末を起動するために使われるプログラムです。

@item mm-enable-external
@vindex mm-enable-external
外部の @acronym{MIME} ハンドラーを使うべきかどうかを指定します。

@code{t} であると、定義されたすべての外部の @acronym{MIME} ハンドラーが
使われます。@code{nil} だったら、ファイルはディスクに保存されま
す (@code{mailcap-save-binary-file})。これが @code{ask} というシンボルで
あったならば、外部の @acronym{MIME} ハンドラーが起動される前に尋ねられる
でしょう。

Mailcap (@pxref{mailcap}) を介して添付ファイルの表示を始めると、最も安全
なオプションで安全なビューワーを使うことを試みます (添付ファイルをディス
クに保存して、異なる手段 (コマンドラインかダブルクリック) でその表示を始
める場合とは違います)。とにかく、どんな外部プログラムも使いたくないので
あれば、この変数を @code{nil} か @code{ask} に設定して下さい。
@end table

@node Files and Directories
@section ファイルとディレクトリー

@table @code
@item mm-default-directory
@vindex mm-default-directory
添付ファイルを保存するディフォルトのディレクトリーです。@code{nil} だっ
たら @code{default-directory} を使います。

@item mm-tmp-directory
@vindex mm-tmp-directory
一時ファイルを格納するディレクトリーです。

@item mm-file-name-rewrite-functions
@vindex mm-file-name-rewrite-functions
@acronym{MIME} パートのファイル名を書き換えるために使われる関数のリスト
です。それぞれの関数はファイル名を受け取って、ファイル名を返します。出来
合いの関数は以下の通りです。

@table @code
@item mm-file-name-delete-control
@findex mm-file-name-delete-control
すべての制御文字を消去します。

@item mm-file-name-delete-gotchas
@findex mm-file-name-delete-gotchas
弱みがあるシェルスクリプトで使われると意図しない結果を生じる文字、すなわ
ち @samp{|}, @samp{>} および @samp{<}、加えて最初の文字として使われ
る @samp{-} と @samp{.} を消去します。

@item mm-file-name-delete-whitespace
@findex mm-file-name-delete-whitespace
すべての空白文字を取り除きます。

@item mm-file-name-trim-whitespace
@findex mm-file-name-trim-whitespace
先頭と末尾の空白文字を取り除きます。

@item mm-file-name-collapse-whitespace
@findex mm-file-name-collapse-whitespace
複数の連続した空白文字を単一のスペース文字で置き換えます。

@item mm-file-name-replace-whitespace
@findex mm-file-name-replace-whitespace
@vindex mm-file-name-replace-whitespace
空白文字を下線 (underscore) で置き換えます。下線がお好みでなければ、他の
文字を @code{mm-file-name-replace-whitespace} 変数に設定して下さい。
@end table

Emacs 標準の関数である @code{capitalize}, @code{downcase},
@code{upcase} および @code{upcase-initials} も、役立つことは明らかです。

@item mm-path-name-rewrite-functions
@vindex mm-path-name-rewrite-functions
@acronym{MIME} パートのフル・ファイル名を書き換えるために使われる関数の
リストです。これはパートを外部に表示するとき (すなわち、融通の効かないプ
ログラムが、ファイルが保存された場所を見つけることができるように、絶対パ
ス名を変換するため) に使われます。
@end table

@node New Viewers
@section 新しいビューワー

これは @code{text/enriched} パートをインライン表示するビューワーの例です:

@lisp
(defun mm-display-enriched-inline (handle)
  (let (text)
    (with-temp-buffer
      (mm-insert-part handle)
      (save-window-excursion
        (enriched-decode (point-min) (point-max))
        (setq text (buffer-string))))
    (mm-insert-inline handle text)))
@end lisp

この関数がパラメータとして @acronym{MIME} ハンドルを受け取ることがわかり
ますね。それは一時バッファに作業場所を移し、パートのテキストを挿入し、そ
のテキストにある処理を施し、結果を覚えておいて、関数が呼ばれたときのバッ
ファに戻ってその結果を挿入します。

ここにある二つの重要なお助け関数
は @code{mm-insert-part} と @code{mm-insert-inline} です。最初の関数は、
ハンドルのテキストを現在のバッファに挿入します。これは文字セットおよびエ
ンコーディグ (content transfer decoding) を取り扱います。二番目の関数は、
挿入しろと言ったどんなテキストでも単に挿入しますが、テキストを手軽な方法
で「表示されなくする (undisplayed)」ことができるような諸設定をも行ないま
す。

@node Composing
@chapter MIME メッセージの作成
@cindex Composing
@cindex MIME Composing
@cindex MML
@cindex MIME Meta Language

@acronym{MIME} メッセージの作成はうんざりする仕事だし簡単でもありません。
そこで、@acronym{MML} (@acronym{MIME} Meta Language) という、言語を解析
して @acronym{MIME} メッセージを生成するための、@code{mml} というライブ
ラリーが作られました。

@findex mml-generate-mime
主要なインターフェース関数は @code{mml-generate-mime} です。これは現在
の (狭められた) バッファの内容物を調べて、@acronym{MIME} メッセージを含
む文字列を返します。

@menu
* Simple MML Example::             @acronym{MML} 文書の例
* MML Definition::                 すべての有効な @acronym{MML} 要素
* Advanced MML Example::           もう一つの @acronym{MML} 文書の例
* Encoding Customization::         エンコーディングに作用する変数
* Charset Translation::            @sc{mule} 文字セットから @acronym{MIME} 文字セットへの割り当て
* Conversion::                     @acronym{MIME} から @acronym{MML} へ、およびその逆
* Flowed text::                    ソフトおよびハード改行
@end menu

@node Simple MML Example
@section 単純な MML の例

@samp{multipart/alternative} の単純な例です:

@example
<#multipart type=alternative>
This is a plain text part.
これはプレーンテキストのパートです。
<#part type=text/enriched>
<center>This is a centered enriched part</center>
<center>これは中心に置かれる enriched パートです</center>
<#/multipart>
@end example

これを @code{mml-generate-mime} に通すと、次のものが得られます:

@example
Content-Type: multipart/alternative; boundary="=-=-="

--=-=-=
Content-Type: text/plain; charset=iso-2022-jp

This is a plain text part.
^[$B$3$l$O%W%l!<%s%F%-%9%H$N%Q!<%H$G$9!#^[(B

--=-=-=
Content-Type: text/enriched; charset=iso-2022-jp

<center>This is a centered enriched part</center>
<center>^[$B$3$l$OCf?4$KCV$+$l$k^[(B enriched ^[$B%Q!<%H$G$9^[(B</center>

--=-=-=--
@end example

わっ、文字化けだ!?  いいえ、もとの文が @samp{charset=iso-2022-jp} でエン
コードされたものです。受信者が見るときに、適切にデコードされるでしょう。

@node MML Definition
@section MML の定義

@acronym{MML} 言語はとても単純です。SGML アプリケーションに少し似ていま
すが、異なるものです。

@acronym{MML} の主要な概念は @dfn{パート} です。それぞれのパートは異なる
タイプか異なる文字セットのものであり得ます。パート
は @samp{<#part ...>} タグで記述されます。マルチパート型のパートで
は @samp{<#multipart ...>} タグが用いられます。それぞれのパート
は @samp{<#/part>} タグか @samp{<#/multipart>} タグで終端されますが、さ
らに、@samp{<#part ...>} で始まったタグは次のパートの始まりによっても閉
じられます。

@samp{<#external ...>} タグというものもあります。これ
は @samp{external/message-body} 型のパートを記述するために使われます。

それぞれのタグは @samp{parameter=値} の形式でパラメータを含むことができ
ます。値をクォーテーションマーク ("...") で囲むことができますが、値が空
白文字を含む場合以外は囲む必要がありません。したがって、
@samp{filename=/home/user/#hello$^yes} は完全に有効です。

以下のパラメータは @acronym{MML} で使われます。意味を持たないパラメータ
は無視されます。@acronym{MML} パラメータの名前は @acronym{MIME} パラメー
タの名前と同じで、括弧の中にあるものは、それがどのヘッダーの中で使われる
かを宣言します。

@table @samp
@item type
パートの @acronym{MIME} タイプです (@code{Content-Type})。

@item filename
パートに含ませるファイルの名前です (@code{Content-Disposition})。

@item charset
パートの内容物をエンコードするときに使われる文字セットで
す (@code{Content-Type})。@xref{Charset Translation}.

@item name
パートをファイルに保存するときのファイル名を示唆するために使われるかもし
れません (@code{Content-Type})。

@item disposition
配置指定に使います。有効な値は @samp{inline} と @samp{attachment} で
す (@code{Content-Disposition})。

@item encoding
有効な値は @samp{7bit}, @samp{8bit}, @samp{quoted-printable} およ
び @samp{base64} です (@code{Content-Transfer-Encoding})。@xref{Charset
Translation}.

@item description
パートの説明書きです (@code{Content-Description})。

@item creation-date
パートが作成された時刻 (RFC822 形式) です (@code{Content-Disposition})。

@item modification-date
パートが変更された時刻 (RFC822 形式) です (@code{Content-Disposition})。

@item read-date
パートが読まれた時刻 (RFC822 形式) です (@code{Content-Disposition})。

@item recipients
パートを誰宛てに暗号化/署名するかを指定します。これは To/CC を基にした自
動検出よりも優先されます。

@item sender
パートに署名するときの名義です。このフィールドはディフォルトの鍵が使われ
ないようにするために使われます。

@item size
パートのサイズを octet (8-bit) の単位で表しま
す (@code{Content-Disposition})。

@item sign
この @acronym{MML} のパートに、何の技術手段 (@code{smime}, @code{pgp} ま
たは @code{pgpmime}) で署名するかを指定します。

@item encrypt
この @acronym{MML} のパートを、何の技術手段 (@code{smime}, @code{pgp} ま
たは @code{pgpmime}) で暗号化するかを指定します。
@end table

以下は @samp{text/plain} のためのパラメータです:

@table @samp
@item format
テキストをフォーマットするパラメータで、有効な値は @samp{fixed} (ディフォ
ルト) と @samp{flowed} です。普通はこれを手で設定する必要はありません。
それは、テキストの本文が、RFC 2646 で定められた特別な方法でフォーマット
されることを必要とするからです。@xref{Flowed text}.
@end table

以下は @samp{application/octet-stream} のためのパラメータです:

@table @samp
@item type
パートのタイプ (人間が読むことを想定した、非公式な) で
す (@code{Content-Type})。
@end table

以下は @samp{message/external-body} のためのパラメータです:

@table @samp
@item access-type
ファイルを取得するための、サポートされているアクセス手段を示す語です。値
は @samp{ftp}, @samp{anon-ftp}, @samp{tftp}, @samp{localfile} およ
び @samp{mailserver} のどれかです。(@code{Content-Type}.)

@item expiration
ファイルが取得できなくなるかもしれない日時 (RFC822 形式) です。
(@code{Content-Type}.)

@item size
Octet (8-bit) の単位で表したファイルのサイズです。(@code{Content-Type}.)

@item permission
有効な値は @samp{read} と @samp{read-write} です (@code{Content-Type})。
@end table

以下は @samp{sign=smime} のためのパラメータです:

@table @samp

@item keyfile
署名する人の証明書を含んでいるファイルです。
@end table

以下は @samp{encrypt=smime} のためのパラメータです:

@table @samp
@item certfile
受取人の証明書を含んでいるファイルです。
@end table

@node Advanced MML Example
@section 高度な MML の例

複雑なマルチパート・メッセージの例です。これは @samp{multipart/mixed} で
す。多数のパートを含んでいて、その一つは @samp{multipart/alternative} で
す。

@example
<#multipart type=mixed>
<#part type=image/jpeg filename=~/rms.jpg disposition=inline>
<#multipart type=alternative>
This is a plain text part.
これはプレーンテキストのパートです。
<#part type=text/enriched name=enriched.txt>
<center>This is a centered enriched part</center>
<center>これは中心に置かれる enriched パートです</center>
<#/multipart>
This is a new plain text part.
これは新しいプレーンテキストのパートです。
<#part disposition=attachment>
This plain text part is an attachment.
このプレーンテキストのパートは添付ファイルです。
<#/multipart>
@end example

And this is the resulting @acronym{MIME} message:

@example
Content-Type: multipart/mixed; boundary="=-=-="

--=-=-=
Content-Type: image/jpeg
Content-Disposition: inline; filename=rms.jpg
Content-Transfer-Encoding: base64

/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRof
Hh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/wAALCAAwADABAREA/8QAHwAA
AQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQR
BRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RF
RkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ip
qrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/9oACAEB
AAA/AO/rifFHjldNuGsrDa0qcSSHkA+gHrXKw+LtWLrMb+RgTyhbr+HSug07xNqV9fQtZrNI
AyiaE/NuBPOOOP0rvRNE880KOC8TbXXGCv1FPqjrF4LDR7u5L7SkTFT/ALWOP1xXgTuXfc7E
sx6nua6rwp4IvvEM8chCxWxOdzn7wz6V9AaB4S07w9p5itow0rDLSY5Pt9K43xO66P4xs71m
2QXiGCbA4yOVJ9+1aYORkdK434lyNH4ahCnG66VT9Nj15JFbPdX0MS43M4VQf5/yr2vSpLnw
5ZW8dlCZ8KFXjOPX0/mK6rSPEGt3Angu44fNEReHYNvIH3TzXDeKNO8RX+kSX2ouZkicTIOc
L+g7E810ulFjpVtv3bwgB3HJyK5L4quY/C9sVxk3ij/xx6850u7t1mtp/wDlpEw3An3Jr3Dw
34gsbWza4nBlhC5LDsaW6+IFgupQyCF3iHH7gA7c9R9ay7zx6t7aX9jHC4smhfBkGCvHGfrm
tLQ7hbnRrV1GPkAP1x1/Hr+Ncr8Vzjwrbf8AX6v/AKA9eQRyYlQk8Yx9K6XTNbkgia2ciSIn
7p5Ga9Atte0LTLKO6it4i7dVRFJDcZ4PvXN+JvEMF9bILVGXJLSZ4zkjivRPDaeX4b08HOTC
pOffmua+KkbS+GLVUGT9tT/0B68eeIpIFYjB70+OOVXyoOM9+M1eaWeCLzHPyHGO/NVWvJJm
jQ8KGH1NfQWhXSXmh2c8eArRLwO3HSv/2Q==
--=-=-=
Content-Type: multipart/alternative; boundary="==-=-="

--==-=-=
Content-Type: text/plain; charset=iso-2022-jp

This is a plain text part.
^[$B$3$l$O%W%l!<%s%F%-%9%H$N%Q!<%H$G$9!#^[(B

--==-=-=
Content-Type: text/enriched; charset=iso-2022-jp; name=enriched.txt

<center>This is a centered enriched part</center>
<center>^[$B$3$l$OCf?4$KCV$+$l$k^[(B enriched ^[$B%Q!<%H$G$9^[(B</center>

--==-=-=--

--=-=-=
Content-Type: text/plain; charset=iso-2022-jp

This is a new plain text part.
^[$B$3$l$O?7$7$$%W%l!<%s%F%-%9%H$N%Q!<%H$G$9!#^[(B

--=-=-=
Content-Type: text/plain; charset=iso-2022-jp
Content-Disposition: attachment

This plain text part is an attachment.
^[$B$3$N%W%l!<%s%F%-%9%H$N%Q!<%H$OE:IU%U%!%$%k$G$9!#^[(B

--=-=-=--
@end example

ややっ、文字化けしてる!?  いや、もとの文が @samp{charset=iso-2022-jp} で
エンコードされただけのことです。受信者が見るときに、適切にデコードされる
でしょう。

@node Encoding Customization
@section エンコーディングのカスタマイズ

@table @code
@item mm-body-charset-encoding-alist
@vindex mm-body-charset-encoding-alist
@acronym{MIME} 文字セットに割り当てるエンコーディングです。この変数は、
例えば他の要件によって特定のエンコーディングが強制されないときに、通常使
われます (電子署名されたメッセージは 7bit エンコーディングを必要とします)。
ディフォルト値は次の通りです。

@lisp
((iso-2022-jp . 7bit)
 (iso-2022-jp-2 . 7bit)
 (utf-16 . base64)
 (utf-16be . base64)
 (utf-16le . base64))
@end lisp

例えば ISO-8859-1 文字セットが quoted-printable でエンコードされないよう
にしたい場合は、この変数に @code{(iso-8859-1 . 8bit)} を追加すれば良いで
しょう。@acronym{MML} の @code{encoding} タグを使って、メッセージ毎にそ
れをこの変数より優先させることもできます (@pxref{MML Definition})。

@item mm-coding-system-priorities
@vindex mm-coding-system-priorities
送出するメッセージで使う coding system の優先度を指定します。ディフォル
ト値は @code{nil} で、その場合は Emacs におけるディフォルトの優先順位が
適用されます。値は coding system のシンボルのリストで
す (coding system の別名を使っても構いません。設定するとき
は @kbd{M-x describe-coding-system} を使って、coding system の名前が正確
であることを確かめて下さい)。例えば、UTF-8 を最優先とするように Emacs を
設定したものの、可能な場合は ISO-8859-1 でメッセージを送信するようにした
いという場合だったら、この変数を @code{(iso-8859-1)} にすれば良いでしょ
う。@acronym{MML} の @code{charset} タグを使って、メッセージ毎にそれをこ
の変数より優先させることもできます (@pxref{MML Definition})。

@quotation
訳注: 日本語環境 (@code{current-language-environment} 変数の値
が @samp{Japanese} になっている環境) では、ディフォルト値が
@code{(iso-8859-1 iso-2022-jp iso-2022-jp-2 shift_jis utf-8)} になります。
日本語のメッセージのエンコードには伝統的に @code{iso-2022-jp} が使われて
いるのに対し、Emacs で定められた優先順位に基づく
と @code{euc-jp} や @code{shift_jis} などが第一候補になってしまうので、
このような設定が必要なのです。

なお、ラテン語圏の人たちに宛ててに送るメッセージが、彼らがデコードできな
いかもしれない @code{iso-2022-jp-2} などでエンコードされてしまうのを防ぐ
ために、ディフォルト値の先頭に @code{iso-8859-1} が置かれています。
@end quotation

@item mm-content-transfer-encoding-defaults
@vindex mm-content-transfer-encoding-defaults
@acronym{MIME} のタイプに割り当てるエンコーディングです。この変数は、例
えば他の要件によってより安全なエンコーディングが強制されないときに、通常
使われます (電子署名されたメッセージは 7bit エンコーディングを必要としま
す)。通常の @acronym{MIME} エンコーディングの他に、
quoted-printable と base64 のうちで最も効率的な方を、個々の場合に使うべ
きであることを示す @code{qp-or-base64} を使うこともできます (訳
注: @code{qp-or-base64} の実際の動作は、quoted-printable と base64 の両
方でエンコードしてみて、サイズが小さくなる方を採用することです)。

@code{qp-or-base64} にはもう一つの効果があります。それ
は @acronym{MIME} のパートが MTA によって壊されないようにするために、長
い行を折り畳みます。@code{quoted-printable} と @code{base64} もそうです。

パートが受信したときのままの生の転送されたメッセージ (例えば、引数
に 2 を与えた @code{gnus-summary-mail-forward} によって作られるもの) で
あるか、@samp{text/*} タイプや @samp{message/*} ではない場合に、これが本
文のエンコーディグに影響を与えることに注意して下さい。それらの場合でさえ、
@acronym{MML} の @code{encoding} タグを使って、メッセージ毎にそ
れをこの変数より優先させることもできます (@pxref{MML Definition})。

@item mm-use-ultra-safe-encoding
@vindex mm-use-ultra-safe-encoding
これが非-@code{nil} である場合、本文に 76 文字よりも長い行や "From " で
始まる行があったら、それらのテキストのパートは quoted-printable でエンコー
ドされます。非-7bit エンコーディング (8bit, バイナリー) は一般に認められ
ていません。これは 8bit を通さない MTA か MDA がメッセージを改変してしま
う確率を下げます。これは直接に設定されるのではなく、他の関数によって (例
えば、電子署名されるメッセージをエンコードするときに) 必要に応じて束縛さ
れるべきです。
@end table

@node Charset Translation
@section 文字セットの変換
@cindex charsets

@acronym{MML} を @acronym{MIME} に変換するときに、Emacs の内部で作られ
る @acronym{MIME} パートのそれぞれについて、適切な文字セットを選ばなけれ
ばなりません。

@vindex mail-parse-charset
もし非-@sc{mule} の Emacs を走らせているのであれば、この処理は単純です。
パートがどんな非-@acronym{ASCII} (8-bit) 文字を含んでいても、
@code{mail-parse-charset} (シンボル) で与えられる @acronym{MIME} 文字セッ
トを使えば良いのです。(もっとも、この変数を直接に設定しないで下さい。ディ
フォルトの文字セットを変更したい場合は、@acronym{MIME} メッセージを処理
するために使うパッケージの説明書を調べてください。例えば: @pxref{Various
Message Variables, , Various Message Variables, message-ja, Message
Manual})。@acronym{ASCII} 文字セットしか無ければ、@acronym{MIME} 文字セッ
ト US-ASCII が使われるのはもちろんです。

@cindex MULE
@cindex UTF-8
@cindex Unicode
@vindex mm-mime-mule-charset-alist
@sc{mule} 機能を備えた Emacs を走らせている場合は、ものごとは多少複雑に
なります。この場合は、パートで使われている @sc{mule} 文字セットのリスト
を取得し、@code{mm-mime-mule-charset-alist} 変数の値に基づいて、それら
の @sc{mule} 文字セットを @acronym{MIME} 文字セットに変換します。結果が
単一の @acronym{MIME} 文字セットだったら、それを使ってパートをエンコード
します。しかし、結果の @acronym{MIME} 文字セットのリストが二つ以上の要素
を含んでいる場合には、二つのことが起こり得ます。もしパートを UTF-8 でエ
ンコードすることが可能だったら、その文字セットを使います。(このため
に Emacs は @code{utf-8} coding system をサポートしなければならないし、
そのパートは Unicode で定義された、それらに対応する文字だけから成ってい
なければなりません。)  何らかの理由によって UTF-8 を利用できない場合、そ
のパートは、それぞれが単一の @acronym{MIME} 文字セットでエンコードするこ
とができるように、いくつかに分割されます。もっとも、パートは行の境界でし
か分割することができないので、単一の行をエンコードするのに複数
の @acronym{MIME} 文字セットが必要だとすると、そのパートをエンコードする
ことは不可能です。

@quotation
訳注: @code{mm-mime-mule-charset-alist} 変数を使うのは実際には XEmacs だ
けです。Emacs には自身で定義している coding system と @acronym{MIME} 文
字セットの対応表があり、上記の処理ではそれが使われます。
@end quotation

@sc{mule} 機能を備えた Emacs を走らせている場合、どの coding system を使
うかの優先順位は Emacs 自身から継承されます。これは、も
し Emacs が UTF-8 を優先するように設定されていると、それがメッセージのエ
ンコードに使われることを意味します。ただ
し @code{mm-coding-system-priorities} 変数の値を変えることによって、これ
を変更することはできます (@pxref{Encoding Customization})。

メッセージを作成するときに @acronym{MML} の @code{charset} タグを設定す
ることによって、使われる文字セットを上書きすることができます。

文字セットのエンコーディング (quoted-printable, 8bit など) はここでの議
論に直交する概念です。それは @code{mm-body-charset-encoding-alist} 変数
と @code{mm-content-transfer-encoding-defaults} 変数によって制御されま
す (@pxref{Encoding Customization})。

@node Conversion
@section 変換

@findex mime-to-mml
@code{mime-to-mml} 関数を使って @acronym{MIME} メッセージ (マルチパート
でも可) を @acronym{MML} に変換することができます。これは現在のバッファ
にある @acronym{MIME} メッセージに作用して、@acronym{MIME} の境界
を @acronym{MML} の印付け (markup) で置き換えます。テキストではないパー
トの内容物は、そのバッファに置く代わりに @acronym{MML} タグを介して参照
される別のバッファに置かれます。

@findex mml-to-mime
@code{mml-to-mime} 関数を使って @acronym{MML} メッセージ
を @acronym{MIME} に変換することができます。

これらの関数が行なうことはある意味で「不可逆 (lossy)」です。
@code{mime-to-mml} を実行し、次に @code{mml-to-mime} を実行すると、元と
まったく同じメッセージは戻って来ないでしょう。ヘッダーの順序のようなどう
でも良いことが違ってしまうだけでなく、ヘッダーの内容も変化してしまうかも
しれません。例えば、元のメッセージが base64 でテキストをエンコードしてあっ
ても、@code{mml-to-mime} は quoted-printable を使うかもしれない、という
ようなことです。

しかし本質的には、これら二つは互いに逆関数であるべきです。結果として生成
されるメッセージの内容物が、同一でないにしても等価なままであるような。

@node Flowed text
@section 流動テキスト
@cindex format=flowed

Emacs @acronym{MIME} ライブラリーは、メッセージをエンコードするとき
は @code{use-hard-newlines} 変数 (@pxref{Hard and Soft Newlines, ,Hard
and Soft Newlines, emacs, Emacs Manual}) に従い、メッセージをデコードす
るときは ``format=flowed'' Content-Type パラメータを尊重します。

テキストをエンコードするとき、ソフト改行文字で終端されている各行は
@code{use-hard-newlines} に関わらずに詰め込まれ (filled)、そし
て @code{fill-flowed-encode-column} で決定される桁の後ろで折り畳まれます。
引用印 (@samp{^>* ?} に合致するテキスト) は尊重されます。その変数は、流
動テキストをサポートしないクライアントにおいてテキストがどう見えるかを制
御し、ディフォルトでは 66文字の後ろで折り畳みます。バッファにハード改行
文字が無ければ、流動 (flowed) テキストのためのエンコードは行ないません。

流動 (flowed) テキストをデコードするとき、ソフト改行文字を持つ各行は詰め
込まれ (filled)、そして @code{fill-flowed-display-column} で決定される桁
の後ろで折り畳まれます。ディフォルトでは @code{fill-column} の後ろで折り
畳みます。

@table @code
@item mm-fill-flowed
@vindex mm-fill-flowed
非-@code{nil} だったら、format=flowed の記事は流動的に表示されます。
@end table

@node Interface Functions
@chapter インターフェース関数
@cindex interface functions
@cindex mail-parse

@code{mail-parse} ライブラリーは、次以降の章で述べる実際の低レベルなライ
ブラリーを抽象化したものです。

標準は変わります。したがって、プログラムも新しい鋳型に適合するために変化
しなければなりません。例えば、RFC2045 はパラメータのリストにあ
る @acronym{ASCII} 文字だけを許容する @code{Content-Type} ヘッダーのため
のシンタックスについて述べています。RFC2231 は、複数行に渡って継続する単
一のヘッダーと非-@acronym{ASCII} 文字の構成を規定するための RFC2045 のシ
ンタックスについて詳述しています。

これに対処する従来の方法は、単に新しいシンタックスを解析するためにライブ
ラリーの機能を更新することでした。しかしながら、これは時には誤った行為で
す。場合によっては、新しいシンタックスと古いシンタックスの両方を理解でき
るようにすることが重要かもしれませんし、ライブラリーが一つだけある場合に
は、ライブラリーの古いバージョンと新しいバージョンのどちらかを選ばなけれ
ばなりません。

Emacs @acronym{MIME} ライブラリーは異なる方針で行くことにしました。これ
は、対応する標準に従って厳密に解析する、一連の低レベルのライブラ
リー (@file{rfc2047.el}, @file{rfc2231.el} など) を定義します。とは言え、
正規のプログラムは、これらのライブラリーが直接に提供する関数ではなく、代
わりに @code{mail-parse} ライブラリーが提供する関数を使うべきです。この
ライブラリーの関数は、最新の低レベルのライブラリーの対応する関数への単な
る別名です。この構成を使うことによって、プログラムはそれらが使うことがで
きる首尾一貫したインターフェースを入手し、また、ライブラリーの開発者は、
新しい標準を扱うコードを自由に作成することができます。

以下の関数が、このライブラリーで定義されています:

@table @code
@item mail-header-parse-content-type
@findex mail-header-parse-content-type
@code{Content-Type} ヘッダーを解析して、以下の形式でリストを返します:

@lisp
("type/subtype"
 (attribute1 . value1)
 (attribute2 . value2)
 ...)
@end lisp

例です:

@example
(mail-header-parse-content-type
 "image/gif; name=\"b980912.gif\"")
@result{} ("image/gif" (name . "b980912.gif"))
@end example

@item mail-header-parse-content-disposition
@findex mail-header-parse-content-disposition
@code{Content-Disposition} ヘッダーを解析して、上記の関数と同じ形式のリ
ストを返します。

@item mail-content-type-get
@findex mail-content-type-get
二つのパラメータ、上記の形式のリストと属性、を受け取り、その属性の値を返
します。

@example
(mail-content-type-get
 '("image/gif" (name . "b980912.gif")) 'name)
@result{} "b980912.gif"
@end example

@item mail-header-encode-parameter
@findex mail-header-encode-parameter
パラメータに使う文字列を受け取り、それをエンコードしたものを返します。こ
れは @code{Content-Type} と @code{Content-Disposition} のようなヘッダー
に入れるパラメータのために使われます。

@item mail-header-remove-comments
@findex mail-header-remove-comments
ヘッダーからコメントを取り除いたものを返します。

@example
(mail-header-remove-comments
 "Gnus/5.070027 (Pterodactyl Gnus v0.27) (Finnish Landrace)")
@result{} "Gnus/5.070027  "
@end example

@item mail-header-remove-whitespace
@findex mail-header-remove-whitespace
ヘッダーから ``linear white space'' (訳注: 単一の長いヘッダーを折り畳ん
で複数行にするときに使う連結子; 改行文字+空白文字) を取り除きます。クォー
トされた ("..." で囲まれた) 文字列の中にある空白文字とコメントは保存され
ます。

@example
(mail-header-remove-whitespace
 "image/gif; name=\"Name with spaces\"")
@result{} "image/gif;name=\"Name with spaces\""
@end example

@item mail-header-get-comment
@findex mail-header-get-comment
ヘッダーの最後のコメントを返します。

@example
(mail-header-get-comment
 "Gnus/5.070027 (Pterodactyl Gnus v0.27) (Finnish Landrace)")
@result{} "Finnish Landrace"
@end example

@item mail-header-parse-address
@findex mail-header-parse-address
アドレスを解析して、メールボックスとプレーンテキストの名前を含むリストを
返します。

@example
(mail-header-parse-address
 "Hrvoje Niksic <hniksic@@srce.hr>")
@result{} ("hniksic@@srce.hr" . "Hrvoje Niksic")
@end example

@item mail-header-parse-addresses
@findex mail-header-parse-addresses
アドレスのリストを含んでいる文字列を解析して、上で述べたような要素のリス
トを返します。

@example
(mail-header-parse-addresses
 "Hrvoje Niksic <hniksic@@srce.hr>, Steinar Bang <sb@@metis.no>")
@result{} (("hniksic@@srce.hr" . "Hrvoje Niksic")
     ("sb@@metis.no" . "Steinar Bang"))
@end example

@item mail-header-parse-date
@findex mail-header-parse-date
日付の文字列を解析して、Emacs 形式の時刻を返します。

@item mail-narrow-to-head
@findex mail-narrow-to-head
バッファをヘッダーの区域に狭めます。ポイントは狭められたバッファの先頭に
置かれます。

@item mail-header-narrow-to-field
@findex mail-header-narrow-to-field
バッファを現在位置のヘッダーに狭めます。複数行に渡って継続する単一のヘッ
ダーを理解します。

@item mail-header-fold-field
@findex mail-header-fold-field
現在位置のヘッダーを折り畳みます。

@item mail-header-unfold-field
@findex mail-header-unfold-field
現在位置のヘッダーの折り畳みを解除します。

@item mail-header-field-value
@findex mail-header-field-value
現在位置のフィールドの値を返します。

@item mail-encode-encoded-word-region
@findex mail-encode-encoded-word-region
領域にある @acronym{ASCII} 以外の語をエンコードします。例え
ば @samp{Na@"{@dotless{i}}ve} は @samp{=?iso-8859-1?q?Na=EFve?=} として
エンコードされます。

@item mail-encode-encoded-word-buffer
@findex mail-encode-encoded-word-buffer
現在のバッファにある @acronym{ASCII} 以外の語をエンコードします。この関
数は、ヘッダーの区画に狭められたメッセージで呼ばれることを意図しています。

@item mail-encode-encoded-word-string
@findex mail-encode-encoded-word-string
文字列に含まれているエンコードする必要がある語をエンコードして、結果を返
します。

@example
(mail-encode-encoded-word-string
 "This is na@"{@dotless{i}}ve, baby")
@result{} "This is =?iso-8859-1?q?na=EFve,?= baby"
@end example

@item mail-decode-encoded-word-region
@findex mail-decode-encoded-word-region
領域にあるエンコードされた語をデコードします。

@item mail-decode-encoded-word-string
@findex mail-decode-encoded-word-string
文字列に含まれているエンコードされた語をデコードして、結果を返します。

@example
(mail-decode-encoded-word-string
 "This is =?iso-8859-1?q?na=EFve,?= baby")
@result{} "This is na@"{@dotless{i}}ve, baby"
@end example
@end table

現在 @code{mail-parse} は @code{ietf-drums}, @code{rfc2047},
@code{rfc2045} および @code{rfc2231} を網羅して抽象化します。これらにつ
いて、次以降の章で説明します。

@node Basic Functions
@chapter Basic Functions

This chapter describes the basic, ground-level functions for parsing and
handling.  Covered here is parsing @code{From} lines, removing comments
from header lines, decoding encoded words, parsing date headers and so
on.  High-level functionality is dealt with in the next chapter
(@pxref{Decoding and Viewing}).

@menu
* rfc2045::      Encoding @code{Content-Type} headers.
* rfc2231::      Parsing @code{Content-Type} headers.
* ietf-drums::   Handling mail headers defined by RFC822bis.
* rfc2047::      En/decoding encoded words in headers.
* time-date::    Functions for parsing dates and manipulating time.
* qp::           Quoted-Printable en/decoding.
* base64::       Base64 en/decoding.
* binhex::       Binhex decoding.
* uudecode::     Uuencode decoding.
* yenc::         Yenc decoding.
* rfc1843::      Decoding HZ-encoded text.
* mailcap::      How parts are displayed is specified by the @file{.mailcap} file
@end menu


@node rfc2045
@section rfc2045

RFC2045 is the ``main'' @acronym{MIME} document, and as such, one would
imagine that there would be a lot to implement.  But there isn't, since
most of the implementation details are delegated to the subsequent
RFCs.

So @file{rfc2045.el} has only a single function:

@table @code
@item rfc2045-encode-string
@findex rfc2045-encode-string
Takes a parameter and a value and returns a @samp{PARAM=VALUE} string.
@var{value} will be quoted if there are non-safe characters in it.
@end table


@node rfc2231
@section rfc2231

RFC2231 defines a syntax for the @code{Content-Type} and
@code{Content-Disposition} headers.  Its snappy name is @dfn{MIME
Parameter Value and Encoded Word Extensions: Character Sets, Languages,
and Continuations}.

In short, these headers look something like this:

@example
Content-Type: application/x-stuff;
 title*0*=us-ascii'en'This%20is%20even%20more%20;
 title*1*=%2A%2A%2Afun%2A%2A%2A%20;
 title*2="isn't it!"
@end example

They usually aren't this bad, though.

The following functions are defined by this library:

@table @code
@item rfc2231-parse-string
@findex rfc2231-parse-string
Parse a @code{Content-Type} header and return a list describing its
elements.

@example
(rfc2231-parse-string
 "application/x-stuff;
 title*0*=us-ascii'en'This%20is%20even%20more%20;
 title*1*=%2A%2A%2Afun%2A%2A%2A%20;
 title*2=\"isn't it!\"")
@result{} ("application/x-stuff"
    (title . "This is even more ***fun*** isn't it!"))
@end example

@item rfc2231-get-value
@findex rfc2231-get-value
Takes one of the lists on the format above and returns
the value of the specified attribute.

@item rfc2231-encode-string
@findex rfc2231-encode-string
Encode a parameter in headers likes @code{Content-Type} and
@code{Content-Disposition}.

@end table


@node ietf-drums
@section ietf-drums

@dfn{drums} is an IETF working group that is working on the replacement
for RFC822.

The functions provided by this library include:

@table @code
@item ietf-drums-remove-comments
@findex ietf-drums-remove-comments
Remove the comments from the argument and return the results.

@item ietf-drums-remove-whitespace
@findex ietf-drums-remove-whitespace
Remove linear white space from the string and return the results.
Spaces inside quoted strings and comments are left untouched.

@item ietf-drums-get-comment
@findex ietf-drums-get-comment
Return the last most comment from the string.

@item ietf-drums-parse-address
@findex ietf-drums-parse-address
Parse an address string and return a list that contains the mailbox and
the plain text name.

@item ietf-drums-parse-addresses
@findex ietf-drums-parse-addresses
Parse a string that contains any number of comma-separated addresses and
return a list that contains mailbox/plain text pairs.

@item ietf-drums-parse-date
@findex ietf-drums-parse-date
Parse a date string and return an Emacs time structure.

@item ietf-drums-narrow-to-header
@findex ietf-drums-narrow-to-header
Narrow the buffer to the header section of the current buffer.

@end table


@node rfc2047
@section rfc2047

RFC2047 (Message Header Extensions for Non-@acronym{ASCII} Text) specifies how
non-@acronym{ASCII} text in headers are to be encoded.  This is actually rather
complicated, so a number of variables are necessary to tweak what this
library does.

The following variables are tweakable:

@table @code
@item rfc2047-header-encoding-alist
@vindex rfc2047-header-encoding-alist
This is an alist of header / encoding-type pairs.  Its main purpose is
to prevent encoding of certain headers.

The keys can either be header regexps, or @code{t}.

The values can be @code{nil}, in which case the header(s) in question
won't be encoded, @code{mime}, which means that they will be encoded, or
@code{address-mime}, which means the header(s) will be encoded carefully
assuming they contain addresses.

@item rfc2047-charset-encoding-alist
@vindex rfc2047-charset-encoding-alist
RFC2047 specifies two forms of encoding---@code{Q} (a
Quoted-Printable-like encoding) and @code{B} (base64).  This alist
specifies which charset should use which encoding.

@item rfc2047-encode-function-alist
@vindex rfc2047-encode-function-alist
This is an alist of encoding / function pairs.  The encodings are
@code{Q}, @code{B} and @code{nil}.

@item rfc2047-encoded-word-regexp
@vindex rfc2047-encoded-word-regexp
When decoding words, this library looks for matches to this regexp.

@item rfc2047-encode-encoded-words
@vindex rfc2047-encode-encoded-words
The boolean variable specifies whether encoded words
(e.g. @samp{=?hello?=}) should be encoded again.

@end table

Those were the variables, and these are this functions:

@table @code
@item rfc2047-narrow-to-field
@findex rfc2047-narrow-to-field
Narrow the buffer to the header on the current line.

@item rfc2047-encode-message-header
@findex rfc2047-encode-message-header
Should be called narrowed to the header of a message.  Encodes according
to @code{rfc2047-header-encoding-alist}.

@item rfc2047-encode-region
@findex rfc2047-encode-region
Encodes all encodable words in the region specified.

@item rfc2047-encode-string
@findex rfc2047-encode-string
Encode a string and return the results.

@item rfc2047-decode-region
@findex rfc2047-decode-region
Decode the encoded words in the region.

@item rfc2047-decode-string
@findex rfc2047-decode-string
Decode a string and return the results.

@item rfc2047-encode-parameter
@findex rfc2047-encode-parameter
Encode a parameter in the RFC2047-like style.  This is a replacement for
the @code{rfc2231-encode-string} function.  @xref{rfc2231}.

When attaching files as @acronym{MIME} parts, we should use the RFC2231
encoding to specify the file names containing non-@acronym{ASCII}
characters.  However, many mail softwares don't support it in practice
and recipients won't be able to extract files with correct names.
Instead, the RFC2047-like encoding is acceptable generally.  This
function provides the very RFC2047-like encoding, resigning to such a
regrettable trend.  To use it, put the following line in your
@file{~/.gnus.el} file:

@lisp
(defalias 'mail-header-encode-parameter 'rfc2047-encode-parameter)
@end lisp

@end table


@node time-date
@section time-date

While not really a part of the @acronym{MIME} library, it is convenient to
document this library here.  It deals with parsing @code{Date} headers
and manipulating time.  (Not by using tesseracts, though, I'm sorry to
say.)

These functions convert between five formats: A date string, an Emacs
time structure, a decoded time list, a second number, and a day number.

Here's a bunch of time/date/second/day examples:

@example
(parse-time-string "Sat Sep 12 12:21:54 1998 +0200")
@result{} (54 21 12 12 9 1998 6 nil 7200)

(date-to-time "Sat Sep 12 12:21:54 1998 +0200")
@result{} (13818 19266)

(time-to-seconds '(13818 19266))
@result{} 905595714.0

(seconds-to-time 905595714.0)
@result{} (13818 19266 0)

(time-to-days '(13818 19266))
@result{} 729644

(days-to-time 729644)
@result{} (961933 65536)

(time-since '(13818 19266))
@result{} (0 430)

(time-less-p '(13818 19266) '(13818 19145))
@result{} nil

(subtract-time '(13818 19266) '(13818 19145))
@result{} (0 121)

(days-between "Sat Sep 12 12:21:54 1998 +0200"
              "Sat Sep 07 12:21:54 1998 +0200")
@result{} 5

(date-leap-year-p 2000)
@result{} t

(time-to-day-in-year '(13818 19266))
@result{} 255

(time-to-number-of-days
 (time-since
  (date-to-time "Mon, 01 Jan 2001 02:22:26 GMT")))
@result{} 4.146122685185185
@end example

And finally, we have @code{safe-date-to-time}, which does the same as
@code{date-to-time}, but returns a zero time if the date is
syntactically malformed.

The five data representations used are the following:

@table @var
@item date
An RFC822 (or similar) date string.  For instance: @code{"Sat Sep 12
12:21:54 1998 +0200"}.

@item time
An internal Emacs time.  For instance: @code{(13818 26466)}.

@item seconds
A floating point representation of the internal Emacs time.  For
instance: @code{905595714.0}.

@item days
An integer number representing the number of days since 00000101.  For
instance: @code{729644}.

@item decoded time
A list of decoded time.  For instance: @code{(54 21 12 12 9 1998 6 t
7200)}.
@end table

All the examples above represent the same moment.

These are the functions available:

@table @code
@item date-to-time
Take a date and return a time.

@item time-to-seconds
Take a time and return seconds.

@item seconds-to-time
Take seconds and return a time.

@item time-to-days
Take a time and return days.

@item days-to-time
Take days and return a time.

@item date-to-day
Take a date and return days.

@item time-to-number-of-days
Take a time and return the number of days that represents.

@item safe-date-to-time
Take a date and return a time.  If the date is not syntactically valid,
return a ``zero'' date.

@item time-less-p
Take two times and say whether the first time is less (i. e., earlier)
than the second time.

@item time-since
Take a time and return a time saying how long it was since that time.

@item subtract-time
Take two times and subtract the second from the first.  I. e., return
the time between the two times.

@item days-between
Take two days and return the number of days between those two days.

@item date-leap-year-p
Take a year number and say whether it's a leap year.

@item time-to-day-in-year
Take a time and return the day number within the year that the time is
in.

@end table


@node qp
@section qp

This library deals with decoding and encoding Quoted-Printable text.

Very briefly explained, qp encoding means translating all 8-bit
characters (and lots of control characters) into things that look like
@samp{=EF}; that is, an equal sign followed by the byte encoded as a hex
string.

The following functions are defined by the library:

@table @code
@item quoted-printable-decode-region
@findex quoted-printable-decode-region
QP-decode all the encoded text in the specified region.

@item quoted-printable-decode-string
@findex quoted-printable-decode-string
Decode the QP-encoded text in a string and return the results.

@item quoted-printable-encode-region
@findex quoted-printable-encode-region
QP-encode all the encodable characters in the specified region.  The third
optional parameter @var{fold} specifies whether to fold long lines.
(Long here means 72.)

@item quoted-printable-encode-string
@findex quoted-printable-encode-string
QP-encode all the encodable characters in a string and return the
results.

@end table


@node base64
@section base64
@cindex base64

Base64 is an encoding that encodes three bytes into four characters,
thereby increasing the size by about 33%.  The alphabet used for
encoding is very resistant to mangling during transit.

The following functions are defined by this library:

@table @code
@item base64-encode-region
@findex base64-encode-region
base64 encode the selected region.  Return the length of the encoded
text.  Optional third argument @var{no-line-break} means do not break
long lines into shorter lines.

@item base64-encode-string
@findex base64-encode-string
base64 encode a string and return the result.

@item base64-decode-region
@findex base64-decode-region
base64 decode the selected region.  Return the length of the decoded
text.  If the region can't be decoded, return @code{nil} and don't
modify the buffer.

@item base64-decode-string
@findex base64-decode-string
base64 decode a string and return the result.  If the string can't be
decoded, @code{nil} is returned.

@end table


@node binhex
@section binhex
@cindex binhex
@cindex Apple
@cindex Macintosh

@code{binhex} is an encoding that originated in Macintosh environments.
The following function is supplied to deal with these:

@table @code
@item binhex-decode-region
@findex binhex-decode-region
Decode the encoded text in the region.  If given a third parameter, only
decode the @code{binhex} header and return the filename.

@end table

@node uudecode
@section uudecode
@cindex uuencode
@cindex uudecode

@code{uuencode} is probably still the most popular encoding of binaries
used on Usenet, although @code{base64} rules the mail world.

The following function is supplied by this package:

@table @code
@item uudecode-decode-region
@findex uudecode-decode-region
Decode the text in the region.
@end table


@node yenc
@section yenc
@cindex yenc

@code{yenc} is used for encoding binaries on Usenet.  The following
function is supplied by this package:

@table @code
@item yenc-decode-region
@findex yenc-decode-region
Decode the encoded text in the region.

@end table


@node rfc1843
@section rfc1843
@cindex rfc1843
@cindex HZ
@cindex Chinese

RFC1843 deals with mixing Chinese and @acronym{ASCII} characters in messages.  In
essence, RFC1843 switches between @acronym{ASCII} and Chinese by doing this:

@example
This sentence is in @acronym{ASCII}.
The next sentence is in GB.~@{<:Ky2;S@{#,NpJ)l6HK!#~@}Bye.
@end example

Simple enough, and widely used in China.

The following functions are available to handle this encoding:

@table @code
@item rfc1843-decode-region
Decode HZ-encoded text in the region.

@item rfc1843-decode-string
Decode a HZ-encoded string and return the result.

@end table


@node mailcap
@section mailcap

The @file{~/.mailcap} file is parsed by most @acronym{MIME}-aware message
handlers and describes how elements are supposed to be displayed.
Here's an example file:

@example
image/*; gimp -8 %s
audio/wav; wavplayer %s
application/msword; catdoc %s ; copiousoutput ; nametemplate=%s.doc
@end example

This says that all image files should be displayed with @code{gimp},
that WAVE audio files should be played by @code{wavplayer}, and that
MS-WORD files should be inlined by @code{catdoc}.

The @code{mailcap} library parses this file, and provides functions for
matching types.

@table @code
@item mailcap-mime-data
@vindex mailcap-mime-data
This variable is an alist of alists containing backup viewing rules.

@end table

Interface functions:

@table @code
@item mailcap-parse-mailcaps
@findex mailcap-parse-mailcaps
Parse the @file{~/.mailcap} file.

@item mailcap-mime-info
Takes a @acronym{MIME} type as its argument and returns the matching viewer.

@end table




@node Standards
@chapter Standards

The Emacs @acronym{MIME} library implements handling of various elements
according to a (somewhat) large number of RFCs, drafts and standards
documents.  This chapter lists the relevant ones.  They can all be
fetched from @uref{http://quimby.gnus.org/notes/}.

@table @dfn
@item RFC822
@itemx STD11
Standard for the Format of ARPA Internet Text Messages.

@item RFC1036
Standard for Interchange of USENET Messages

@item RFC2045
Format of Internet Message Bodies

@item RFC2046
Media Types

@item RFC2047
Message Header Extensions for Non-@acronym{ASCII} Text

@item RFC2048
Registration Procedures

@item RFC2049
Conformance Criteria and Examples

@item RFC2231
@acronym{MIME} Parameter Value and Encoded Word Extensions: Character Sets,
Languages, and Continuations

@item RFC1843
HZ - A Data Format for Exchanging Files of Arbitrarily Mixed Chinese and
@acronym{ASCII} characters

@item draft-ietf-drums-msg-fmt-05.txt
Draft for the successor of RFC822

@item RFC2112
The @acronym{MIME} Multipart/Related Content-type

@item RFC1892
The Multipart/Report Content Type for the Reporting of Mail System
Administrative Messages

@item RFC2183
Communicating Presentation Information in Internet Messages: The
Content-Disposition Header Field

@item RFC2646
Documentation of the text/plain format parameter for flowed text.

@end table


@node Index
@chapter Index
@printindex cp

@summarycontents
@contents
@bye

@c Local Variables:
@c coding: iso-2022-7bit
@c fill-column: 72
@c mode: texinfo
@c use-kuten-for-period: t
@c use-touten-for-comma: t
@c End:

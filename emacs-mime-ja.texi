\input texinfo-ja

@include gnus-overrides-ja.texi

@setfilename emacs-mime-ja.info
@settitle Emacs MIME Manual
@synindex fn cp
@synindex vr cp
@synindex pg cp
@documentencoding UTF-8
@documentlanguage ja

@copying
このファイルは Emacs MIME インターフェースの機能を文書化したものです。

Copyright @copyright{} 1998--2018 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''.

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.3 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分は指定しません。“A GNU Manual”は表表紙
テキスト、以下の (a) は裏表紙テキストです。この利用許諾契約書の複写は
「GNU フリー文書利用許諾契約書」という章に含まれています。

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.''

(a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を複製したり変更す
る自由があります。」
@end quotation
@end copying

@c Node ``Interface Functions'' uses non-ASCII characters
@c @documentencoding UTF-8
@c
@dircategory Emacs lisp libraries
@direntry
* Emacs MIME-ja: (emacs-mime-ja).
                                Emacs MIME de/composition library
                                  (Japanese).
@end direntry
@iftex
@finalout
@end iftex
@setchapternewpage odd

@titlepage
@ifset WEBHACKDEVEL
@title Emacs MIME Manual (DEVELOPMENT VERSION)
@end ifset
@ifclear WEBHACKDEVEL
@title Emacs MIME Manual
@end ifclear

@author by Lars Magne Ingebrigtsen
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Emacs MIME

このマニュアルは @acronym{MIME} メッセージの作成と表示に使われるライブラ
リーを文書化したものです。

このマニュアルは @acronym{MIME} のエンコード/デコード処理の振る舞いを変
更したい利用者、Emacs @acronym{MIME} ライブラリーがどのように動作するか
をもっと詳しく知りたい利用者、および @acronym{MIME} の要素を操作する関数
や命令を書きたい人たちを対象にしています。

@acronym{MIME} は @dfn{Multipurpose Internet Mail Extensions} の省略表記
です。この標準は多数の RFC に文書化されていて、主なものは次の通りです:
RFC2045 (インターネット・メッセージの本文の書式), RFC2046 (メディアタイ
プ), RFC2047 (非-@acronym{ASCII} テキストのためのメッセージヘッダーの拡
張), RFC2048 (登録手続), RFC2049 (適合基準と事例)。@acronym{MIME} に準拠
したソフトウェアを書こうと思っている人は誰でも、少なくと
も RFC2045 と RFC2047 は読んでおくことを強く勧めます。

@ifnottex
@insertcopying
@end ifnottex

@menu
* Decoding and Viewing::  デコードと表示のための枠組み
* Composing::             @acronym{MML}; @acronym{MIME} パート記述用言語
* Interface Functions::   基本的な関数の抽象化
* Basic Functions::       ユーティリティーおよび基本的な解析のための関数
* Standards::             使われている RFC と作業文書の概略
* GNU Free Documentation License:: この文書の利用許諾契約書
* Index::                 関数および変数の索引
@end menu

@node Decoding and Viewing
@chapter デコードと表示

この章は、上位階層での @acronym{MIME} メッセージのデコードと表示を扱いま
す。

その主な目的は、最初に @acronym{MIME} の記事を解析してから、その解析の結
果として返される「ハンドル」のリストに基づいて、他のプログラムが処理を行
なうことができるようにすることです。

@menu
* Dissection::             @acronym{MIME} メッセージの解析
* Non-MIME::               非-@acronym{MIME} メッセージの解析
* Handles::                ハンドルの取り扱い
* Display::                ハンドルの表示
* Display Customization::  表示に影響を及ぼす変数
* Files and Directories::  添付ファイルの保存と命名
* New Viewers::            自分用ビューワーの書き方
@end menu

@node Dissection
@section 解体

@code{mm-dissect-buffer} は @acronym{MIME} 記事の解体を担当する関数です。
マルチパートのメッセージが与えられると、メッセージを再帰的に掘り下げて構
造をたどり、そのメッセージの構造を描写する @acronym{MIME} ハンドルの木構
造を返します。

@node Non-MIME
@section 非-MIME
@vindex mm-uu-configure-list

Gnus はいくつかの @acronym{MIME} ではない添付ファイルも理解します。それ
らは postscript, uuencode, binhex, yenc, shar, forward, gnatsweb, pgp,
diff のようなものです。それぞれの機能は、@code{mm-uu-configure-list} に
項目を追加することによって無効にすることができます。例です。

@lisp
(require 'mm-uu)
(add-to-list 'mm-uu-configure-list '(pgp-signed . disabled))
@end lisp

@table @code
@item postscript
@findex postscript
ポストスクリプトのファイル。

@item uu
@findex uu
Uuencode されたファイル。

@item binhex
@findex binhex
Binhex でエンコードされたファイル。

@item yenc
@findex yenc
Yenc でエンコードされたファイル。

@item shar
@findex shar
Shar で作られたアーカイブ・ファイル。

@item forward
@findex forward
@acronym{MIME} を使わずに転送されたメッセージ。

@item gnatsweb
@findex gnatsweb
Gnatsweb の添付ファイル。

@item pgp-signed
@findex pgp-signed
@acronym{PGP} で署名された平文 (clear text, ひらぶん)。

@item pgp-encrypted
@findex pgp-encrypted
@acronym{PGP} で暗号化された平文 (clear text, ひらぶん)。

@item pgp-key
@findex pgp-key
@acronym{PGP} の公開鍵。

@item emacs-sources
@findex emacs-sources
@vindex mm-uu-emacs-sources-regexp
Emacs のソースコード。この項目は @code{mm-uu-emacs-sources-regexp} に合
致するグループでのみ動作します。

@item diff
@findex diff
@vindex mm-uu-diff-groups-regexp
パッチ。これは、コミットされたファイルの差分が自動的に送られるグループを
対象にしたものです。@code{mm-uu-diff-groups-regexp} に合致するグループで
のみ動作します。

@item verbatim-marks
@findex verbatim-marks
Slrn ふうの verbatim (文章を一言一句そのまま表す) 記号の対。

(訳注: @samp{#v+} と @samp{#v-} の二行で囲まれたテキスト
を @acronym{MIME} パートに見立てます。)

@item LaTeX
@findex LaTeX
LaTeX の文献。@code{mm-uu-tex-groups-regexp} に合致する名前のグループで
のみ動作します。
@end table

@cindex text/x-verbatim
@c @vindex は face のために適切か?
@vindex mm-uu-extract
いくつかの @acronym{MIME} ではない添付は @code{mm-uu-extract} というフェー
スを使って表示されます。ディフォルトではそれらのパート
に @acronym{MIME} ボタンが付きません。@kbd{K b}
(@code{gnus-summary-display-buttonized}) を使う
か @code{gnus-buttonized-mime-types} に @code{text/x-verbatim} を加える
ことによって、ボタンの表示を強制することができます。@xref{MIME Commands,
,MIME コマンド, gnus-ja, The Gnus Manual}.

(訳注: ここで唐突に @code{text/x-verbatim} のことが出てくるのは、フェー
スが使われてボタンが付かない代表的なパートが @code{verbatim-marks} だか
らです。)

@node Handles
@section ハンドル

@acronym{MIME} ハンドルは、@acronym{MIME} の構成要素を完全に描写するリス
トです。

ハンドルの要素をアクセスするために、以下のマクロを使うことができます:

@table @code
@item mm-handle-buffer
@findex mm-handle-buffer
デコードされていない @acronym{MIME} パートの内容物を保持しているバッファー
を返します。

@item mm-handle-type
@findex mm-handle-type
パートの解析された @code{Content-Type} を返します。

@item mm-handle-encoding
@findex mm-handle-encoding
パートの @code{Content-Transfer-Encoding} を返します。

@item mm-handle-undisplayer
@findex mm-handle-undisplayer
表示されているパートを消すことができるもの (訳注: 関数など) を (それが表
示されている場合に) 返します。

@item mm-handle-set-undisplayer
@findex mm-handle-set-undisplayer
表示されているパートを消すことができるもの (訳注: 関数など) を設定します。

@item mm-handle-disposition
@findex mm-handle-disposition
パートの解析された @code{Content-Disposition} (訳注: 配置指定) を返しま
す。

@item mm-get-content-id
@code{Content-ID} で参照されるハンドル (単数または複数) を返します。
@end table

@node Display
@section 表示

表示し、消去し、保存するための関数です。

@table @code
@item mm-display-part
@findex mm-display-part
パートを表示します。

@item mm-remove-part
@findex mm-remove-part
パートを (それが表示されていたら) 消去します。

@item mm-inlinable-p
@findex mm-inlinable-p
@acronym{MIME} タイプがインラインで表示可能かどうかを返します。

@item mm-automatic-display-p
@findex mm-automatic-display-p
@acronym{MIME} タイプが自動的に表示されるべきかどうかを返します。

@item mm-destroy-part
@findex mm-destroy-part
パートによって使われているすべての資源を開放します (訳注: パートの表示、
およびパートを解体して得た個々の部品を一時的に保持しているバッファーやファ
イルを消去します)。

@item mm-save-part
@findex mm-save-part
パートをファイルに保存します。

@item mm-pipe-part
@findex mm-pipe-part
パートを何かのプロセスにパイプします。

@item mm-interactively-view-part
@findex mm-interactively-view-part
パートを表示するために使う mailcap の手段を利用者が入力することを求めて、
それを使って表示します。
@end table

@node Display Customization
@section 表示のカスタマイズ

@table @code
@item mm-inline-media-tests
@vindex mm-inline-media-tests
これは連想リストです。鍵 (第一要素) は @acronym{MIME} タイプ、第二要素は
パートを「インライン」で (すなわち Emacs の画面に埋め込んで) 表示するた
めの関数、そして第三要素はそのパートがインラインで表示することが可能かど
うかを調べるために @code{eval} (評価) される式です。

この変数は、あるパートがインライン表示可能かどうかと、もし可能ならそのや
り方を指定します。パートが現実にインライン表示されているかどうかを示すも
のではありません。

@item mm-inlined-types
@vindex mm-inlined-types
一方これは、上記の変数によって設定された条件を満足した場合に、インライン
表示を行なうタイプを示します。これは @acronym{MIME} メディアタイプのリス
トです。(訳注: それぞれの要素は正規表現です。)

@item mm-automatic-display
@vindex mm-automatic-display
これは上記の変数が認めるタイプに限って「自動的」に表示されるタイプのリス
トです。つまり、インライン表示が可能なパートだけが自動的に表示されます。

@item mm-automatic-external-display
@vindex mm-automatic-external-display
これは外部ビューワーで自動的に表示されるタイプのリストです。

@item mm-keep-viewer-alive-types
@vindex mm-keep-viewer-alive-types
これは、別の記事を選択しても外部ビューワーが kill されないメディアタイプ
のリストです。

訳注: postscript や dvi など (変数のディフォルト値を参照のこと) のように、
読むのに時間がかかるかもしれないパートのタイプを含むリストです。一方、こ
れに含まれない単純な画像のパートなどは、それが含まれていた記事の表示をや
めたときに、自動的に外部ビューワーが kill されます。

@item mm-attachment-override-types
@vindex mm-attachment-override-types
いくつかの @acronym{MIME} エージェントは「添付ファイル」(attachment) の
配置指定 (content-disposition) を持つパートを生成します。この変数に含ま
れる @acronym{MIME} タイプの場合はそんな配置指定を無視して、そのパートを
インライン表示することができるようにします。(そのパートをインライン表示
することが可能で、私たちがそうすることを望む場合に限って、配置指定が無視
されることに注意してください。)

@item mm-discouraged-alternatives
@vindex mm-discouraged-alternatives
@samp{multipart/alternative} に含まれている、見たくないパート
の @acronym{MIME} タイプのリストです。メッセージの後半にあるパートが最も
豊かな内容になっていると想定しているので、表示エージェントはそれを表示す
ることになっています。しかし、利用者は代わりに他のタイプを見ることを好む
かもしれません。このリストは、どんなタイプを最も見たくないかを指定するた
めに使います。例えばもし @samp{text/html} パートをぜんぜん見たくなくて、
@samp{text/richtext} パートはあまり見たくないということであれば、以下の
ように宣言することができます:

@lisp
(setq mm-discouraged-alternatives
      '("text/html" "text/richtext")
      mm-automatic-display
      (remove "text/html" mm-automatic-display))
@end lisp

さらに、これに @code{"image/.*"} を追加することは役に立つでしょう。
Spammers は @samp{multipart/alternative} メッセージの優先される側で画像
を使っていることがあるので、あなたはそれ以外のパートがあることに気が付か
ないかもしれません。@code{gnus-buttonized-mime-types} も参照してくださ
い (@pxref{MIME Commands, ,MIME コマンド, gnus-ja, The Gnus Manual})。
@code{gnus-buttonized-mime-types} に @code{"multipart/alternative"} を追
加した後では、見たい側を手で選ぶことができます。例えば、このように設定す
るれば良いでしょう:

@lisp
(setq gnus-buttonized-mime-types
      '("multipart/alternative" "multipart/signed")
      mm-discouraged-alternatives
      '("text/html" "image/.*"))
@end lisp

この場合、Gnus はそのような種類の spam メッセージのために、以下のように
ラジオボタンを表示するでしょう:

@example
1.  (*) multipart/alternative  ( ) image/gif

2.  (*) text/plain          ( ) text/html
@end example

@item mm-inline-large-images
@vindex mm-inline-large-images
ウィンドウより大きなインライン画像を表示すると、Emacs はスクロールするこ
とができません。つまり画像の全体を見ることができないということです。これ
を避けるために、ライブラリーはそれをインライン表示する前に画像のサイズを
計って、それがウィンドウに合わない場合は、ライブラリーはそれを外部で (例
えば @samp{ImageMagick} や @samp{xv} で) 表示します。この変数
を @code{t} に設定すると、この検査をさせなくして、ライブラリーにすべての
画像をサイズに関わりなくインラインで表示させます。もしこの変数
を @code{resize} にすると、Emacs に画像のサイズを変更する能力があれば、
画像はウィンドウに合うようにサイズが変更されて表示されます。

@item mm-inline-large-images-proportion
@vindex mm-inline-images-max-proportion
大きな画像のサイズを変更するときの割合。

@item mm-inline-override-types
@vindex mm-inline-override-types
@code{mm-inlined-types} は、例えばすべての @samp{text/.*} パートをインラ
インで表示することを指示するような正規表現を含んでいるかもしれません。一
方、インライン表示が可能だけれども添付ファイルとして扱いたいタイプがある
ならば、そのタイプに合致する正規表現のリストをこの変数に設定することによっ
て、それを実現することができます。例え
ば @code{mm-inlined-types} が @samp{text/.*} を含んでいるものとすると、
この変数に @samp{text/html} を含ませることによって、@samp{text/html} パー
トは添付ファイルとして扱われるようになります。

@item mm-text-html-renderer
@vindex mm-text-html-renderer
@acronym{HTML} を描画するために使う関数を選択します。すでに用意してある
描画プログラムは @code{shr}, @code{gnus-w3m},
@code{w3m}@footnote{emacs-w3m についての詳細
は @uref{http://emacs-w3m.namazu.org/} を見てください。}, @code{links},
@code{lynx}, @code{w3m-standalone} または @code{html2text} のシンボル群
のうちの一つを指定することによって選択します。さらに関数 (引数とし
て @acronym{MIME} ハンドルが与えられて呼ばれる) を設定することもできます。

@item mm-html-inhibit-images
@vindex mm-html-inhibit-images
@vindex mm-inline-text-html-with-images
もし @code{nil} でなければ、記事のボディーでの画像のインライン表示を禁止
します。これは @code{mm-text-html-renderer} (@pxref{Display
Customization}) が @code{shr} または @code{w3m} である場合に表示され
た @acronym{HTML} 記事の画像に対して有効です。Gnus で
は @code{gnus-inhibit-images} の値で上書きされます (@pxref{Misc Article,
,Misc Article, gnus-ja, Gnus manual})。ディフォルトは @code{nil} です。

@item mm-html-blocked-images
@vindex mm-html-blocked-images
@acronym{URL} がこの正規表現に合致する外部画像は取得も表示もされません。
例えば ``ads'' という文字列をそれらの内に持つすべての @acronym{URL} を阻
止するには、以下のようにしてください:

@lisp
(setq mm-html-blocked-images "ads")
@end lisp

これは @code{mm-text-html-renderer} (@pxref{Display
Customization}) が @code{shr} である場合に有効です。Gnus で
は @code{gnus-blocked-images} の値か、また
は @code{gnus-blocked-images} に設定された関数の戻り値で上書きされま
す (@pxref{HTML, ,HTML, gnus-ja, Gnus manual})。

@acronym{HTML} メールには @samp{<img>} タグを使った spammers (spam をば
らまくやから) の卑劣な悪巧みが含まれているかもしれません。最もありそうな
のは、あなたがそのメールを読んだことを確認するための意図があることです。
このオプションを @code{""} に設定する (それがディフォルトです) ことによっ
て、あなたの個人情報が流出するのを防ぐことができます。

@item mm-w3m-safe-url-regexp
@vindex mm-w3m-safe-url-regexp
安全な URL 名、すなわち @acronym{HTML} メールを描画するときに個人情報が
流出しそうもない URL に合致する正規表現です (ディフォルト値
は @samp{\\`cid:} です)。@code{nil} にすると、すべての URL が安全だと判
断します。Gnus では、これは @code{gnus-safe-html-newsgroups} の値に応じ
て上書きされます。@xref{Various Various, ,いろいろのいろいろ, gnus-ja,
The Gnus Manual}.

@item mm-inline-text-html-with-w3m-keymap
@vindex mm-inline-text-html-with-w3m-keymap
このオプションを非-@code{nil} に設定することによって、インライン表示され
た text/html パートで emacs-w3m の命令キーを使うことができます。ディフォ
ルト値は @code{t} です。

@item mm-external-terminal-program
@vindex mm-external-terminal-program
外部の端末を起動するために使われるプログラムです。

@item mm-enable-external
@vindex mm-enable-external
外部の @acronym{MIME} ハンドラーを使うべきかどうかを指定します。

@code{t} だったら、定義されているすべての外部の @acronym{MIME} ハンドラー
が使われます。@code{nil} にすると、ファイルはディスクに保存されま
す (@code{mailcap-save-binary-file})。これが @code{ask} というシンボルだっ
たら、外部の @acronym{MIME} ハンドラーが起動される前に尋ねられるでしょう。

Mailcap (@pxref{mailcap}) を介して添付ファイルの表示を始めると、安全な
ビューワーを最も安全なオプションで使うことを試みます (添付ファイルをディ
スクに保存して、異なる手段 (コマンドラインかダブルクリック) でその表示を
始める場合とは違います)。とにかく、必ずどんな外部プログラムも使わないよ
うにしたいのであれば、この変数を @code{nil} か @code{ask} に設定してくだ
さい。
@end table

@node Files and Directories
@section ファイルとディレクトリー

@table @code
@item mm-default-directory
@vindex mm-default-directory
添付ファイルを保存するための、ディフォルトのディレクトリーです。
@code{nil} だったら @code{default-directory} を使います。

@item mm-tmp-directory
@vindex mm-tmp-directory
一時ファイルを格納するためのディレクトリーです。

@item mm-file-name-rewrite-functions
@vindex mm-file-name-rewrite-functions
@acronym{MIME} パートのファイル名を書き換えるために使われる関数のリスト
です。それぞれの関数はファイル名に対して順繰りに実行されます (訳注: ある
関数の戻り値が次の関数の引数になります)。出来合いの関数は以下の通りです。

@table @code
@item mm-file-name-delete-control
@findex mm-file-name-delete-control
すべての制御文字を消去します。

@item mm-file-name-delete-gotchas
@findex mm-file-name-delete-gotchas
欠陥があるシェルスクリプトで使われると意図しない結果を生じる文字、すなわ
ち @samp{|}, @samp{>} および @samp{<}、加えて最初の文字として使われ
る @samp{-} と @samp{.} を消去します。

@item mm-file-name-delete-whitespace
@findex mm-file-name-delete-whitespace
すべての空白文字を取り除きます。

@item mm-file-name-trim-whitespace
@findex mm-file-name-trim-whitespace
先頭と末尾の空白文字を取り除きます。

@item mm-file-name-collapse-whitespace
@findex mm-file-name-collapse-whitespace
複数の連続した空白文字を単一のスペース文字で置き換えます。

@item mm-file-name-replace-whitespace
@findex mm-file-name-replace-whitespace
@vindex mm-file-name-replace-whitespace
空白文字を下線 (underscore) で置き換えます。下線がお好みでなければ、他の
文字を @code{mm-file-name-replace-whitespace} 変数に設定してください。
@end table

Emacs 標準の関数である @code{capitalize}, @code{downcase},
@code{upcase} および @code{upcase-initials} も役に立つことがあるかもしれ
ません。

@item mm-path-name-rewrite-functions
@vindex mm-path-name-rewrite-functions
@acronym{MIME} パートのフル・ファイル名を書き換えるために使われる関数の
リストです。これはパートを外部で表示するとき (すなわち、融通の効かないプ
ログラムが、ファイルが保存された場所を見つけることができるように、絶対パ
ス名を変換するため) に使われます。
@end table

@node New Viewers
@section 新しいビューワー

これは @code{text/enriched} パートをインライン表示するビューワーの例です:

@lisp
(defun mm-display-enriched-inline (handle)
  (let (text)
    (with-temp-buffer
      (mm-insert-part handle)
      (save-window-excursion
        (enriched-decode (point-min) (point-max))
        (setq text (buffer-string))))
    (mm-insert-inline handle text)))
@end lisp

この関数がパラメーターとして @acronym{MIME} ハンドルを受け取ることがわか
りますね。それは一時バッファーに作業場所を移し、パートのテキストを挿入し、
そのテキストに何かの処理を施し、結果を覚えておいて、関数が呼ばれたときの
バッファーに戻ってその結果を挿入します。

ここにある二つの重要なお助け関数
は @code{mm-insert-part} と @code{mm-insert-inline} です。最初の関数は、
ハンドルのテキストを現在のバッファーに挿入します。これは文字セットおよび
エンコーディグ (content transfer decoding) を取り扱います。二番目の関数
は、挿入しろと言ったどんなテキストでも単に挿入しますが、テキストを手軽な
方法で「表示されなくする」(undisplayed にする) ことができるような諸設定
をも行ないます。

@node Composing
@chapter MIME メッセージの作成
@cindex Composing
@cindex MIME Composing
@cindex MML
@cindex MIME Meta Language

@acronym{MIME} メッセージの作成はうんざりする仕事だし簡単でもありません。
そこで、@acronym{MML} (@acronym{MIME} Meta Language) という言語を解析し
て、@acronym{MIME} メッセージを生成するための、@code{mml} というライブラ
リーが作られました。

@findex mml-generate-mime
主要なインターフェース関数は @code{mml-generate-mime} です。これは現在
の (狭められた) バッファーの内容物を調べて、@acronym{MIME} メッセージを
含む文字列を返します。

@menu
* Simple MML Example::             @acronym{MML} 文書の例
* MML Definition::                 すべての有効な @acronym{MML} 要素
* Advanced MML Example::           もう一つの @acronym{MML} 文書の例
* Encoding Customization::         エンコーディングに作用する変数
* Charset Translation::            @sc{mule} 文字セットから @acronym{MIME} 文字セットへの割り当て
* Conversion::                     @acronym{MIME} から @acronym{MML} へ、およびその逆
* Flowed text::                    ソフトおよびハード改行
@end menu

@node Simple MML Example
@section 単純な MML の例

@samp{multipart/alternative} の単純な例です:

@example
<#multipart type=alternative>
This is a plain text part.
これはプレーンテキストのパートです。
<#part type=text/enriched>
<center>This is a centered enriched part</center>
<center>これは中心に置かれる enriched パートです</center>
<#/multipart>
@end example

これを @code{mml-generate-mime} に通すと、次のものが得られます:

@example
Content-Type: multipart/alternative; boundary="=-=-="

--=-=-=
Content-Type: text/plain; charset=iso-2022-jp

This is a plain text part.
これはプレーンテキストのパートです。

--=-=-=
Content-Type: text/enriched; charset=iso-2022-jp

<center>This is a centered enriched part</center>
<center>これは中心に置かれる enriched パートです</center>

--=-=-=--
@end example

(実際には、日本語の部分は @samp{charset=iso-2022-jp} でエンコードされた
ものになります。)

@node MML Definition
@section MML の定義

@acronym{MML} 言語はとても単純です。SGML アプリケーションに少し似ていま
すが、異なるものです。

@acronym{MML} の主要な概念は「パート」です。それぞれのパートを異なるタイ
プにしたり、異なる文字セットを使うことができます。パート
は @samp{<#part ...>} タグで記述します。マルチパート型のパート
は @samp{<#multipart ...>} タグで始めます。それぞれのパート
は @samp{<#/part>} タグか @samp{<#/multipart>} タグで終端しますが、(それ
らが無くても) @samp{<#part ...>} で始まったタグは次のパートの始まりによっ
ても閉じられます。

@samp{<#external ...>} タグというものもあります。これ
は @samp{external/message-body} 型のパートを記述するために使われます。

もしメッセージで MML を話題にする必要が生じたら、それらのタグ
を ``quote'' する手段が無ければなりません。その手段とは、タグを開始す
る 2文字の後ろに感嘆符を含めることです。すなわ
ち @samp{<#!part ...>} です。

それぞれのタグは「parameter=値」の形式で、一つ以上のパラメーターを含むこ
とができます (もちろん無いこともあります)。値をクォーテーションマー
ク ("...") で囲むことができますが、値が空白文字を含む場合以外は囲む必要
がありません。したがって、@samp{filename=/home/user/#hello$^yes} は完全
に有効です。

もしメッセージの中で MML について話をしたいなら、それらのタグ
を ``クオート'' する必要があります。そのためには、始めの 2文字の後に感嘆
符を含ませてください。すなわち @samp{<#!part ...>} と。

以下のパラメーターは @acronym{MML} で使われるものです。意味を持たないパ
ラメーターは無視されます。@acronym{MML} パラメーターの名前
は @acronym{MIME} パラメーターの名前と同じで、括弧の中に付記してあるのは、
それが使われるヘッダーです。

@table @samp
@item type
パートの @acronym{MIME} タイプです (@code{Content-Type})。

@item filename
そのパートの本体が含むことになるファイルの名前で
す (@code{Content-Disposition})。

@item recipient-filename
受取人に宛てて作成された @acronym{MIME} メッセージで、これをファイル名と
して使います。つまり、もしそのファイルが手元では @file{foo.txt} であった
としても、送られるメッセージの @code{Content-Disposition} では、この名前
を使うということです。

@item charset
パートの内容物をエンコードするときに使われる文字セットで
す (@code{Content-Type})。@xref{Charset Translation}.

@item name
パートをファイルに保存するときのファイル名を示唆するために使われるかもし
れません (@code{Content-Type})。

@item disposition
配置指定に使います。有効な値は @samp{inline} と @samp{attachment} で
す (@code{Content-Disposition})。

@item encoding
有効な値は @samp{7bit}, @samp{8bit}, @samp{quoted-printable} およ
び @samp{base64} です (@code{Content-Transfer-Encoding})。@xref{Charset
Translation}.

@item description
パートの説明書きです (@code{Content-Description})。

@item creation-date
パートが作成された時刻 (RFC822 形式) です (@code{Content-Disposition})。

@item modification-date
パートが変更された時刻 (RFC822 形式) です (@code{Content-Disposition})。

@item read-date
パートが読まれた時刻 (RFC822 形式) です (@code{Content-Disposition})。

@item recipients
パートを誰宛てに暗号化/署名するかを指定します。これは To/Cc を基にした自
動検出よりも優先されます。

@item sender
パートに署名するときの名義です。このフィールドはディフォルトの鍵が使われ
ないようにするために使われます。

@item size
パートのサイズを octet (8-bit) の単位で表しま
す (@code{Content-Disposition})。

@item sign
この @acronym{MML} のパートに、何の技術手段 (@code{smime}, @code{pgp} ま
たは @code{pgpmime}) で署名するかを指定します。

@item encrypt
この @acronym{MML} のパートを、何の技術手段 (@code{smime}, @code{pgp} ま
たは @code{pgpmime}) で暗号化するかを指定します。
@end table

以下は @samp{text/plain} のためのパラメーターです:

@table @samp
@item format
テキストを整形するためのパラメーターで、有効な値は @samp{fixed} (ディフォ
ルト) と @samp{flowed} です。普通はこれを手で設定しません。それは、テキ
ストの本文が、RFC 2646 で定められた特別な方法で整形されることを必要とす
るからです。@xref{Flowed text}.
@end table

以下は @samp{application/octet-stream} のためのパラメーターです:

@table @samp
@item type
パートのタイプです (@code{Content-Type})。これは人間が読むことを想定した、
非公式なものです。
@end table

以下は @samp{message/external-body} のためのパラメーターです:

@table @samp
@item access-type
ファイルを取得するための、サポートされているアクセス手段を示す語です。値
は @samp{ftp}, @samp{anon-ftp}, @samp{tftp}, @samp{localfile} およ
び @samp{mailserver} のどれかです。(@code{Content-Type}.)

@item expiration
ファイルが取得できなくなるかもしれない日時 (RFC822 形式) です。
(@code{Content-Type}.)

@item size
Octet (8-bit) の単位で表したファイルのサイズです。(@code{Content-Type}.)

@item permission
有効な値は @samp{read} と @samp{read-write} です (@code{Content-Type})。
@end table

以下は @samp{sign=smime} のためのパラメーターです:

@table @samp
@item keyfile
署名する人の鍵と証明書を含んでいるファイルです。
@end table

以下は @samp{encrypt=smime} のためのパラメーターです:

@table @samp
@item certfile
受取人の証明書を含んでいるファイルです。
@end table

@node Advanced MML Example
@section 高度な MML の例

複雑なマルチパート・メッセージの例です。これは @samp{multipart/mixed} で
す。多数のパートを含んでいて、その一つは @samp{multipart/alternative} で
す。

@example
<#multipart type=mixed>
<#part type=image/jpeg filename=~/rms.jpg disposition=inline>
<#multipart type=alternative>
This is a plain text part.
これはプレーンテキストのパートです。
<#part type=text/enriched name=enriched.txt>
<center>This is a centered enriched part</center>
<center>これは中心に置かれる enriched パートです</center>
<#/multipart>
This is a new plain text part.
これは新しいプレーンテキストのパートです。
<#part disposition=attachment>
This plain text part is an attachment.
このプレーンテキストのパートは添付ファイルです。
<#/multipart>
@end example

そして、これが結果の @acronym{MIME} メッセージです:

@example
Content-Type: multipart/mixed; boundary="=-=-="

--=-=-=
Content-Type: image/jpeg
Content-Disposition: inline; filename=rms.jpg
Content-Transfer-Encoding: base64

/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRof
Hh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/wAALCAAwADABAREA/8QAHwAA
AQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQR
BRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RF
RkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ip
qrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/9oACAEB
AAA/AO/rifFHjldNuGsrDa0qcSSHkA+gHrXKw+LtWLrMb+RgTyhbr+HSug07xNqV9fQtZrNI
AyiaE/NuBPOOOP0rvRNE880KOC8TbXXGCv1FPqjrF4LDR7u5L7SkTFT/ALWOP1xXgTuXfc7E
sx6nua6rwp4IvvEM8chCxWxOdzn7wz6V9AaB4S07w9p5itow0rDLSY5Pt9K43xO66P4xs71m
2QXiGCbA4yOVJ9+1aYORkdK434lyNH4ahCnG66VT9Nj15JFbPdX0MS43M4VQf5/yr2vSpLnw
5ZW8dlCZ8KFXjOPX0/mK6rSPEGt3Angu44fNEReHYNvIH3TzXDeKNO8RX+kSX2ouZkicTIOc
L+g7E810ulFjpVtv3bwgB3HJyK5L4quY/C9sVxk3ij/xx6850u7t1mtp/wDlpEw3An3Jr3Dw
34gsbWza4nBlhC5LDsaW6+IFgupQyCF3iHH7gA7c9R9ay7zx6t7aX9jHC4smhfBkGCvHGfrm
tLQ7hbnRrV1GPkAP1x1/Hr+Ncr8Vzjwrbf8AX6v/AKA9eQRyYlQk8Yx9K6XTNbkgia2ciSIn
7p5Ga9Atte0LTLKO6it4i7dVRFJDcZ4PvXN+JvEMF9bILVGXJLSZ4zkjivRPDaeX4b08HOTC
pOffmua+KkbS+GLVUGT9tT/0B68eeIpIFYjB70+OOVXyoOM9+M1eaWeCLzHPyHGO/NVWvJJm
jQ8KGH1NfQWhXSXmh2c8eArRLwO3HSv/2Q==
--=-=-=
Content-Type: multipart/alternative; boundary="==-=-="

--==-=-=
Content-Type: text/plain; charset=iso-2022-jp

This is a plain text part.
これはプレーンテキストのパートです。

--==-=-=
Content-Type: text/enriched; charset=iso-2022-jp; name=enriched.txt

<center>This is a centered enriched part</center>
<center>これは中心に置かれる enriched パートです</center>

--==-=-=--

--=-=-=
Content-Type: text/plain; charset=iso-2022-jp

This is a new plain text part.
これは新しいプレーンテキストのパートです。

--=-=-=
Content-Type: text/plain; charset=iso-2022-jp
Content-Disposition: attachment

This plain text part is an attachment.
このプレーンテキストのパートは添付ファイルです。

--=-=-=--
@end example

(実際には、日本語の部分は @samp{charset=iso-2022-jp} でエンコードされた
ものになります。)

@node Encoding Customization
@section エンコーディングのカスタマイズ

@table @code
@item mm-body-charset-encoding-alist
@vindex mm-body-charset-encoding-alist
@acronym{MIME} 文字セットに割り当てるエンコーディングです。この変数は、
例えば他の要件によって特定のエンコーディングが強制されないときに、通常使
われます (電子署名されたメッセージは 7bit エンコーディングを必要とします)。
ディフォルト値は次の通りです。

@lisp
((iso-2022-jp . 7bit)
 (iso-2022-jp-2 . 7bit)
 (utf-16 . base64)
 (utf-16be . base64)
 (utf-16le . base64))
@end lisp

例えば ISO-8859-1 文字セットが quoted-printable でエンコードされないよう
にしたい場合は、この変数に @code{(iso-8859-1 . 8bit)} を追加すれば良いで
しょう。@acronym{MML} の @code{encoding} タグを使って、メッセージ毎にそ
れで指定した値をこの変数より優先させることもできま
す (@pxref{MML Definition})。

@item mm-coding-system-priorities
@vindex mm-coding-system-priorities
送出するメッセージで使う coding system の優先度を指定します。ディフォル
ト値は @code{nil} です (その場合は Emacs におけるディフォルトの優先順位
が適用されます) が、日本語環境で Emacs を実行する場合
は @code{(iso-8859-1 iso-2022-jp utf-8)} になります。値は coding
system のシンボルのリストです (coding system の別名を使っても構いません。
設定するときは @kbd{M-x describe-coding-system} を使って、coding
system の名前が正確であることを確かめてください)。例えば UTF-8 を最優先
とするように Emacs を設定したものの、可能な場合は ISO-8859-1 でメッセー
ジを送信するようにしたいという場合だったら、この変数
を @code{(iso-8859-1)} にすれば良いでしょう。
@acronym{MML} の @code{charset} タグを使って、メッセージ毎にそれで指定し
た値をこの変数より優先させることもできます (@pxref{MML Definition})。

@quotation
訳注: 日本語環境とは @code{current-language-environment} 変数の値
が @samp{Japanese} になっている環境のことです。日本語のメッセージのエン
コードには伝統的に @code{iso-2022-jp} が使われているのに対し、Emacs で定
められた優先順位に基づくと @code{euc-jp} や @code{shift_jis} などが第一
候補になってしまう場合があるので、この値が @code{nil} ではよろしくないの
です。

なお、ラテン語圏の人たちに宛てて送るメッセージのために、ディフォルト値の
先頭に @code{iso-8859-1} が置かれています。
@end quotation

ニュースグループ階層ごとに優先するべき文字セットが異なるので、Gnus で
は @code{mm-coding-system-priorities} の値を階層によって切り替える必要が
あるでしょう。そのための例です:

@c 優先されるべき文字セットの訂正を歓迎します。de、fr および fj は正しい
@c はずですが、それら以外については不確かです (したがって、それらは単な
@c る例です):
@lisp
(add-to-list 'gnus-newsgroup-variables 'mm-coding-system-priorities)
(setq gnus-parameters
      (nconc
       ;; Some charsets are just examples!
       '(("^cn\\." ;; Chinese
          (mm-coding-system-priorities
           '(iso-8859-1 cn-big5 chinese-iso-7bit utf-8)))
         ("^cz\\.\\|^pl\\." ;; Central and Eastern European
          (mm-coding-system-priorities '(iso-8859-2 utf-8)))
         ("^de\\." ;; German language
          (mm-coding-system-priorities '(iso-8859-1 iso-8859-15 utf-8)))
         ("^fr\\." ;; French
          (mm-coding-system-priorities '(iso-8859-15 iso-8859-1 utf-8)))
         ("^fj\\." ;; Japanese
          (mm-coding-system-priorities
           '(iso-8859-1 iso-2022-jp utf-8)))
         ("^ru\\." ;; Cyrillic
          (mm-coding-system-priorities
           '(koi8-r iso-8859-5 iso-8859-1 utf-8))))
       gnus-parameters))
@end lisp

@item mm-content-transfer-encoding-defaults
@vindex mm-content-transfer-encoding-defaults
@acronym{MIME} のタイプに割り当てるエンコーディングです。この変数は、例
えば他の要件によってより安全なエンコーディングが強制されないときに、通常
使われます (電子署名されたメッセージは 7bit エンコーディングを必要としま
す)。通常の @acronym{MIME} エンコーディングの他に、
quoted-printable と base64 のうちで最も効率的な方を個々の場合に使うべき
であることを示す @code{qp-or-base64} を使うこともできます (訳
注: @code{qp-or-base64} の実際の動作は、quoted-printable と base64 の両
方でエンコードしてみて、サイズが小さくなる方を採用することです)。

@code{qp-or-base64} にはもう一つの効果があります。それ
は @acronym{MIME} のパートが MTA によって壊されないようにするために、長
い行を折り畳みます。@code{quoted-printable} と @code{base64} もそうです。

パートが受信したときのままの生の転送されたメッセージ (例えば、引数
に 2 を与えた @code{gnus-summary-mail-forward} によって作られるもの) で
あるか、@samp{text/*} タイプや @samp{message/*} ではない場合に、これが本
文のエンコーディグに影響を及ぼすことに注意してください。それらの場合でさ
え、@acronym{MML} の @code{encoding} タグを使って、メッセージ毎にそ
れで指定した値をこの変数より優先させることもできま
す (@pxref{MML Definition})。

@item mm-use-ultra-safe-encoding
@vindex mm-use-ultra-safe-encoding
これが非-@code{nil} である場合、本文に 76 文字よりも長い行や "From " で
始まる行があったら、それらのテキストのパートは quoted-printable でエンコー
ドされます。非-7bit エンコーディング (8bit, バイナリー) は一般に認められ
ていません。この変数を @code{nil} 以外の値に設定しておくことは、8bit を
通さない MTA か MDA がメッセージを改変してしまう確率を下げます。これは直
接に設定されるのではなく、他の関数によって (例えば、電子署名されるメッセー
ジをエンコードするときに) 必要に応じて束縛されるべきです。
@end table

@node Charset Translation
@section 文字セットの変換
@cindex charsets

@acronym{MML} を @acronym{MIME} に変換するときに、Emacs の内部で作られ
た @acronym{MIME} パートのそれぞれについて、適切な文字セットを選ばなけれ
ばなりません。

@vindex mail-parse-charset
@sc{mule} 機能が無い Emacs を走らせている場合だったら、この処理は単純で
す。パートがどんな非-@acronym{ASCII} (8-bit) 文字を含んでいても、
@code{mail-parse-charset} で与えられる @acronym{MIME} 文字セット (シンボ
ル) を使えば良いのです。(もっとも、この変数を直接に設定しないでください。
ディフォルトの文字セットを変更したい場合は、@acronym{MIME} メッセージを
処理するために使うパッケージの説明書を調べてください。例えば:
@pxref{Various Message Variables, ,いろいろなメッセージ変数, message-ja,
The Message Manual})。@acronym{ASCII} 文字セットしか無ければ、
US-ASCII が @acronym{MIME} 文字セットとして使われるのはもちろんです。

@cindex MULE
@cindex UTF-8
@cindex Unicode
@vindex mm-mime-mule-charset-alist
@sc{mule} 機能を備えた Emacs を走らせている場合は、ものごとは多少複雑に
なります。この場合は、パートで使われている @sc{mule} 文字セットのリスト
を取得し、Emacs 自身が提供するテーブルか、XEmacs のため
の @code{mm-mime-mule-charset-alist} 変数の値に基づいて、それら
の @sc{mule} 文字セットを @acronym{MIME} 文字セットに変換します。結果が
単一の @acronym{MIME} 文字セットだったら、それを使ってパートをエンコード
します。しかし、結果の @acronym{MIME} 文字セットのリストが二つ以上の要素
を含んでいる場合には、二つのことが起こり得ます。もしパートを UTF-8 でエ
ンコードすることが可能だったら、その文字セットを使います。(このため
に Emacs は @code{utf-8} coding system をサポートしていなければなりませ
ん。また、そのパートを構成するすべての文字に対応するものが、Unicode の定
義に存在していなければなりません。)  何らかの理由によって UTF-8 を利用で
きない場合、そのパートは、それぞれが単一の @acronym{MIME} 文字セットでエ
ンコードすることができるように、いくつかに分割されます。もっとも、パート
は行の境界でしか分割することができないので、単一の行をエンコードするため
に複数の @acronym{MIME} 文字セットが必要だとすると、そのパートをエンコー
ドすることは不可能です。

@sc{mule} 機能を備えた Emacs を走らせている場合、どの coding system を使
うかの優先順位は Emacs 自身から継承されます。これは、も
し Emacs が UTF-8 を優先するように設定されていると、それがメッセージのエ
ンコードに使われるということです。ただ
し @code{mm-coding-system-priorities} 変数の値を変えることによって、これ
を変更することはできます (@pxref{Encoding Customization})。

メッセージを作成するときに @acronym{MML} の @code{charset} タグを設定す
ることによって、使われる文字セットをそれにすることができます。

文字列のエンコーディング (quoted-printable, 8bit など) はここでの議論と
直交する概念です。それは @code{mm-body-charset-encoding-alist} 変数
と @code{mm-content-transfer-encoding-defaults} 変数によって制御されま
す (@pxref{Encoding Customization})。

@node Conversion
@section 変換

@findex mime-to-mml
@code{mime-to-mml} 関数を使って @acronym{MIME} メッセージ (マルチパート
でも可) を @acronym{MML} に変換することができます。これは現在のバッファー
にある @acronym{MIME} メッセージに作用して、@acronym{MIME} の境界
を @acronym{MML} の印付け (markup) で置き換えます。テキストではないパー
トの内容物は、そのバッファーに置かれる代わりに @acronym{MML} タグを介し
て参照される別のバッファーに置かれます。

@findex mml-to-mime
@code{mml-to-mime} 関数を使って、逆に @acronym{MML} メッセージ
を @acronym{MIME} に変換することができます。

これらの関数が行なうことはある意味で「不可逆」(lossy) です。
@code{mime-to-mml} を実行し、次に @code{mml-to-mime} を実行すると、元と
まったく同じメッセージには戻らないでしょう。ヘッダーの順序のようなどうで
も良いことが違ってしまうだけでなく、それぞれのヘッダーの内容も変化してし
まうかもしれません。例えば、元のメッセージが base64 でテキストをエンコー
ドしてあっても、@code{mml-to-mime} は quoted-printable を使うかもしれな
い、というようなことです。

しかし本質的には、これら二つは互いに逆関数であるべきです。結果として生成
されるメッセージの内容物が、同一でないにしても等価なままであるような。

@node Flowed text
@section 流動テキスト
@cindex format=flowed

Emacs @acronym{MIME} ライブラリーは、メッセージをエンコードするとき
は @code{use-hard-newlines} 変数 (@pxref{Hard and Soft Newlines, ,Hard
and Soft Newlines, emacs, Emacs Manual}) に従い、メッセージをデコードす
るときは Content-Type パラメーターの“format=flowed”を尊重します。

テキストをエンコードするとき、ソフト改行文字で終端されている各行
は、@code{use-hard-newlines} に関わらず
に @code{fill-flowed-encode-column} で決定される桁の後ろで折り畳まれて、
耳を揃えられ (filled され) ます。引用の印 (@samp{^>* ?}) は尊重されます。
その変数は、流動テキストをサポートしないクライアントにおけるテキストの見
え方を制御し、ディフォルトでは 66文字の後ろで折り畳みます。バッファーに
ハード改行文字が無ければ、流動 (flowed) テキストのためのエンコードは行な
いません。

バッファーに改行文字があるとき、流動テキストにエンコードすることを有効ま
たは無効にするために @code{mml-enable-flowed} 変数をカスタマイズできます。

流動 (flowed) テキストをデコードするとき、ソフト改行文字を持つ各行
は @code{fill-flowed-display-column} で決定される桁の後ろで折り畳まれて
耳を揃えられ (filled され) ます。ディフォルトでは @code{fill-column} の
後ろで折り畳みます。

@table @code
@item mm-fill-flowed
@vindex mm-fill-flowed
非-@code{nil} だったら、format=flowed の記事は流動的に表示されます。
@end table

@node Interface Functions
@chapter インターフェース関数
@cindex interface functions
@cindex @code{mail-parse}

@code{mail-parse} ライブラリーは、次の章で述べる実際の低レベルなライブラ
リーを抽象化したものです。

標準は変化するので、プログラムも新しい鋳型に適合するために変化しなければ
なりません。例えば RFC2045 は、パラメーターのリストにおい
て @acronym{ASCII} 文字だけを許容する @code{Content-Type} ヘッダーのため
の構文について述べています。RFC2231 は、複数行に渡って継続する単一のヘッ
ダーと非-@acronym{ASCII} 文字の構成を規定するための RFC2045 の構文につい
て詳しく記述しています。

これに対処する従来の方法は、単に新しい構文を解析するためにライブラリーの
関数を更新することでした。しかしながら、これは時には誤った行為です。場合
によっては、新しい構文と古い構文の両方を理解できるようにすることが重要か
もしれないし、ライブラリーが一つしか無い場合には、ライブラリーの古いバー
ジョンと新しいバージョンのどちらかを選ばなければなりません。

Emacs @acronym{MIME} ライブラリーは異なる方針で行くことにしました。これ
は、対応する標準に従って厳密に解析する一連の低レベルのライブラ
リー (@file{rfc2047.el}, @file{rfc2231.el} など) を定義します。とは言え、
正規のプログラムは、これらのライブラリーが直接に提供する関数ではなく、代
わりに @code{mail-parse} ライブラリーが提供する関数を使うべきです。この
ライブラリーにある関数は、最新の低レベルのライブラリーの、対応する関数へ
の単なる別名です。この構成を使うことによって、プログラムはそれらが使うこ
とができる首尾一貫したインターフェースを手に入れました。また、ライブラリー
の開発者は、新しい標準を扱うコードを自由に作成することができます。

以下の関数が、このライブラリーで定義されています:

@table @code
@item mail-header-parse-content-type
@findex mail-header-parse-content-type
@code{Content-Type} ヘッダーを解析して、以下の形式でリストを返します:

@lisp
("type/subtype"
 (attribute1 . value1)
 (attribute2 . value2)
 ...)
@end lisp

例です:

@example
(mail-header-parse-content-type
 "image/gif; name=\"b980912.gif\"")
@result{} ("image/gif" (name . "b980912.gif"))
@end example

@item mail-header-parse-content-disposition
@findex mail-header-parse-content-disposition
@code{Content-Disposition} ヘッダーを解析して、上記の関数と同じ形式のリ
ストを返します。

@item mail-content-type-get
@findex mail-content-type-get
上記の形式のリストと属性の二つのパラメーターを受け取り、その属性の値を返
します。

@example
(mail-content-type-get
 '("image/gif" (name . "b980912.gif")) 'name)
@result{} "b980912.gif"
@end example

@item mail-header-encode-parameter
@findex mail-header-encode-parameter
パラメーターに使う文字列を受け取り、それをエンコードしたものを返します。
これは @code{Content-Type} と @code{Content-Disposition} のようなヘッダー
に入れるパラメーターのために使われます。

@item mail-header-remove-comments
@findex mail-header-remove-comments
ヘッダーからコメントを取り除いたものを返します。

@example
(mail-header-remove-comments
 "Gnus/5.070027 (Pterodactyl Gnus v0.27) (Finnish Landrace)")
@result{} "Gnus/5.070027  "
@end example

@item mail-header-remove-whitespace
@findex mail-header-remove-whitespace
ヘッダーから“linear white space”を取り除きます。クォートされ
た ("..." で囲まれた) 文字列の中にある空白文字とコメントは保存されます。

訳注:“linear white space”とは一つ以上の空白文字のことで、その前に改行
文字を置いたものは、長いヘッダーを折り畳むときに使われます。

@example
(mail-header-remove-whitespace
 "image/gif; name=\"Name with spaces\"")
@result{} "image/gif;name=\"Name with spaces\""
@end example

@item mail-header-get-comment
@findex mail-header-get-comment
ヘッダーの最後のコメントを返します。

@example
(mail-header-get-comment
 "Gnus/5.070027 (Pterodactyl Gnus v0.27) (Finnish Landrace)")
@result{} "Finnish Landrace"
@end example

訳注: @samp{Finnish Landrace} は 1998年8月23日にリリースされた XEmacs
21.0-pre11 のコードネームです。まあ、どうでもいいことですが。

@item mail-header-parse-address
@findex mail-header-parse-address
アドレスを解析して、メールアドレスとプレーンテキストの名前を含むリストを
返します。

@example
(mail-header-parse-address
 "Hrvoje Niksic <hniksic@@srce.hr>")
@result{} ("hniksic@@srce.hr" . "Hrvoje Niksic")
@end example

@item mail-header-parse-addresses
@findex mail-header-parse-addresses
アドレスのリストを含んでいる文字列を解析して、上で述べたような要素のリス
トを返します。

@example
(mail-header-parse-addresses
 "Hrvoje Niksic <hniksic@@srce.hr>, Steinar Bang <sb@@metis.no>")
@result{} (("hniksic@@srce.hr" . "Hrvoje Niksic")
     ("sb@@metis.no" . "Steinar Bang"))
@end example

@item mail-header-parse-date
@findex mail-header-parse-date
日付の文字列を解析して、Emacs 形式の時刻を返します。

@item mail-narrow-to-head
@findex mail-narrow-to-head
バッファーをヘッダーの区域に狭めます。ポイントは狭められたバッファーの先
頭に置かれます。

@item mail-header-narrow-to-field
@findex mail-header-narrow-to-field
バッファーを現在位置の (単一の) ヘッダーに狭めます。複数行に渡って継続す
るヘッダーを理解します。

@item mail-header-fold-field
@findex mail-header-fold-field
現在位置のヘッダーを折り畳みます。

@item mail-header-unfold-field
@findex mail-header-unfold-field
現在位置のヘッダーの折り畳みを解除します。

@item mail-header-field-value
@findex mail-header-field-value
現在位置のフィールドの値を返します。

@item mail-encode-encoded-word-region
@findex mail-encode-encoded-word-region
領域にある @acronym{ASCII} 以外の語をエンコードします。例え
ば @samp{Naïve} は @samp{=?iso-8859-1?Q?Na=EFve?=} としてエンコードされ
ます。

@item mail-encode-encoded-word-buffer
@findex mail-encode-encoded-word-buffer
現在のバッファーにある @acronym{ASCII} 以外の語をエンコードします。この
関数は、ヘッダーの区域に狭められたメッセージで呼ばれることを意図していま
す。

@item mail-encode-encoded-word-string
@findex mail-encode-encoded-word-string
文字列に含まれているエンコードする必要がある語をエンコードして、結果を返
します。

@example
(mail-encode-encoded-word-string
 "This is naïve, baby")
@result{} "This is =?iso-8859-1?Q?na=EFve,?= baby"
@end example

@item mail-decode-encoded-word-region
@findex mail-decode-encoded-word-region
領域にあるエンコードされた語をデコードします。

@item mail-decode-encoded-word-string
@findex mail-decode-encoded-word-string
文字列に含まれているエンコードされた語をデコードして、結果を返します。

@example
(mail-decode-encoded-word-string
 "This is =?iso-8859-1?Q?na=EFve,?= baby")
@result{} "This is naïve, baby"
@end example
@end table

現在 @code{mail-parse} は @code{ietf-drums}, @code{rfc2047},
@code{rfc2045} および @code{rfc2231} を網羅して抽象化します。これらにつ
いて、次以降の章で説明します。

@node Basic Functions
@chapter 基本的な関数

この章は、下位の階層に位置していて、解析と処理を行なうための基本的な関数
について説明します。ここで扱うことは @code{From} 行の解析、ヘッダーの各
行にあるコメントの削除、エンコードされた語のデコード、時刻ヘッダーの解析
などです。上位階層の機能は最初の章 (@pxref{Decoding and Viewing}) で扱わ
れています。

@menu
* rfc2045::      @code{Content-Type} ヘッダーのエンコード
* rfc2231::      @code{Content-Type} ヘッダーの解析
* ietf-drums::   RFC822bis で定義されているメールヘッダーの処理
* rfc2047::      ヘッダーにある語のエンコードとデコード
* time-date::    日付の解析と時刻を操作する関数
* qp::           Quoted-Printable のエンコードとデコード
* base64::       Base64 のエンコードとデコード
* binhex::       Binhex のデコード
* uudecode::     Uuencode のデコード
* yenc::         Yenc のデコード
* rfc1843::      HZ-エンコードされたテキストのデコード
* mailcap::      パートの表示の仕方は @file{.mailcap} ファイルに明記されている
@end menu

訳注: RFC822bis == draft-ietf-drums-msg-fmt-09.txt

@node rfc2045
@section rfc2045

RFC2045 は「主要な」@acronym{MIME} の文献です。ならば、そこにはたくさん
の実装があるだろうと想像するでしょう。しかし、ほとんどの詳細な実装はその
後の RFC に委ねられていて、そこにはありません。

と言うわけで @file{rfc2045.el} にはたった一つの関数があります:

@table @code
@item rfc2045-encode-string
@findex rfc2045-encode-string
パラメーターと値を受け取り、@samp{PARAM=VALUE} の形式の文字列を返します。
@var{value} に安全ではない文字があったらクォートされ ("..." で囲まれ) ま
す。
@end table

@node rfc2231
@section rfc2231

RFC2231 は @code{Content-Type} と @code{Content-Disposition} ヘッダーの
構文を定義します。その小粋な名称は「@acronym{MIME} パラメーター値と符号
化単語拡張文字セット・言語そして継続」です。

一口で言うと、それらのヘッダーはこんなふうです:

@example
Content-Type: application/x-stuff;
 title*0*=us-ascii'en'This%20is%20even%20more%20;
 title*1*=%2A%2A%2Afun%2A%2A%2A%20;
 title*2="isn't it!"
@end example

普通はこんなにひどくないですが。

以下の関数がこのライブラリーで定義されています:

@table @code
@item rfc2231-parse-string
@findex rfc2231-parse-string
@code{Content-Type} ヘッダーを解析して、その要素を表すリストを返します。

@example
(rfc2231-parse-string
 "application/x-stuff;
 title*0*=us-ascii'en'This%20is%20even%20more%20;
 title*1*=%2A%2A%2Afun%2A%2A%2A%20;
 title*2=\"isn't it!\"")
@result{} ("application/x-stuff"
    (title . "This is even more ***fun*** isn't it!"))
@end example

@item rfc2231-get-value
@findex rfc2231-get-value
上記の形式のリストの一つを受け取り、指定された属性の値を返します。

@item rfc2231-encode-string
@findex rfc2231-encode-string
@code{Content-Type} と @code{Content-Disposition} のようなヘッダーに入れ
るパラメーターをエンコードします。
@end table

@node ietf-drums
@section ietf-drums

@dfn{drums} は RFC822 の置き換え作業をしている IETF の作業部会です。

このライブラリーによって提供される関数は次の通りです:

@table @code
@item ietf-drums-remove-comments
@findex ietf-drums-remove-comments
引数からコメントを取り除いて、結果を返します。

@item ietf-drums-remove-whitespace
@findex ietf-drums-remove-whitespace
文字列から“linear white space”を取り除き、結果を返します。クォートされ
た ("..." で囲まれた) 文字列の中にある空白文字とコメントには手を付けませ
ん。

訳注:“linear white space”とは一つ以上の空白文字のことで、その前に改行
文字を置いたものは、長いヘッダーを折り畳むときに使われます。

@item ietf-drums-get-comment
@findex ietf-drums-get-comment
文字列の最後尾にあるコメントを返します。

@item ietf-drums-parse-address
@findex ietf-drums-parse-address
アドレスの文字列を解析して、メールアドレスとプレーンテキストの名前を含む
リストを返します。

@item ietf-drums-parse-addresses
@findex ietf-drums-parse-addresses
カンマで区切られた複数のアドレスを含んでいる文字列を解析して、メールアド
レスとプレーンテキストの対を含むリストを返します。

@item ietf-drums-parse-date
@findex ietf-drums-parse-date
日付の文字列を解析して、Emacs 形式の時刻を返します。

@item ietf-drums-narrow-to-header
@findex ietf-drums-narrow-to-header
現在のバッファーをヘッダーの区域に狭めます。
@end table

@node rfc2047
@section rfc2047

RFC2047 (メッセージ・ヘッダーでの非-@acronym{ASCII} テキスト拡張) は、ヘッ
ダーにある非-@acronym{ASCII} テキストをどのようにエンコードするかを定め
ています。実際これは少々複雑になるので、このライブラリーが行なうことを調
整するために、多くの変数が必要です。

以下の変数が調整可能です:

@table @code
@item rfc2047-header-encoding-alist
@vindex rfc2047-header-encoding-alist
これはヘッダーとエンコーディング・タイプの対を収めた連想リストです。その
主な目的は、ある種のヘッダーがエンコードされないようにすることです。

鍵 (訳注: 各要素の @code{car} 項) はヘッダーに合致する正規表現
か @code{t} のどちらかです。

値 (訳注: 各要素の @code{cdr} 項) は @code{nil} にすることができて、その
場合、鍵に相当するヘッダーはエンコードされません。@code{mime} はそれらを
エンコードすることを意味しますが、@code{address-mime} の場合はヘッダーが
アドレスを含んでいることを想定して注意深くエンコードします。

@item rfc2047-charset-encoding-alist
@vindex rfc2047-charset-encoding-alist
RFC2047 は二つのエンコーディングの形式を定めています。一つは @code{Q}
(Quoted-Printable のようなエンコーディング) で、もう一つは @code{B}
(base64) です。この連想リストは、ある文字セットに対してどのエンコーディ
ングを使うかを規定します。

@item rfc2047-encode-function-alist
@vindex rfc2047-encode-function-alist
これはエンコーディングとそれを実施するための関数の対を収めた連想リストで
す。エンコーディングとは @code{Q}, @code{B} および @code{nil} のことです。

@item rfc2047-encoded-word-regexp
@vindex rfc2047-encoded-word-regexp
デコードを行なうとき、このライブラリーはこの正規表現に合致するものを探し
ます。

@item rfc2047-encoded-word-regexp-loose
@vindex rfc2047-encoded-word-regexp-loose
@code{rfc2047-encoded-word-regexp} の Q エンコーディングのための正規表現
を緩慢にしたバージョンです。

@item rfc2047-encode-encoded-words
@vindex rfc2047-encode-encoded-words
エンコード済みの語 (例えば @samp{=?us-ascii?q?hello?=}) を再度エンコード
するかどうかを決めるブール変数です。
@code{rfc2047-encoded-word-regexp} がそのような語を探すために使われます。

@item rfc2047-allow-irregular-q-encoded-words
@vindex rfc2047-allow-irregular-q-encoded-words
いい加減に Q でエンコードされた語 (例え
ば @samp{=?us-ascii?q?hello??=}) をデコードすべきかどうかを決めるブール
変数です。それが @code{nil} 以外の値ならば、エンコードされた語を探すため
に @code{rfc2047-encoded-word-regexp} に代わっ
て @code{rfc2047-encoded-word-regexp-loose} が使われます。
@end table

以上は変数でした。次は関数です:

@table @code
@item rfc2047-narrow-to-field
@findex rfc2047-narrow-to-field
バッファーを現在の行のヘッダーに狭めます。

@item rfc2047-encode-message-header
@findex rfc2047-encode-message-header
メッセージのヘッダーに狭められたバッファーで使わなければなりません。
@code{rfc2047-header-encoding-alist} に従ってエンコードを行ないます。

@item rfc2047-encode-region
@findex rfc2047-encode-region
指定された領域にあるすべてのエンコード可能な語をエンコードします。

@item rfc2047-encode-string
@findex rfc2047-encode-string
文字列をエンコードして結果を返します。

@item rfc2047-decode-region
@findex rfc2047-decode-region
領域にあるエンコードされた語をデコードします。

@item rfc2047-decode-string
@findex rfc2047-decode-string
文字列をデコードして結果を返します。

@item rfc2047-encode-parameter
@findex rfc2047-encode-parameter
パラメーターを RFC2047 ふうの様式でエンコードします。これは関
数 @code{rfc2231-encode-string} の代用です。それが標準なのですが、多くの
メイラーがサポートしません。@xref{rfc2231}.
@end table

@node time-date
@section time-date

本当は @acronym{MIME} ライブラリーの一部ではありませんが、ここで説明する
ことは都合が良いのです。これは日付ヘッダーの解析と時刻の操作を扱います。
(もっとも四次元立方体は使いません。ごめんなさい。)

これらの関数は五つの形式 (時刻の文字列、Emacs 形式の時刻、デコードされた
時刻のリスト、秒数、および日数) の間で変換を行ないます。

時刻/日付/秒数/日数の相互変換の例です:

@example
(parse-time-string "Sat Sep 12 12:21:54 1998 +0200")
@result{} (54 21 12 12 9 1998 6 -1 7200)

(date-to-time "Sat Sep 12 12:21:54 1998 +0200")
@result{} (13818 19266)

(parse-iso8601-time-string "1998-09-12T12:21:54+0200")
@result{} (13818 19266)

(float-time '(13818 19266))
@result{} 905595714.0

(seconds-to-time 905595714.0)
@result{} (13818 19266 0 0)

(time-to-days '(13818 19266))
@result{} 729644

(days-to-time 729644)
@result{} (961933 512)

(time-since '(13818 19266))
@result{} (6797 9607 984839 247000)

(time-less-p '(13818 19266) '(13818 19145))
@result{} nil

(time-subtract '(13818 19266) '(13818 19145))
@result{} (0 121)

(days-between "Sat Sep 12 12:21:54 1998 +0200"
              "Sat Sep 07 12:21:54 1998 +0200")
@result{} 5

(date-leap-year-p 2000)
@result{} t

(time-to-day-in-year '(13818 19266))
@result{} 255

(time-to-number-of-days
 (time-since
  (date-to-time "Mon, 01 Jan 2001 02:22:26 GMT")))
@result{} 4314.095589286675
@end example

あと、@code{safe-date-to-time} というものもあります。これ
は @code{date-to-time} と同じことをしますが、日付が構文的に不完全だった
場合にゼロ時刻を返します。

五つのデータは以下のように表現されます:

@table @var
@item date
RFC822 (または類似の) 形式の日付の文字列。例: @code{"Sat Sep 12 12:21:54
1998 +0200"}

@item time
Emacs の内部形式の時刻。例: @code{(13818 26466 0 0)}

@item seconds
Emacs の内部形式の時刻を浮動小数で表したもの。例: @code{905595714.0}

@item days
00000101 を基点とする経過日数を整数で表したもの。例: @code{729644}

訳注: 00000101 が何を意味するのか不明ですが、ソースコードによればグレゴ
リオ歴・紀元前 (BC ではなく BCE の方の) 0001年12月31日のことらしいです。

@item decoded time
デコードされた時刻のリスト。例: @code{(54 21 12 12 9 1998 6 t 7200)}
@end table

上記のすべての例は、同じ時を表しています。

関数には以下のようなものがあります:

@table @code
@item date-to-time
日付を受け取って時刻を返します。

@item float-time
時刻を受け取って秒数を返します。(これは組み込み関数です。)

@item seconds-to-time
秒数を受け取って時刻を返します。

@item time-to-days
時刻を受け取って日数を返します。

@item days-to-time
日数を受け取って時刻を返します。

@item date-to-day
日付を受け取って日数を返します。

@item time-to-number-of-days
時刻を受け取って、それが表している日数を返します。

@item safe-date-to-time
日付を受け取って時刻を返します。日付が構文的に正しくなかったら「ゼロ」時
刻を返します。

@item time-less-p
二つの時刻を受け取って、一つ目が二つ目より少ない (すなわち早い) かどうか
を示します。(これは組み込み関数です。)

@item time-since
時刻を受け取って、その時刻からどれほど時間が経過したかを示します。

@item time-subtract
二つの時刻を受け取って、一つ目から二つ目を減算します。すなわち、二つの時
刻の間の時間差を返します。(これは組み込み関数です。)

@item days-between
二つの日付を受け取って、それら二つの日付の間の日数を返します。

@item date-leap-year-p
年の数値を受け取って、それがうるう年かどうかを示します。

@item time-to-day-in-year
時刻を受け取って、その年の元日から経過した日数を返します。
@end table

@node qp
@section qp

このライブラリーは Quoted-Printable によるテキストのデコードとエンコード
を扱います。

非常に手短かに説明すれば、qp エンコーディングはすべての 8-bit 文字 (と多
くの制御文字) を @samp{=EF} のようなもの (イコール記号と、それに続
く 16進数にエンコードされたバイト) に変換することです。

このライブラリーでは、以下の関数が定義されています:

@table @code
@item quoted-printable-decode-region
@findex quoted-printable-decode-region
指定された領域にあるすべてのエンコードされたテキストを QP-デコードします。

@item quoted-printable-decode-string
@findex quoted-printable-decode-string
文字列に含まれている QP-エンコードされたテキストをデコードして、結果を返
します。

@item quoted-printable-encode-region
@findex quoted-printable-encode-region
指定された領域にあるすべてのエンコード可能な文字を QP-エンコードします。
省略できる第三引数 @var{fold} は、長い行を折り畳むかどうかを指定します。
(ここで「長い」は 72桁を越えるもののことを意味します。)

@item quoted-printable-encode-string
@findex quoted-printable-encode-string
文字列に含まれているすべてのエンコード可能な文字を QP-エンコードして、結
果を返します。
@end table

@node base64
@section base64
@cindex base64

Base64 は 3-バイトを 4-バイトにエンコードします。そのため、約 33% サイズ
が増えます。アルファベットだけでエンコードするので、伝送される途中で出会
うかもしれない障害に対してとても耐久力があります。

以下の関数がこのライブラリーによって定義されています:

@table @code
@item base64-encode-region
@findex base64-encode-region
選択された領域を base64 でエンコードして、エンコードされたテキストの長さ
を返します。省略できる第三引数 @var{no-line-break} は、長い行をより短い
行に折り畳まないことを指図します。

@item base64-encode-string
@findex base64-encode-string
文字列を base64 でエンコードして結果を返します。

@item base64-decode-region
@findex base64-decode-region
選択された領域を base64 でデコードして、デコードされたテキストの長さを返
します。領域がデコード可能でなかったら、@code{nil} を返すだけでバッファー
は変更しません。

@item base64-decode-string
@findex base64-decode-string
文字列を base64 でデコードして結果を返します。文字列がデコード可能でなかっ
たら @code{nil} を返します。
@end table

@node binhex
@section binhex
@cindex binhex
@cindex Apple
@cindex Macintosh

@code{binhex} はマッキントッシュの環境に源を発するエンコーディングです。
以下の関数がそれらを扱うために供給されています:

@table @code
@item binhex-decode-region
@findex binhex-decode-region
領域にあるエンコードされたテキストをデコードします。第三パラメーターが与
えられると、@code{binhex} のヘッダーをデコードしてファイル名を返すことだ
けをします。
@end table

@node uudecode
@section uudecode
@cindex uuencode
@cindex uudecode

@code{base64} がメールの世界を支配しているものの、おそら
く @code{uuencode} はまだ Usenet で使われているものの中で、最も普及して
いるバイナリーのエンコーディングです。

以下の関数がこのパッケージによって供給されています:

@table @code
@item uudecode-decode-region
@findex uudecode-decode-region
領域にあるテキストをデコードします。
@end table

@node yenc
@section yenc
@cindex yenc

@code{yenc} は Usenet でバイナリーをエンコードするために使われます。以下
の関数がこのパッケージによって供給されています:

@table @code
@item yenc-decode-region
@findex yenc-decode-region
領域にあるエンコードされたテキストをデコードします。
@end table

@node rfc1843
@section rfc1843
@cindex rfc1843
@cindex HZ
@cindex Chinese

RFC1843 はメッセージにおける中国語と @acronym{ASCII} 文字の混在文を扱い
ます。本質的には、RFC1843 は以下のように @acronym{ASCII} と中国語を切り
替えるものです:

@example
This sentence is in @acronym{ASCII}.
The next sentence is in GB.~@{<:Ky2;S@{#,NpJ)l6HK!#~@}Bye.
@end example

まったく単純で、中国では広く使われています。

このエンコーディングを扱うために、以下の関数を使うことができます:

@table @code
@item rfc1843-decode-region
領域にある HZ-エンコードされたテキストをデコードします。

@item rfc1843-decode-string
HZ-エンコードされた文字列をデコードして結果を返します。
@end table

@node mailcap
@section mailcap

@file{~/.mailcap} ファイルはほとんどの @acronym{MIME} に対応したメッセー
ジ・ハンドラーによって解析されます。それには、各要素がどのように表示され
るものと想定されているかを記述します。ファイルの例です:

@example
image/*; gimp -8 %s
audio/wav; wavplayer %s
application/msword; catdoc %s ; copiousoutput ; nametemplate=%s.doc
@end example

これは、すべての画像ファイルは @code{gimp} で表示されるべきであること、
WAVE 音響ファイルは @code{wavplayer} で再生されるべきであること、そし
て MS-WORD ファイルは @code{catdoc} によってインライン表示されるべきであ
ると言っています。

@code{mailcap} ライブラリーはこのファイルを解析して、合致するタイプのた
めの関数を提供します。

@table @code
@item mailcap-mime-data
@vindex mailcap-mime-data
この変数は、バックアップされた (訳注: mailcap ファイルの内容を解析し
て Emacs が扱い易い形式にした) 表示規則を含んでいる、連想リストの連想リ
ストです。

@item mailcap-user-mime-data
@vindex mailcap-user-mime-data
カスタマイズ可能なビューワーのリストで、@code{mailcap-mime-data} より優
先します。
@end table

インターフェース関数:

@table @code
@item mailcap-parse-mailcaps
@findex mailcap-parse-mailcaps
@vindex mailcap-prefer-mailcap-viewers
@file{~/.mailcap} ファイルを解析します。

@item mailcap-mime-info
引数として @acronym{MIME} タイプを受け取り、合致するビューワーを返します。

どのビューワーが選択されるかは、変
数 @code{mailcap-prefer-mailcap-viewers} が制御します。ディフォルト
の @code{nil} ではない値では、システム共通のものや Emacs が提供するビュー
ワーの設定より @file{~/.mailcap} の設定を優先します。

もし @code{nil} だったら Emacs が提供するビューワーの設定が優先されます。
さらに、システム共通のものか個人的な設定であるかとは無関係に、最も明確な
ビューワーが、より明確でない設定より優先されます。これ
は @file{~/.mailcap} における @samp{image/*} の設定より
も @file{/etc/mailcap} における @samp{image/gif} の方が優先されるという
ことです。
@end table

@node Standards
@chapter 標準

Emacs @acronym{MIME} ライブラリーは、(やや) 多くの RFC、ドラフトおよび標
準ドキュメントに従って、様々な要素を取り扱います。この章では関連するもの
を列挙します。これらはすべて @uref{http://quimby.gnus.org/notes/} から取
得可能です。

@table @dfn
@item RFC822
@itemx STD11
ARPA インターネットテキストメッセージの書式のための標準。

@item RFC1036
USENET メッセージ交換のための標準。

@item RFC2045
インターネットメッセージの本文の書式。

@item RFC2046
メディアタイプ。

@item RFC2047
メッセージヘッダーでの非-@acronym{ASCII} テキスト拡張。

@item RFC2048
登録手続。

@item RFC2049
適合基準と事例。

@item RFC2231
@acronym{MIME} パラメーター値とエンコードされた単語の拡張: 文字セット、
言語および継続。

@item RFC1843
HZ--中文および @acronym{ASCII} 文字が任意に混在するファイルを交換するた
めのデータ形式。

@item draft-ietf-drums-msg-fmt-05.txt
RFC822 の後継のための草稿。

@item RFC2112
@acronym{MIME} Multipart/Related Content-type。

@item RFC1892
メールシステムの管理メッセージをリポートするための Multipart/Report
Content Type。

@item RFC2183
インターネットメッセージの情報通信表現: Content-Disposition ヘッダーフィー
ルド。

@item RFC2646
流動テキストのための text/plain 書式パラメーター。
@end table

@node GNU Free Documentation License
@chapter GNU フリー文書利用許諾契約書

訳注: @uref{http://www.opensource.jp/fdl/fdl.ja.html.euc-jp,
非公式な日本語訳} があります。

@include doclicense.texi

@node Index
@chapter Index
@printindex cp

@bye

@c Local Variables:
@c fill-column: 72
@c End:

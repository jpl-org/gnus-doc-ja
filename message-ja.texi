\input texinfo                  @c -*-texinfo-*-

@include gnus-overrides-ja.texi

@setfilename message-ja
@settitle Message Manual
@synindex fn cp
@synindex vr cp
@synindex pg cp
@iftex
@firstparagraphindent insert
@end iftex
@copying
This file documents Message, the Emacs message composition mode.

このファイルは Emacs のメッセージ作成モードである Message に関する説明文
書です。

Copyright @copyright{} 1996-2012 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''.

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.3 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分は指定しません。“A GNU Manual”は表表紙
テキスト、以下の (a) は裏表紙テキストです。この利用許諾契約書の複写は
「GNU フリー文書利用許諾契約書」という章に含まれています。

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom.''

(a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を複製したり変更す
る自由があります。FSF からの複写の購入は GNU の開発とソフトウェアの自由
の促進を支援します。」
@end quotation
@end copying

@dircategory Emacs network features
@direntry
* Message-ja: (message-ja).     Mail and news composition mode that
                                  goes with Gnus (Japanese).
@end direntry
@iftex
@finalout
@end iftex

@titlepage
@ifset WEBHACKDEVEL
@title Message Manual (DEVELOPMENT VERSION)
@end ifset
@ifclear WEBHACKDEVEL
@title Message Manual
@end ifclear

@author by Lars Magne Ingebrigtsen
@page

@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@summarycontents
@contents

@node Top
@top Message

@ifnottex
@insertcopying
@end ifnottex

Gnus のすべてのメッセージの作成 (メールとニュースの両方) は、メッセージ
モードのバッファーで行ないます。

@menu
* Interface::         メッセージバッファーの設定
* Commands::          メッセージモードのバッファーで実行できる命令
* Variables::         メッセージバッファーのカスタマイズ
* Compatibility::     メッセージを下位互換にする
* Appendices::        もっと技術的なこと
* GNU Free Documentation License:: この文書の利用許諾契約書
* Index::             変数、関数、概念の索引
* Key Index::         メッセージモードのキーの一覧
@end menu

Message は Gnus とともに配布されます。このマニュアルに対応する Gnus の版
は Ma Gnus v0.4 です。

@node Interface
@chapter インターフェース

プログラム (または人) がメッセージに反応したいとき---返答、フォローアッ
プ、転送、取り消しをしたいとき---そのプログラム (または人) はちょうどそ
のメッセージがあるバッファーにポイントを置いて、必要な命令を呼び出すはず
です。すると @code{Message} は、適切なヘッダーで満たした新し
い @code{message} モードのバッファーを出現させてくれるので、利用者はメッ
セージを送る前にそれを編集することができます。

@menu
* New Mail Message::     真新しいメールメッセージを編集する
* New News Message::     真新しいニュースメッセージを編集する
* Reply::                メールで返答する
* Wide Reply::           すべての人たちにメールで応答する
* Followup::             ニュースでフォローアップする
* Canceling News::       ニュース記事を取り消す
* Superseding::          メッセージを置き換える
* Forwarding::           メッセージをニュースまたはメールで転送する
* Resending::            メールメッセージを再送する
* Bouncing::             弾かれたメールメッセージを再送する
* Mailing Lists::        メーリングリストにメールを送る
@end menu

Message モードのツールバーをカスタマイズすることができます。@kbd{M-x
customize-apropos RET message-tool-bar} を試してみてください。この機能を
利用できるのは Emacs だけですが。

@node New Mail Message
@section 新しいメールメッセージ

@findex message-mail
@code{message-mail} 命令は、新しいメッセージバッファーを出現させます。

二つの省略可能な引数が受け付けられます: 最初のものは @code{To} ヘッダー
として、二番目は @code{Subject} ヘッダーとして使われます。もしこれら
が @code{nil} だったら、それらの二つのヘッダーは空になります。

@node New News Message
@section 新しいニュースメッセージ

@findex message-news
@code{message-news} 命令は、新しいメッセージバッファーを出現させます。

この関数は二つの省略可能な引数を受け付けます。最初のもの
は @code{Newsgroups} ヘッダーとして、二つ目のものは @code{Subject} ヘッ
ダーとして使われます。もしこれらが @code{nil} だったら、それらの二つのヘッ
ダーは空になります。

@node Reply
@section 返答

@findex message-reply
@code{message-reply} 関数は、現在のバッファーにあるメッセージへの返答の
メッセージバッファーを出現させます。

@vindex message-reply-to-function
Message は返答がどこに行くか (@pxref{Responses}) を標準の方法で決定しま
すが、@code{message-reply-to-function} 変数をいじくることによって、あな
たの必要に応じてその振る舞いを変えることができます。

@code{From} の代わりに @code{Sender} に返答を送りたいのであれば、このよ
うなことができます:

@lisp
(setq message-reply-to-function
      (lambda ()
       (cond ((equal (mail-fetch-field "from") "somebody")
               (list (cons 'To (mail-fetch-field "sender"))))
             (t
              nil))))
@end lisp

この関数は、返答しようとする記事がヘッダー部分に狭められたバッファーで呼
ばれます。

ご覧のように、この関数はリストを返さなければなりません。この場合、To ヘッ
ダーがそうなるべきだと判断すれば @code{((To . "Whom"))} を返します。そう
でなければ単に @code{nil} を返すだけで、To ヘッダーを決定する標準の方法
が使われるでしょう。

リストのそれぞれの要素は cons セルです。@sc{car} はヘッダーの名前 (例え
ば @code{Cc}) で、@sc{cdr} はヘッダーの値 (例え
ば @samp{larsi@@ifi.uio.no}) です。これらすべてのヘッダーは、送出される
メールのヘッダーに挿入されます。

@node Wide Reply
@section 広い返答

@findex message-wide-reply
@code{message-wide-reply} は、現在のバッファーにあるメッセージへの広い返
答のメッセージバッファーを出現させます。「広い返答」とは @code{To}、
@code{From} (または @code{Reply-to}) および @code{Cc} ヘッダーに挙げられ
ているすべての人たちに届く返答です。

@vindex message-wide-reply-to-function
Message は返答がどこに行くかを決定するために標準の方法を使いますが、
@code{message-wide-reply-to-function} をいじくることによって、振る舞いを
あなたの必要に合うように変更することができます。それ
は @code{message-reply-to-function} と同じやり方で使われま
す (@pxref{Reply})。

@vindex message-dont-reply-to-names
正規表現 (または正規表現のリスト) @code{message-dont-reply-to-names} に
合致するアドレスは @code{Cc} ヘッダーから取り除かれます。@code{nil} にす
ると、あなたの名前だけが取り除かれます。

@vindex message-prune-recipient-rules
@code{message-prune-recipient-rules} は、広い返答をするときに特定のアド
レスを取り除くために使います。重複したアドレスのようなものを削除するため
に使うという意味です。これはリストのリストです。最初の要素は、ある規則を
適用するための、特定のアドレスに合致する正規表現です。そして 2つ目は、取
り除くべきアドレスに合致するための、最初の正規表現に基づいて拡張される正
規表現です。

と、説明はややこしいのですが、使うのは簡単です。

例えば @samp{foo@@example.org} からメールを受け取ったのだけれど、
Cc のリストに実は同じ人の @samp{foo@@zot.example.org} が含まれていると、
広い返答はそれら両方のアドレス宛てに出て行ってしまうでしょう。

これを避けるには、以下のようなことをすれば良いのです:

@lisp
(setq message-prune-recipient-rules
      '(("^\\([^@@]+\\)@@\\(.*\\)" "\\1@@.*[.]\\2")))
@end lisp

例えばもし、@samp{cvs@@example.org} からのメッセージに対するすべての広い
返答がそのアドレスだけに行き、他には行かないようにしたい (つまり受取人の
リストに @samp{cvs@@example.org} があったら、他のすべての受取人を宛先か
ら除外したい) のであれば:

@lisp
(setq message-prune-recipient-rules
      '(("cvs@@example.org" ".")))
@end lisp

@vindex message-wide-reply-confirm-recipients
@code{message-wide-reply-confirm-recipients} が非-@code{nil} だったら、
複数の受取人に返答したいかどうかの確認を求められます。ディフォルト
は @code{nil} です。

@node Followup
@section フォローアップ

@findex message-followup
@code{message-followup} 命令は、現在のバッファーにあるメッセージにフォロー
アップするためのメッセージバッファーを出現させます。

@vindex message-followup-to-function
Message はフォローアップがどこに行くかを標準の方法を使って決定しますが、
@code{message-followup-to-function} をいじくることによって、あなたの必要
に合うように振る舞いを変更することができます。それ
は @code{message-reply-to-function} と同じやり方で使われま
す (@pxref{Reply})。

@vindex message-use-followup-to
@code{message-use-followup-to} 変数は @code{Followup-To} ヘッダーに関し
て何をするか (訳注: To ヘッダーをどうやって決定するか) を指定します。そ
れが @code{use} だったら、いつもその値を使います。もし @code{ask} だった
ら (これがディフォルトです)、その値を使うかどうかを尋ねます。も
し @code{t} だったら、その値が (文字通り) @samp{poster} でない限り、その
値を使います (訳注: @code{message-use-followup-to} の値が @code{t} で、
@code{Followup-To} ヘッダーの値が @samp{poster} だったら、それを使うかど
うかを尋ねます。なお、実際に To ヘッダーに使われるのは、
@code{Mail-Reply-To}、@code{Reply-To} および @code{From} ヘッダーの中で、
最初に見つかったメールアドレスです)。@code{nil} であれば、値を使いません。

@node Canceling News
@section ニュースを取り消す

@findex message-cancel-news
@code{message-cancel-news} 命令は、現在のバッファーにある記事を取り消し
ます。

@vindex message-cancel-message
@code{message-cancel-message} の値が取り消し記事の本文に挿入されます。ディ
フォルトは @samp{I am canceling my own article.} です。

@cindex Cancel Locks
@vindex message-insert-canlock
@cindex canlock
Message がニュース記事をポストするとき、ディフォルト
で @code{Cancel-Lock} ヘッダーを挿入します。これはあなた自身が書いたメーッ
セージをあなただけが取り消すことができることを保証する暗号化されたヘッダー
で、すぐれものです。欠点は、@file{.emacs} ファイル (Gnus が秘密の cancel
lock パスワード (最初にこの機能を使うときに自動的に生成されます) を格納
する場所) をなくしてしまうと、メッセージの取り消しができなくなってしまう
ことです。自分でパスワードを管理したいならば、以下のようなもの
を @file{~/.gnus.el} ファイルに入れてください:

@lisp
(setq canlock-password "geheimnis"
      canlock-password-for-verify canlock-password)
@end lisp

そのヘッダーを挿入するかどうかは、@code{message-insert-canlock} 変数によっ
て制御されます。

まだ多くのニュースサーバーが @code{Cancel-Lock} ヘッダーを重要視していま
せんが、将来は変わることが期待されます。

@node Superseding
@section ニュース記事の置き換え

@findex message-supersede
@code{message-supersede} 命令は、現在のバッファーにあるメッセージを置き
換えるためのメッセージバッファーを出現させます。

@vindex message-ignored-supersedes-headers
@code{message-ignored-supersedes-headers} に合致するヘッダーは新しいメッ
セージバッファーを出現させる前に取り除かれます。ディフォルトは@*
@samp{^Path:\\|^Date\\|^NNTP-Posting-Host:\\|^Xref:\\|^Lines:\\|@*
^Received:\\|^X-From-Line:\\|^X-Trace:\\|^X-Complaints-To:\\|@*
Return-Path:\\|^Supersedes:\\|^NNTP-Posting-Date:\\|^X-Trace:\\|@*
^X-Complaints-To:\\|^Cancel-Lock:\\|^Cancel-Key:\\|^X-Hashcash:\\|@*
^X-Payment:\\|^Approved:} です。

@node Forwarding
@section 転送

@findex message-forward
@code{message-forward} 命令は、現在のバッファーにあるメッセージを転送す
るためのメッセージバッファーを出現させます。接頭引数が与えられると、ニュー
スを使って転送します。

@table @code
@item message-forward-ignored-headers
@vindex message-forward-ignored-headers
この正規表現に合致するすべてのヘッダーが、転送されるメッセージから削除さ
れます。

@item message-make-forward-subject-function
@vindex message-make-forward-subject-function
転送されるメッセージの、表題ヘッダーを作るために呼ばれる関数のリストです。
前の関数で作られた表題は、続くそれぞれの関数に渡されます。

提供されている関数は次の通りです:

@table @code
@item message-forward-subject-author-subject
@findex message-forward-subject-author-subject
記事の出どころ (著者かニュースグループ) を、括弧 ([...]) で囲んで表題の
前に付けます。

@item message-forward-subject-fwd
記事の表題の前に @samp{Fwd:} を置きます。
@end table

@item message-wash-forwarded-subjects
@vindex message-wash-forwarded-subjects
この変数が @code{t} だったら、以前に転送されたことを示す痕
跡 (@samp{Fwd:}, @samp{Re:}, @samp{(fwd)} のようなもの) を、新しい表題を
組み立てる前にはぎ取ります。ディフォルト値は @code{nil} です。

@item message-forward-as-mime
@vindex message-forward-as-mime
この変数が @code{t} (ディフォルト) だったら、転送されるメッセージ
は @acronym{MIME} RFC822 パートとして埋め込まれます。@code{nil} だった場
合は、以前に @acronym{MIME} に対応していなかった Gnus がしたように、転送
されるメッセージのコピーが、ただ単に新しいメッセージに埋め込まれます。

@item message-forward-before-signature
@vindex message-forward-before-signature
非-@code{nil} だったら署名の前に、それ以外だったら後に、転送するメッセー
ジを置きます。
@end table

@node Resending
@section 再送

@findex message-resend
@code{message-resend} 命令は、利用者にアドレスを入力することを要求して、
現在のバッファーにあるメッセージをそのアドレスに再送します。

@vindex message-ignored-resent-headers
正規表現 @code{message-ignored-resent-headers} に合致するヘッダーは、メッ
セージを送る前に取り除かれます。

@node Bouncing
@section 弾かれたメールメッセージ

@findex message-bounce
@code{message-bounce} 命令は、もし現在のバッファーに弾かれたメールメッセー
ジがあったら、弾かれたことの情報を取り除いたメッセージバッファーを出現さ
せます。「弾かれたメッセージ」とは、一般には @code{mailer-daemon} から配
送不可として突き返されたメールです。

@vindex message-ignored-bounced-headers
正規表現 @code{message-ignored-bounced-headers} に合致するヘッダーは、バッ
ファーを出現させる前に取り除かれます。ディフォルト
は @samp{^\\(Received\\|Return-Path\\|Delivered-To\\):} です。

@node Mailing Lists
@section メーリングリスト

@cindex Mail-Followup-To
メーリングリストに投稿する際に、その投稿に対するフォローアップ記事を指定
した場所に直接送ってもらいたいことがあります。Mail-Followup-To (MFT) は
まさにこれを可能にするために作られました。これが役に立つ場合の例を三つ:

@itemize @bullet
@item
メーリングリストに投稿する人は、投稿した人ではなく、メーリングリストだけ
に返答を送るべきであることを、MFT を使って表現することができます。これは、
投稿者がすでにそのメーリングリストを購読している場合が該当します。

@item
メーリングリストに投稿する人は、メーリングリストだけでなく投稿した人にも
返答を送るべきであることを、MFT を使って表現することができます。これは、
投稿者がそのメーリングリストを購読していない場合が該当します。

@item
メッセージが複数のメーリングリストに投稿されている場合に、それ以降の議論
を一つのメーリングリストだけで行なうことを指定するためにも MFT を使うこ
とができます。議論がいくつかのメーリングリストで行なわれてしまうとばらば
らになりやすいし、フォローするのが難しくなってしまいますから。
@end itemize

Gnus は他の人のメッセージにある MFT ヘッダーを尊重します (すなわち、だれ
か別の人の投稿にフォローアップするとき)。また、外に出て行くメッセージの
ための、道理にかなった MFT ヘッダーを作成することのサポートも提供します。
@c
@c @menu
@c * Honoring an MFT post::        What to do when one already exists
@c * Composing with a MFT header:: Creating one from scratch.
@c @end menu

@c @node Composing with a MFT header
@subsection  正しい MFT ヘッダーを自動的に作る

投稿する記事の MFT ヘッダーを Gnus が自動的に作ってくれるようにするため
の第一歩は、購読しているメーリングリストのアドレスのリストを Gnus に与え
ることです。一つ以上の方法でこれを行なうことができます。以下の変数が手ご
ろでしょう。

@table @code
@vindex message-subscribed-addresses
@item message-subscribed-addresses
これは購読しているメーリングリストのアドレスのリストでなければなりません。
ディフォルト値は @code{nil} です。例:

@lisp
(setq message-subscribed-addresses
      '("ding@@gnus.org" "bing@@noose.org"))
@end lisp

@vindex message-subscribed-regexps
@item message-subscribed-regexps
これは購読しているメーリングリストのアドレスを示す正規表現のリストでなけ
ればなりません。ディフォルト値は @code{nil} です。上記と同じ結果を成し遂
げたい場合の例:

@lisp
(setq message-subscribed-regexps
      '("\\(ding@@gnus\\)\\|\\(bing@@noose\\)\\.org")
@end lisp

@vindex message-subscribed-address-functions
@item message-subscribed-address-functions
これは MFT ヘッダーの値を決めるために (一度に一回!!) 呼ばれる関数のリス
トです。それらの関数には引数が無いことを忠告しておきましょう。ディフォル
ト値は @code{nil} です。

Gnus ではこの変数のために定義された、良い関数の候補があります。関
数 @code{gnus-find-subscribed-addresses} は、@code{subscribed} グループ
パラメーター (@pxref{Group Parameters, ,グループパラメーター, gnus-ja,
The Gnus Manual}) が非-@code{nil} に設定されているグループに対応するアド
レスのリストを返します。こんなふうに使ってください。

@lisp
(setq message-subscribed-address-functions
      '(gnus-find-subscribed-addresses))
@end lisp

@vindex message-subscribed-address-file
@item message-subscribed-address-file
あなたはもしかしたら酔狂な人 (原典: one organized human freak) で、購読
しているすべてのメーリングリストのアドレスのリストを別ファイルで持ってい
るかもしれません! そうならば、単にこの変数をそのファイル名にすることによっ
て、人生は善きものになるでしょう。
@end table

上記の複数の変数を使うことができます。それらの値はすべて「加えられ」ま
す。何らかの使える方法で。:-)

さあ用意ができました。いつものようにメッセージの作成を始めましょう。そし
ていつも通りに送信しましょう。メッセージが送出される直前
に Gnus の MFT を作る仕掛けが動作して、メッセージがすでに MFT フィールド
を持っているかどうかを調べます。もしそれがあるなら、それは放っておかれま
す (その場合にそれが空っぽだったら、そのフィールドが削除されて自動生成さ
れたもので置き換えられることはありません。これは個々のメッセージについ
て MFT の生成を禁止させる基本です)。無かった場合は受取人のアドレスのリス
ト (To: と Cc: ヘッダーにある) を、それらの一つが購読しているメーリング
リストのアドレスかどうかを調べます。それらのどれもがメーリングリストのア
ドレスでなかったら、MFT は作られません。それ以外の場合には MFT がヘッダー
に付け加えられ、その値は To: と Cc: にあるすべてのアドレスに設定されます。

@kindex C-c C-f C-a
@findex message-generate-unsubscribed-mail-followup-to
@kindex C-c C-f C-m
@findex message-goto-mail-followup-to
うーむ。そうするとあなたは「購読していないメーリングリストにメールを送信
するときはどうなるの?  私は余分のコピーが欲しいことを MFT で言いたい」と
尋ねますね (これは MFT が無い場合と同様に処理されるでしょう。しかし、
to-address で設定された他の誰かより優先させるために、明示的な MFT を使う
ことができます)。関
数 @code{message-generate-unsubscribed-mail-followup-to} が役に立つかも
しれません。これはディフォルトで @kbd{C-c C-f C-a} に割り当てられていま
す。どんな場合でも、あなたは自分が選んだ MFT を挿入することができま
す; それを始めるのに @kbd{C-c C-f C-m}
(@code{message-goto-mail-followup-to}) が助けてくれるでしょう。
@c
@c @node Honoring an MFT post
@subsection MFT 投稿の尊重

@vindex message-use-mail-followup-to
メーリングリストに投稿された記事にフォローアップするとき、その記事
が MFT ヘッダーを持っていたら、Gnus の動作は変
数 @code{message-use-mail-followup-to} の値によって決まります。この値は
以下のどれかになります:

@table @code
@item use
常に MFT を尊重します。フォローアップ記事の To: と Cc: ヘッダーは、元の
記事の MFT ヘッダーから引き出します。これがディフォルトです。

@item nil
常に MFT を尊重しません (完璧に無視)。

@item ask
どうするかを尋ねます。
@end table

MFT を尊重することは良いネチケット (netiquette) であると考えられています。
どこにフォローアップする必要があるかを、メッセージを投稿した人はあなたよ
りよく知っているはずですから。

@node Commands
@chapter 命令

@menu
* Buffer Entry::        メッセージバッファーに入った後の命令
* Header Commands::     ヘッダーに移動またはヘッダーを変更するための命令
* Movement::            メッセージバッファーの中を動き回る
* Insertion::           メッセージバッファーにいろんなものを挿入する
* MIME::                @acronym{MIME} に関する考察
* IDNA::                非-@acronym{ASCII} ドメイン名に関する考察
* Security::            メッセージへの署名と暗号化
* Various Commands::    いろいろなこと
* Sending::             実際にメッセージを送る
* Mail Aliases::        メールの別名の使い方
* Spelling::            Emacs にスペルチェックさせる
@end menu

@node Buffer Entry
@section バッファーに入る
@cindex undo
@kindex C-_

何か他のメッセージに応答するときは、たいていメッセージバッファーで書き上
げますよね。Message は多くの引用文を扱ったり、署名を削除したり、文章の整
形をしたり、あるいはあなたが使っている設定に依存するいろんなことをします。
Message は普通はうまく動作しますが、ときどき間違えもします。それらの間違
いを利用者が正すことができるように、Message はあるまとまった動作を自動的
に行なう前にアンドゥ (やり直し) の境界を設定します。それによって、ほんの
何回かアンドゥ・キー (通常 @kbd{C-_}) を押せば、未編集のメッセージに戻す
ことができます。

@node Header Commands
@section ヘッダー命令

@subsection ヘッダーに移動するための命令

以下の命令は対象になっているヘッダーに移動します。存在しなければ挿入され
ます。

@table @kbd
@item C-c ?
@kindex C-c ?
@findex describe-mode
メッセージモードの説明を表示します。

@item C-c C-r C-t
@kindex C-c C-f C-t
@findex message-goto-to
@code{To} ヘッダーに行きます (@code{message-goto-to})。

@item C-c C-f C-o
@kindex C-c C-f C-o
@findex message-goto-from
@code{From} ヘッダーに行きます (@code{message-goto-from})。(キーバインド
中の“o”は創作者 (Originator) に由来しています。)

@item C-c C-f C-b
@kindex C-c C-f C-b
@findex message-goto-bcc
@code{Bcc} ヘッダーに行きます (@code{message-goto-bcc})。

@item C-c C-f C-w
@kindex C-c C-f C-w
@findex message-goto-fcc
@code{Fcc} ヘッダーに行きます (@code{message-goto-fcc})。

@item C-c C-f C-c
@kindex C-c C-f C-c
@findex message-goto-cc
@code{Cc} ヘッダーに行きます (@code{message-goto-cc})。

@item C-c C-f C-s
@kindex C-c C-f C-s
@findex message-goto-subject
@code{Subject} ヘッダーに行きます (@code{message-goto-subject})。

@item C-c C-f C-r
@kindex C-c C-f C-r
@findex message-goto-reply-to
@code{Reply-To} ヘッダーに行きます (@code{message-goto-reply-to})。

@item C-c C-f C-n
@kindex C-c C-f C-n
@code{Neswsgroups} ヘッダーに行きます (@code{message-goto-newsgroups})。

@item C-c C-f C-d
@kindex C-c C-f C-d
@findex message-goto-distribution
@code{Distribution} ヘッダーに行きま
す (@code{message-goto-distribution})。

@item C-c C-f C-f
@kindex C-c C-f C-f
@findex message-goto-followup-to
@code{Followup-To} ヘッダーに行きます (@code{message-goto-followup-to})。

@item C-c C-f C-k
@kindex C-c C-f C-k
@findex message-goto-keywords
@code{Keywords} ヘッダーに行きます (@code{message-goto-keywords})。

@item C-c C-f C-u
@kindex C-c C-f C-u
@findex message-goto-summary
@code{Summary} ヘッダーに行きます (@code{message-goto-summary})。

@item C-c C-f C-i
@kindex C-c C-f C-i
@findex message-insert-or-toggle-importance
@samp{high} という値を持つ @samp{Importance:} ヘッダーを挿入します。この
ヘッダーは受信者にそのメッセージの重要性を知らせるために使われるものです。
もしバッファーにすでにこのヘッダーがある場合は、RFC 1376 に準じた三つの
値 @samp{low}、@samp{normal} および @samp{high} を循環させます。

@item C-c C-f C-a
@kindex C-c C-f C-a
@findex message-generate-unsubscribed-mail-followup-to
講読していないメーリングリストに投稿する場合に見合っ
た @samp{Mail-Followup-To:} ヘッダーを挿入します。講読していないメーリン
グリストに元記事を投稿するときは、@samp{Mail-Followup-To:} ヘッダーに手
で記入しなければなりません。内容は、普通はメーリングリストのアドレスとあ
なた自身のアドレスです。この関数はそのようなヘッダーを自動的に挿入します。
これは現在のメールのバッファーから @samp{To:} ヘッダーの内容を抜き出し、
それに現在の @code{user-mail-address} を追加します。

省略可能な引数 @code{include-cc} が @code{nil} ではない場合は、
@samp{Cc:} ヘッダーにあるアドレスも @samp{Mail-Followup-To:} ヘッダーに
置かれます。
@end table

@subsection ヘッダーを変更するための命令

@table @kbd
@item C-c C-o
@kindex C-c C-o
@findex message-sort-headers
@vindex message-header-format-alist
@code{message-header-format-alist} に従ってヘッダーを並べ替えま
す (@code{message-sort-headers})。

@item C-c C-t
@kindex C-c C-t
@findex message-insert-to
フォローアップしようとするメッセージの @code{Reply-To} もしく
は @code{From} ヘッダーを含む @code{To} ヘッダーを挿入しま
す (@code{message-insert-to})。

@item C-c C-n
@kindex C-c C-n
@findex message-insert-newsgroups
返答しようとする記事の @code{Followup-To} もしくは、@code{Nesgroups} ヘッ
ダーを反映した @code{Newsgroups} ヘッダーを挿入しま
す (@code{message-insert-newsgroups})。

@item C-c C-l
@kindex C-c C-l
@findex message-to-list-only
メーリングリスト宛てだけにメッセージを送ります。
@code{To:} と @code{Cc:} ヘッダーから、そのメーリングリスト以外のアドレ
スを削除します。

@item C-c M-n
@kindex C-c M-n
@findex message-insert-disposition-notification-to
開封確認要求を挿入します。
(@code{message-insert-disposition-notification-to})。もし受信者が RFC
2298 をサポートしていれば、彼女はそのメッセージを受け取ったことを知らせ
てくれるでしょう。

@item M-x message-insert-importance-high
@kindex M-x message-insert-importance-high
@findex message-insert-importance-high
@cindex Importance
@samp{high} という値を持つ @samp{Importance} ヘッダーを (必要ならすでに
存在するものを消去してから) 挿入します。

@item M-x message-insert-importance-low
@kindex M-x message-insert-importance-low
@findex message-insert-importance-low
@cindex Importance
@samp{low} という値を持つ @samp{Importance} ヘッダーを (必要ならすでに存
在するものを消去してから) 挿入します。

@item C-c C-f s
@kindex C-c C-f s
@findex message-change-subject
@cindex Subject
現在の @samp{Subject} ヘッダーを変更します。新しい @samp{Subject} を尋ね
て @samp{(was: <古い表題>)} を追加します。そういう記事を受け取った人がさ
らに返信するときに、古い表題は削除することができます。
@code{message-subject-trailing-was-query} (@ref{Message Headers}) を見て
ください。

@item C-c C-f x
@kindex C-c C-f x
@findex message-cross-post-followup-to
@vindex message-cross-post-default
@vindex message-cross-post-note-function
@cindex X-Post
@cindex cross-post
クロスポストのために、対象グループとともに @samp{FollowUp-To} ヘッダーを
設定し、その対象グループが @samp{Newsgroups} ヘッダーに存在しなかったら
そこに追加し、かつ本文に注意書きを入れます。
@code{message-cross-post-default} が @code{nil} になっているか、またはこ
の命令が接頭引付きで呼ばれると、@samp{Follow-Up} ヘッダーが設定されるだ
けで、@samp{Newsgroups} ヘッダーへの追加は行なわれません。注意書きを入れ
る関数は @code{message-cross-post-note-function} 変数で制御されます。

@item C-c C-f t
@kindex C-c C-f t
@findex message-reduce-to-to-cc
@samp{To} ヘッダーの内容を @samp{Cc} か @samp{Bcc} ヘッダーの内容で置き
換えます。(@samp{Cc} ヘッダーが無い場合に限って、代わりに @samp{Bcc} ヘッ
ダーが使われます。)

@item C-c C-f w
@kindex C-c C-f w
@findex message-insert-wide-reply
初めはそのメッセージが広い返答のために作られたものでなかった場合でも、広
い返答をしているように @samp{To} と @samp{Cc} ヘッダーを挿入します。

@item C-c C-f a
@kindex C-c C-f a
@findex message-add-archive-header
@vindex message-archive-header
@vindex message-archive-note
@cindex X-No-Archive
@samp{X-No-Archive: Yes} をヘッダーに挿入して、本文に注意書きを入れます。
ヘッダーと注意書き
は @code{message-archive-header} と @code{message-archive-note} を使って
カスタマイズすることができます。接頭引数付きで呼ばれると、挿入するテキス
トを要求します。本文に注意書きを入れたくない場合は、
@code{message-archive-note} を @code{nil} にしてください。
@end table

@node Movement
@section 移動

@table @kbd
@item C-c C-b
@kindex C-c C-b
@findex message-goto-body
メッセージの本文の先頭に移動します (@code{message-goto-body})。

@item C-c C-i
@kindex C-c C-i
@findex message-goto-signature
メッセージの署名に移動します (@code{message-goto-signature})。

@item C-a
@kindex C-a
@findex message-beginning-of-line
@vindex message-beginning-of-line
ヘッダーの値の先頭にいるときは行の先頭に移動し、そうでないときはヘッダー
の値の先頭に移動します。(ヘッダーの値というのは、ヘッダー名およびコロン
の後にあるものです。) この動作は変数 @code{message-beginning-of-line} を
トグル切り替えすることによって無効にすることができます。
@end table

@node Insertion
@section 挿入

@table @kbd
@item C-c C-y
@kindex C-c C-y
@findex message-yank-original
返答しようとしているメッセージをメッセージバッファーに yank しま
す (@code{messsage-yank-original})。

@item C-c C-M-y
@kindex C-c C-M-y
@findex message-yank-buffer
バッファー名を尋ねて、そのバッファーの内容をメッセージバッファー
に yank します (@code{message-yank-buffer})。

@item C-c C-q
@kindex C-c C-q
@findex message-fill-yanked-message
Yank されたメッセージを折り返して耳を揃えま
す (@code{message-fill-yanked-message})。警告: もし変なやり方で引用され
ていると、yank された文章をひどくぐちゃぐちゃにしてしまうかもしれません。
もっとも、どんなものが安全かは、すぐにわかるでしょうけれど。とにかく、何
が起きても @kbd{C-x u} (@code{undo}) が使えるのだから問題無いことだけは、
覚えておいてください。

@item C-c C-w
@kindex C-c C-w
@findex message-insert-signature
バッファーの最後に署名を挿入します (@code{message-insert-signature})。

@item C-c M-h
@kindex C-c M-h
@findex message-insert-headers
メッセージのヘッダーを挿入します (@code{message-insert-headers})。

@item C-c M-m
@kindex C-c M-m
@findex message-mark-inserted-region
現在の記事のある領域を、それらを囲むためのタグで印を付けます。
@code{message-mark-insert-begin} と @code{message-mark-insert-end} を見
てください。接頭引数を付けて使うと、slrn ふうの verbatim (文章を一言一句
そのまま表す) 記号の対 (@samp{#v+} と @samp{#v-}) を使います。(訳注: そ
ういうメッセージを Gnus で表示すると、ディフォルトではその領域が一つのパー
トとして扱われ、また強調表示されます。)

@item C-c M-f
@kindex C-c M-f
@findex message-mark-insert-file
現在の記事にファイルを挿入して、その領域を囲むためのタグで印を付けます。
@code{message-mark-insert-begin} と @code{message-mark-insert-end} を見
てください。接頭引数を付けて使うと、slrn ふうの verbatim (文章を一言一句
そのまま表す) 記号の対 (@samp{#v+} と @samp{#v-}) を使います。(訳注: そ
ういうメッセージを Gnus で表示すると、ディフォルトではその領域が一つのパー
トとして扱われ、また強調表示されます。)
@end table

@node MIME
@section MIME
@cindex MML
@cindex MIME
@cindex multipart
@cindex attachment

Message は @acronym{MIME} に対応した送信用のエージェントです。ふつう利用
者は、@acronym{MIME} にするために何かする必要はありません。Message は自
動的に @code{Content-Type} および @code{Content-Transfer-Encoding} ヘッ
ダーを付加します。

@findex mml-attach-file
@kindex C-c C-a
利用者が @acronym{MIME} でマルチパートを使いたい最も一般的なものは、送出
するメールに「添付」を付け加えることでしょう。これは @kbd{C-c C-a} 命
令 (@kbd{M-x mml-attach-file}) で行なうことができ、その際ファイル名
と @acronym{MIME} タイプが尋ねられます。

@vindex mml-dnd-protocol-alist
@vindex mml-dnd-attach-options
あなたの Emacs がドラッグ＆ドロップをサポートしていれば、Message バッファ
ーにファイルをドロップすることもできます。変
数 @code{mml-dnd-protocol-alist} で、Message バッファーにファイルをドロッ
プするときにどんなことを行なうかを指定します。変
数 @code{mml-dnd-attach-options} は、ファイルをドロップするときにど
の @acronym{MIME} オプションを指定したいかを制御します。それをリストにす
る場合、有効なオプションは @code{type}, @code{description} およ
び @code{disposition} です。@code{disposition} は暗に @code{type} を含み
ます。@code{nil} だったらオプションを尋ねません。@code{t} にすると、オプ
ションを指定するかどうかを尋ねます。

さらに @acronym{MML} 言語 (@pxref{Composing, ,MIME メッセージの作成,
emacs-mime-ja, The Emacs MIME Manual}) を使えば、どんな複雑なマルチパー
トでも自由に作ることができます。

@node IDNA
@section 国際化ドメイン名
@cindex IDNA
@cindex internationalized domain names
@cindex non-ascii domain names

@acronym{IDNA} は非-@acronym{ASCII} ドメイン名を可読
な @acronym{ASCII} 文字列にエンコードするための標準の手段です。詳細
は RFC 3490 で見つかります。

Message は @acronym{IDNA} に準拠した送信エージェントです。利用者
は @acronym{IDNA} のために一般には何もする必要がありません。
Message は @code{From}、@code{To} および @code{Cc} ヘッダーにある
非-@acronym{ASCII} ドメイン名を自動的にエンコードします。

もっと @acronym{IDNA} が有名になるまでは、Message は実際にドメイン名
を @acronym{IDNA} エンコードすべきかどうかの確認を求めることになっていま
す。今のところは、利用者の幾人かはドメイン名に非-@acronym{ASCII} 文字を
含むことができることに気づいていないかもしれないので、彼らが偶然に
非-@acronym{ASCII} ドメイン名をタイプしてしまったときのために安全ネット
を張っているわけです。

@vindex message-use-idna
変数 @code{message-use-idna} は @acronym{IDNA} を使うかどうかを制御しま
す。この変数が @code{nil} だったら @acronym{IDNA} エンコードは行なわれま
せん。シンボル @code{ask} に設定されていると利用者は確認を求められます。
また、@code{t} に設定されていると (@acronym{IDNA} が完全に利用可能ならば、
それがディフォルトです)、自動的に @acronym{IDNA} エンコードが行なわれま
す。

@findex message-idna-to-ascii-rhs
実験的に @acronym{IDNA} エンコードを行ないたいならば、(エンコードされた
非-@acronym{ASCII} ドメイン名を得るために) メッセージの編集中
に @kbd{M-x message-idna-to-ascii-rhs RET} をタイプしてください。

この機能を使うには @uref{http://www.gnu.org/software/libidn/, GNU
Libidn} をインストールしておかなければなりません。

@node Security
@section セキュリティー
@cindex Security
@cindex S/MIME
@cindex PGP
@cindex PGP/MIME
@cindex sign
@cindex encrypt
@cindex secure

@acronym{MML} 言語を使うことによって、Message は電子署名された、または電
子暗号化されたメッセージを作ることができます。Message (と言う
か @acronym{MML}) は、現在 @acronym{PGP} (RFC 1991), @acronym{PGP/MIME}
(RFC 2015/3156) および @acronym{S/MIME} をサポートしています。

@menu
* Signing and encryption::      署名と暗号化のコマンド
* Using S/MIME::                S/MIME を使う
* Using PGP/MIME::              PGP/MIME を使う
* PGP Compatibility::           古い実装との互換性
@end menu

@node Signing and encryption
@subsection 署名と暗号化のコマンド

@acronym{MIME} パートに対してセキュリティーの操作を行なうため
の @acronym{MML} への指示は、以下のように署名の場合は @kbd{C-c C-m s} キー
マップを使って、暗号化の場合は @kbd{C-c C-m c} キーマップを使って行ない
ます。

@table @kbd
@item C-c C-m s s
@kindex C-c C-m s s
@findex mml-secure-message-sign-smime

@acronym{S/MIME} を使って現在のメッセージに電子署名します。

@item C-c C-m s o
@kindex C-c C-m s o
@findex mml-secure-message-sign-pgp

@acronym{PGP} を使って現在のメッセージに電子署名します。

@item C-c C-m s p
@kindex C-c C-m s p
@findex mml-secure-message-sign-pgpmime

@acronym{PGP/MIME} を使って現在のメッセージに電子署名します。

@item C-c C-m c s
@kindex C-c C-m c s
@findex mml-secure-message-encrypt-smime

@acronym{S/MIME} を使って現在のメッセージを電子暗号化します。

@item C-c C-m c o
@kindex C-c C-m c o
@findex mml-secure-message-encrypt-pgp

@acronym{PGP} を使って現在のメッセージを電子暗号化します。

@item C-c C-m c p
@kindex C-c C-m c p
@findex mml-secure-message-encrypt-pgpmime

@acronym{PGP/MIME} を使って現在のメッセージを電子暗号化します。

@item C-c C-m C-n
@kindex C-c C-m C-n
@findex mml-unsecure-message
メッセージからセキュリティー関連の @acronym{MML} タグを削除します。
@end table

これらの命令は、その場でメッセージに署名したり暗号化するわけではなく、単
にセキュリティーのための適切な @acronym{MML} タグを挿入して、メッセージ
が実際に送信されるときにその動作を実行するように、@acronym{MML} エンジン
に指示を与えるだけです。それらは他の仕事、例えば暗号化されたメールを送り
たい相手の人の @acronym{S/MIME} の証明書を探して、取り寄せるようなことも
行なうかもしれません。mml 解析エンジンが @acronym{MML} で書かれたメッセー
ジを適切に @acronym{MIME} メッセージに変換するとき、セキュリティーのため
のタグは、パートまたはマルチパートのどちらかのタグで置き換えられます。メッ
セージが他の mml パートも含んでいる場合にはマルチパートのタグが使われ、
他のパートが無い場合は単一のパートのタグが使われるでしょう。このようにし
て、署名される/暗号化されるマルチパートのメッセージに対し、メッセージ・
モードは「正しいこと (登録商標)」(原文: the Right Thing (TM)) を行ないま
す。

署名そして特に暗号化はしばしば機密情報を送信するときに使われるので、メー
ルが本当に署名または暗号化されることを確かめるための何らかの手段を必要と
するでしょう。上記の署名/暗号化のための命令を実行した後でなら、
@kbd{C-u C-c RET P} (@code{mml-preview}) を使うことによって生の記事を下
見することが可能です。そうして、あなたの以前に大切だった人に関する、ある
いは、この前の夜の変なパーティーで、あのおかしな身なりの人が実際にやった
ことに関するあなたの長い罵倒が、本当に暗号化されて送信されるであろうこと
を確認することができます。

@emph{注意!}  @acronym{PGP/MIME} と @acronym{S/MIME} のどちら
も RFC822 ヘッダーを署名/暗号化しません。それらは @acronym{MIME} パート
にのみ作用します。機密の表題とともにメールを送ってしまう前に、このことを
肝に命じておいてください。

メッセージを暗号化するとき、Gnus はディフォルトで「署名+暗号化」(メッセー
ジに対して署名と暗号化の両方が行なわれる) モードを使います。特定のメッセー
ジに対してこれを行なわせたくないならば、
@code{mml-secure-message-encrypt-*} 命令に接頭引数を与えて (例え
ば @kbd{C-u C-c C-m c p} を使って) ください。

上記のセキュリティー命令を実際に使うのはさほど難しくありません。少なくと
も、すべての関係するプログラムが適切に通信し合うことを確かめることと比較
して。そこで、外部のどんなライブラリーまたはプログラムが必要かについて、
およびいくつかの些細で一般的なヒントを述べることにします。

@node Using S/MIME
@subsection S/MIME を使う

@emph{注意!}  この章は近代的な暗号法、@acronym{S/MIME}、さまざま
な PKCS の標準、OpenSSL などの基礎に、あなたが精通していることを想定して
います。

Message (それに @acronym{MML}) が @acronym{S/MIME} をサポートするに
は OpenSSL が必要です。OpenSSL は実際の @acronym{S/MIME} による署名/暗号
化の処理を実行します。OpenSSL は @uref{http://www.openssl.org/} で見つか
るでしょう。OpenSSL 0.9.6 以降のものが動作するはずです。バージョ
ン 0.9.5a は証明書からメールアドレスを抽出することができません。またそれ
は @acronym{MIME} のセパレータに余計な CR 文字を挿入するので、変なメール
を送る人だと思われたくなければ、それを使うことを避けたいでしょう。(もっ
ともあなたは @acronym{S/MIME} のメッセージを送った時点で、おそらくその変
人コンテストでの勝利を逃してしまいましたが。)

暗号化されたメールを送るために個人の証明書は要りません。もっとも Message
(@acronym{MML}) は、通信したい相手の人の証明書を必要としますけれど。これ
は @kbd{C-c C-m c s} をタイプしたときに尋ねられます。今のところ、証明書
をローカルファイルから取り出すか DNS から取り寄せるかの、二つの方法があ
ります。ローカルファイルを選択した場合、それは @acronym{PEM} 形式によ
る X.509 証明書を含んでいる必要があります。DNS を選んだ場合には、その証
明書が格納されているドメイン名を尋ねられます (ディフォルトは上手に推測し
たものです)。私が信じる限
り Message (@acronym{MML}) は @acronym{S/MIME} の証明書を DNS から取り寄
せる世界初のメール・エージェントなので、あまりたくさんの証明書がそこで見
つかることは無いでしょう。少なくとも一つだけ
は @code{simon.josefsson.org} ドメイン (訳注: 原著者のサイト) に格納され
たものがあるはずですが。LDAP は証明書を配給するためのもっと普及している
手法で、それをサポートすることが計画されています。(話は変わりますが、
@code{ldapsearch} をコマンドラインから実行して証明書をファイルに取り込み、
それを使うことができますよ。)

メッセージの署名については、ある種の設定無しでは OpenSSL は署名の処理を
実行することができません。とりわけ、あなたの秘密鍵 (private key) と証明
書がどこに格納されているかを教えてあげる必要があります。@acronym{MML} は
その名にふさわしい @code{smime.el} という OpenSSL への Emacs インターフェー
スを使いますが、それはこの設定に使うためのための @code{custom} グループ
を持っています。ですから @kbd{M-x customize-group RET smime RET} を試し
て、眺めてみてください。

現在は、CA (または RA) と通信してあなた自身の証明書を生成することはサポー
トされていません。それに計画もありません。私は Netscape を使って、ネット
上にある大きな CA の一つから無料の @acronym{S/MIME} の証明書をもらいまし
た。Netscape は秘密鍵と証明書を PKCS #12 形式で輸出 (export) することが
できます。OpenSSL を使って、これを以下のように PEM 形式による
素 (plain) の X.509 証明書に変換してください。

@example
$ openssl pkcs12 -in ns.p12 -clcerts -nodes > key+cert.pem
@end example

@code{smime-keys} 変数が @file{key+cert.pem} ファイルを指し示すようにし
なければなりません。今や、あなたは署名されたメッセージを送信できるはずで
す。

@emph{注意!}  あなたの鍵は今、暗号化されずにファイルに格納されたので、そ
れの扱いには気を付けてください。暗号化された鍵をファイルに格納する機能は
サポートされています。その場合は OpenSSL を呼び出す前に Gnus がパスフレー
ズを尋ねるでしょう。どうやってそれを成し遂げるかについては OpenSSL のド
キュメントを読んでください。暗号化されていない鍵を使う (例えばそれらが安全
なストレージにある、またはあなたが安全なシングル・利用者のマシンにい
る) のであれば、パスフレーズの入力を要求されたとき、単に @kbd{RET} を押
してください。

@node Using PGP/MIME
@subsection PGP/MIME を使う

@acronym{PGP/MIME} は @uref{http://www.gnupg.org/, GNU Privacy Guard} の
ような、外部の OpenPGP の実装を必要とします。OpenPGP より以前の実装であ
る PGP 2.x と PGP 5.x もサポートします。PGP の実装への一つの Emacs イン
ターフェースである (@pxref{Top, ,PGG, pgg-ja, PGG Manual}) が含まれてい
ますが、Mailcrypt もサポートします。@xref{PGP Compatibility}.

@cindex gpg-agent
Message はデータを暗号化するために内部的に GnuPG (@command{gpg} コマン
ド) を呼びます。また、ある場合 (例えば暗号の解読や署名を行なう場合) には、
@command{gpg} はユーザーのパスフレーズを要求します。現
在 @command{gpg} にパスフレーズを渡す方法として推奨されているのは、
@command{gpg-agent} プログラムを使うことです。

Emacs で @command{gpg-agent} を使うには、Emacs を起動する前にシェルで
以下のコマンドを走らせる必要があります。

@example
eval `gpg-agent --daemon`
@end example

これは @command{gpg-agent} を実行するととも
に @command{gpg} が @command{gpg-agent} と通信できるように、環境変
数 @code{GPG_AGENT_INFO} を設定します。これを @file{.xsession} また
は @file{.bash_profile} に書き込むのは良い考えでしょう。@xref{Invoking
GPG-AGENT, , , gnupg, Using the GNU Privacy Guard}.

いったん @command{gpg-agent} が立ち上がると、それは @command{gpg} のため
に必要に応じてパスフレーズを尋ねます。X ウィンドウ・システムでは、パスフ
レーズを入力するための対話手段が新たに出現します。その対話手段は PIN
Entry (@command{pinentry} コマンド) によって提供されますが、バージョ
ン 0.7.2 のものは単一の tty 上の Emacs とは協調して動作することができま
せん。したがって、もし文字コンソールを使っているのであれば、パスフレーズ
を gpg-agent のキャッシュに前もって入れておかなければならないでしょう。
以下のコマンドを、そのために使うことができます。

@example
gpg --use-agent --sign < /dev/null > /dev/null
@end example

Lisp 変数 @code{pgg-gpg-use-agent} で @command{gpg-agent} を使うかどうか
を制御します。@xref{Caching passphrase, ,パスフレーズをキャッシュする,
pgg-ja, The PGG Manual}, も参照してください。

@node PGP Compatibility
@subsection 古い実装との互換性

@vindex gpg-temp-directory
注: もし @code{gpg.el} を使うのであれば、@code{gpg-temp-directory} で指
定されるディレクトリーのパーミッションが必ず 0700 になっているようにして
ください。

あなたの PGP の実装のドキュメントで詳しく述べられているので、あなた自身
のための鍵の生成のしかたは、それに譲ります。

もしあなたが古い PGP 2.x の鍵を GnuPG に輸入してあって、PGP 2.x を使って
いる仲間に署名されかつ暗号化されたメッセージを送りたいとすると、受信者は
あなたが送信したものを理解できないことを発見することになるでしょう。一つ
の解は、代わりに PGP 2.x を使うこと (すなわち、もし @code{pgg} を使って
いるのであれば、@code{pgg-default-scheme} を @code{pgp} に設定するこ
と) です。さらに PGP 2.x を使っている仲間に、GnuPG に乗り換えることを説
得しても良いでしょう。
@vindex mml-signencrypt-style-alist
最後の代替手段として、署名と暗号化の動作を二段階 (分離署名してからメッセー
ジを暗号化する) にすることができます。この振る舞いを変更したいのであれば、
@code{mml-signencrypt-style-alist} 変数をカスタマイズすることができます。
例えば:

@lisp
(setq mml-signencrypt-style-alist '(("smime" separate)
                                    ("pgp" separate)
                                    ("pgpauto" separate)
                                    ("pgpmime" separate)))
@end lisp

これは署名と暗号化を二段階で行なわせることによって、PGP version 2 が理解
できるメッセージを生成します。

(その問題に関するさらなる情報については、
@uref{http://www.gnupg.org/gph/en/pgp2x.html} を参照してください。)

@node Various Commands
@section いろいろな命令

@table @kbd
@item C-c C-r
@kindex C-c C-r
@findex message-caesar-buffer-body
現在のメッセージをカエサル変換 (別名 rot13) しま
す (@code{message-caesar-buffer-body})。ある範囲にバッファーが狭められて
いた場合は、バッファーの見える部分だけを変換します。数値接頭引数は文中の
アルファベットを何文字分回転させるかを指定します。ディフォルトは 13 です。

@item C-c C-e
@kindex C-c C-e
@findex message-elide-region
@vindex message-elide-ellipsis
ポイントとマークの間の文を省略します (@code{message-elide-region})。文章
は kill されて、変数 @code{message-elide-ellipsis} の値で置き換えられま
す。ディフォルトの省略符号として使われる値は (@samp{[...]}) です。

これは書法仕様変数なので、削除された行数を、または削除された文字数を表示
させるために、それぞれ @samp{%l} と @samp{%c} を使うことができます。

@item C-c M-k
@kindex C-c M-k
@findex message-kill-address
現在位置のアドレスを削除します (訳注: この命令は作者や出どころが不明で、
さらに悪いことに不完全な命令に見えます。必ず消したいアドレスの先頭にポイ
ントを置いて使ってください。)

@item C-c C-z
@kindex C-c C-z
@findex message-kill-to-signature
現在位置から署名まで、またはそれが無ければ記事の最後までの文を kill しま
す (@code{message-kill-to-signature})。

@item C-c C-v
@kindex C-c C-v
@findex message-delete-not-region
メッセージの本文において、領域が設定された場所以外のすべての文を消去しま
す (@code{message-delete-not-region})。

@item M-RET
@kindex M-RET
@findex message-newline-and-reformat
四本の空行を挿入します。そして、もしポイントが引用文の中間にあったのなら
ば、引用文を整形し直します。

例です:

@example
> これは何かの引用文です。 そして、ここにはもっと引用文があります。
@end example

ポイントが「そして」の前にあるときに @kbd{M-RET} を押すと、以下のように
なります:

@example
> これは何かの引用文です。

*

> そして、ここにはもっと引用文があります。
@end example

@samp{*} はポイントが置かれる場所です。

@item C-c M-r
@kindex C-c M-r
@findex message-rename-buffer
バッファーの名前を変更します (@code{message-rename-buffer})。接頭引数が
与えられると、新しいバッファー名の入力を要求します。

@item TAB
@kindex TAB
@findex message-tab
@vindex message-tab-body-function
@code{message-tab-body-function} が @code{nil} でなかったら、それが指定
する関数を実行します。さもなければ、
@code{text-mode-map} か @code{global-map} の @kbd{TAB} キーに割り当てら
れている命令を使います。
@end table

@node Sending
@section 送信

@table @kbd
@item C-c C-c
@kindex C-c C-c
@findex message-send-and-exit
メッセージを送信し、現在のバッファーを @code{bury-buffer} しま
す (@code{message-send-and-exit})。

@quotation
訳注: @code{bury-buffer} は指定したバッファーを現在の Emacs 上に存在する
バッファーのリストの最後の要素にする関数で、一般に重要度が低くなったバッ
ファーに対して実行されます。それを見たい場合は @kbd{C-x C-b} を使ってく
ださい。ただしバッファーの名前が @samp{*sent ... *} に変わっているはずで
す。
@end quotation

@item C-c C-s
@kindex C-c C-s
@findex message-send
メッセージを送信します (@code{message-send})。

@item C-c C-d
@kindex C-c C-d
@findex message-dont-send
メッセージバッファーを @code{bury-buffer} して (送信せずに) 終了しま
す (@code{message-dont-send})。

@item C-c C-k
@kindex C-c C-k
@findex message-kill-buffer
メッセージバッファーを kill して (送信せずに) 終了しま
す (@code{message-kill-buffer})。
@end table

@node Mail Aliases
@section メールの別名
@cindex mail aliases
@cindex aliases
@cindex completion
@cindex ecomplete

@vindex message-mail-alias-type
@code{message-mail-alias-type} という変数で、どのような型のメールの別
名 (mail alias) の伸張を使うかを制御します。今のところ二つの様式、
@code{mailabbrev} と @code{ecomplete} を使うことができます。もしこの変数
が @code{nil} になっていると、メールの別名の伸張は行なわれません。

@code{Mailabbrev} は @file{/etc/mailrc} と @file{~/.mailrc} ファイルを解
析することによって動作します。それらのファイルは次のようになっています:

@example
alias lmi "Lars Magne Ingebrigtsen <larsi@@ifi.uio.no>"
alias ding "ding@@ifi.uio.no (ding mailing list)"
@end example

このような行を @file{~/.mailrc} ファイルに追加しておけば、
@code{To} や @code{Cc} (など) のヘッダーで @samp{lmi} と書い
て @kbd{SPC} を押すだけで、その別名を伸張してくれるはずです。

メッセージを送るときには伸張は行なわれません---すべての伸張は明示的
に (訳注: 実際に自分でメールを書いているときに) 行なわれなくてはなりませ
ん。

@code{ecomplete} を使っていると、@code{To} と @code{Cc} ヘッダーにあるす
べてのアドレスが、自動的に @file{~/.ecompleterc} ファイルに格納されます。
@code{To} と @code{Cc} ヘッダーにテキストを書き込んだときに、
@code{ecomplete} はそこに格納されている値を調べて、どんな補完候補がある
かを「エレクトリック」に (訳注: 巧妙なやり方で) 教えてくれるでしょう。そ
れらの補完候補の一つを探すには、@kbd{M-n} コマンドでリストを下に読み進ん
でください。リストを昇るのは @kbd{M-p}、そして選択するのは @kbd{RET} で
す。

@node Spelling
@section Emacs にスペルチェックさせる
@cindex spelling
@findex ispell-message

メッセージを Emacs でスペルチェックするために普及している二つの方法とし
て @code{ispell} と @code{flyspell} があります。@code{ispell} の方は昔か
らあって、たぶんより一般的なパッケージです。あなたは最初にメッセージを書
いてから、例によって全体を @code{ispell} に通し、すべての書き損じを修正
するでしょう。メッセージを送信するときにそれを自動的に行なうためには、
@file{.emacs} ファイルに以下のようなものを入れてください。

@lisp
(add-hook 'message-send-hook 'ispell-message)
@end lisp

@vindex ispell-message-dictionary-alist
あなたが別の言語で書く習慣を持っているのならば、変
数 @code{ispell-message-dictionary-alist} で切り替えることができます。
(訳注: 以下の連想リストの各要素で、ヘッダーのどれかに合致する正規表現と
辞書を指定します。ただし @samp{japanese} という辞書はありません (たぶん)。)

@lisp
(setq ispell-message-dictionary-alist
      '(("^Newsgroups:.*\\bde\\." . "deutsch8")
        (".*" . "default")))
@end lisp

@code{ispell} はインストールされている @samp{ispell} プログラムに依存し
ます。

人気があるもう一つの方法は @code{flyspell} を使うことです。このパッケー
ジはあなたが書いている最中にスペルチェックを行ない、いろんな方法で間違っ
たスペルの語を指摘してくれます。

@code{flyspell} を使うには、以下のようなものを @file{.emacs} ファイルに
入れてください。

@lisp
(defun my-message-setup-routine ()
  (flyspell-mode 1))
(add-hook 'message-setup-hook 'my-message-setup-routine)
@end lisp

@code{flyspell} はインストールされている @samp{ispell} プログラムに依存
します。

@node Variables
@chapter 変数

@menu
* Message Headers::             メッセージヘッダーに関する一般的なこと
* Mail Headers::                メールのヘッダーをカスタマイズする
* Mail Variables::              他のメール変数
* News Headers::                ニュースのヘッダーをカスタマイズする
* News Variables::              他のニュース変数
* Insertion Variables::         どう挿入するかをカスタマイズする
* Various Message Variables::   他のメッセージ変数
* Sending Variables::           送信のための変数
* Message Buffers::             Message がバッファーの名前を付ける方法
* Message Actions::             終了するときに実行すること
@end menu

@node Message Headers
@section メッセージヘッダー

Message はメッセージを作成する分野の第一線にあって、極めて意欲的です。そ
の使命はニュースとメールのエージェントを統合することです。メールとニュー
スを一緒に送ることを可能にするためには、メッセージをメールで送ったものと
ニュースで送ったものがよく似た見栄えになるように、Message はすべてのヘッ
ダーをそれ自身で作成しなければなりません。

@table @code
@item message-generate-headers-first
@vindex message-generate-headers-first
@code{t} だったら、すべての必要なヘッダーをメッセージを書き始める前に作
成します。これは作成するヘッダーのリストであっても構いません:

@lisp
(setq message-generate-headers-first
      '(References))
@end lisp

@vindex message-required-headers
変数 @code{message-required-headers}、
@code{message-required-mail-headers} およ
び @code{message-required-news-headers} は、どのヘッダーが必要かを指定し
ます。

変数 @code{message-deletable-headers} (後述) の設定によっては、いくつか
のヘッダーが送信する前に消されて作り直されることに注意してください。

@item message-draft-headers
@vindex message-draft-headers
Message が Gnus 上で走っている場合、メッセージバッファーはドラフトグルー
プと関連付けられています。@code{message-draft-headers} は、そのドラフト
グループにドラフトが記録されるときに、どのヘッダーが作成されるべきかを指
示します。

@item message-from-style
@vindex message-from-style
@code{From} ヘッダーをどういう見栄えにするかを指定します。以下の四つの値
が使えます:

@table @code
@item nil
アドレスだけです---@samp{king@@grassland.com}.

@item parens
@samp{king@@granssland.com (Elvis Parsley)}.

@item angles
@samp{Elvis Parsley <king@@grassland.com>}.

@item default
引用符で囲む必要がある場合 (*) は @code{parens} と同様の見栄えにします。
そうでなければ @code{angles} の場合と同じような見栄えにします。
@code{parens} の形式を使ってもなお引用符で囲まなければならない場
合 (*) は、有無を言わずに @code{angles} の形式を使います。

訳注*: フルネームの部分が特殊文字を含んでいる場合
@end table

@item message-deletable-headers
@vindex message-deletable-headers
前もって Message が作成したヘッダーのうち、このリストに含まれているもの
は投稿する前に削除されます。記事を投稿したとしましょう。それから、いたず
ら好きなあなたはそれをどこか別のグループに再び投稿することを決心したので、
@code{*post-buf*} バッファーに戻って @code{Newsgroups} 行を編集し、再び
送り出したとします。ディフォルトでは、この変数は前に作られた古
い @code{Message-ID} を取り除いて、新しいものを作ることを確実にします。
もしこれが行なわれないと、おそらく帝国全体が滅亡して無政府状態がはびこり、
猫が二本の足で歩き始めて世界を支配するでしょう。伝え聞くところによれば。

@item message-default-headers
@vindex message-default-headers
送信するメッセージに挿入されるヘッダー行です。編集前に挿入されるので、書
き換えたり削除できます。もし文字列に設定されていれば、そのまま挿入されま
す。もし関数に設定されていると、呼ばれてその結果が挿入されます。

@item message-subject-re-regexp
@vindex message-subject-re-regexp
@cindex Aw
@cindex Sv
@cindex Re
メッセージへの応答には @samp{Re: } で始まる表題があります。これは英単語
の“response”の略では @emph{ありません}。ラテン語で「それに応答して」
(in response to) と言う意味です。無教養な馬鹿者どもはこの事実をとり損ね
て、代わりに忌まわしい @samp{Aw: } (antwort) や @samp{Sv: } (svar) を使
うように、彼らのソフトウェアを「国際化」しました。それは無意味だし邪悪で
す。しかし、あなたはこれらの邪悪な道具を使う利用者と応対しなければならな
いかもしれません。そういう場合には、この変数をそれらの接頭語に合致する正
規表現に設定することができます。私ですか?  私は規格に従わないメールはた
だ捨て去っているだけです。

これは、返事をするときにそれらのヘッダーに対処するための値の例です:

@lisp
(setq message-subject-re-regexp
      (concat
       "^[ \t]*"
         "\\("
           "\\("
             "[Aa][Nn][Tt][Ww]\\.?\\|"     ; antw
             "[Aa][Ww]\\|"                 ; aw
             "[Ff][Ww][Dd]?\\|"            ; fwd
             "[Oo][Dd][Pp]\\|"             ; odp
             "[Rr][Ee]\\|"                 ; re
             "[Rr][\311\351][Ff]\\.?\\|"   ; ref
             "[Ss][Vv]"                    ; sv
           "\\)"
           "\\(\\[[0-9]*\\]\\)"
           "*:[ \t]*"
         "\\)"
       "*[ \t]*"
       ))
@end lisp

@item message-subject-trailing-was-query
@vindex message-subject-trailing-was-query
@vindex message-subject-trailing-was-ask-regexp
@vindex message-subject-trailing-was-regexp
表題の行にぶら下がっている @samp{(was: <古い表題>)} をどうするかを制御し
ます。@code{nil} だったら表題をそのままにしておきます。@code{ask} という
シンボルだったら、どうするかを利用者に尋ねます。表題
が @code{message-subject-trailing-was-ask-regexp} に合致する場合だけです
が。@code{message-subject-trailing-was-query} が @code{t} だったら、常に
ぶら下がった古い表題をはぎ取ります。その場合
は @code{message-subject-trailing-was-regexp} が使われます。

@item message-alternative-emails
@vindex message-alternative-emails
あなたの第二、第三のメールアドレスに合致する正規表現です。元の記事の To、
Cc または From ヘッダーにあって、この変数に合致する最初のアドレスが、ディ
フォルトの From の値を置き換えて、出て行くメッセージの From 欄として使わ
れます。

例えばあなたが john@@home.net および john.doe@@work.com という第二の電子
メールアドレスを持っていて、それらに宛てて送られてきたメッセージに返信す
るときに、それらを From 欄で使いたければ、この変数を次のように設定すれば
良いでしょう:

@lisp
(setq message-alternative-emails
      (regexp-opt '("john@@home.net" "john.doe@@work.com")))
@end lisp

この変数は、投稿様式 (posting styles) や @code{message-setup-hook} を実
行することによって設定されるどんなものよりも優先します。

@item message-allow-no-recipients
@vindex message-allow-no-recipients
@code{Gcc} と @code{Fcc} 以外に受取人がいなかった場合 (訳注: To, Cc,
Newsgroups などが空だった場合) に、何をするかを設定します。
@code{always} だったら送信できますが、@code{never} だったら送信できませ
ん。@code{ask} (それがディフォルト) だったら、どうするかを尋ねられます。

@item message-hidden-headers
@vindex message-hidden-headers
正規表現、正規表現のリスト、または最初の要素が @code{not} で残りが正規表
現であるリストです。メッセージを作成しているときに、どのヘッダーを隠した
ままにしておくかを決めます。

@lisp
(setq message-hidden-headers
      '(not "From" "Subject" "To" "Cc" "Newsgroups"))
@end lisp

それらのヘッダーは、それら以外の部分にバッファーを狭めるこ
と (narrowing) によって隠されます。@kbd{M-x widen} を使うことによって、
それらが見えるようにすることができます。

@item message-header-synonyms
@vindex message-header-synonyms
似た意味を持つヘッダー名のリストのリストです。例えばこのリスト
が @code{Cc} と @code{To} を要素に持つリストを含んでいると、メッセージが
すでに受信者に @code{Cc} されている場合、
@code{message-carefully-insert-headers} は @code{To} ヘッダーを挿入しま
せん。
@end table

@node Mail Headers
@section メールヘッダー

@table @code
@item message-required-mail-headers
@vindex message-required-mail-headers
この変数の構文については @ref{News Headers} を参照してください。ディフォ
ルトは @code{(From Subject Date (optional . In-Reply-To) Message-ID
(optional . User-Agent))} です。

@item message-ignored-mail-headers
@vindex message-ignored-mail-headers
メールを出す前に取り除かれるヘッダーの正規表現です。
ディフォルトは@*
@samp{^[GF]cc:\\|^Resent-Fcc:\\|^Xref:\\|^X-Draft-From:\\|@*
^X-Gnus-Agent-Meta-Information:} です。

@item message-default-mail-headers
@vindex message-default-mail-headers
この文字列はメールとして初期化されたすべてのメッセージバッファーの、ヘッ
ダーの最後尾に挿入されます。

@item message-generate-hashcash
@vindex message-generate-hashcash
メッセージのための @samp{X-Hashcash} ヘッダーを計算して付加すべきかどう
かを指示する変数です。@xref{Hashcash, ,Hashcash, gnus-ja, The Gnus
Manual}.  @code{opportunistic} にすると、ユーザーを待たせない場合に限り、
ヘッダーを作ります。
@end table

@node Mail Variables
@section メール変数

@table @code
@item message-send-mail-function
@vindex message-send-mail-function
@findex message-send-mail-function
@findex message-send-mail-with-sendmail
@findex message-send-mail-with-mh
@findex message-send-mail-with-qmail
@findex message-smtpmail-send-it
@findex smtpmail-send-it
@findex feedmail-send-it
@findex message-send-mail-with-mailclient
現在のバッファーをメールとして送るために使われる関数です。ディフォルト
は @code{message-send-mail-with-sendmail}、またはシステムによって
は @code{smtpmail-send-it} です。他
に @code{message-send-mail-with-mailclient},
@code{message-send-mail-with-mh}, @code{message-send-mail-with-qmail},
@code{message-smtpmail-send-it} および @code{feedmail-send-it} が使えま
す。

関数 @code{message-send-mail-with-sendmail} は記事を順番待ちに入れた
り (queuing) 送信するために、記事を @code{sendmail} コマンドにパイプしま
す。ローカルシステムが @code{sendmail} でメールを送信するように設定され
ていなくても、遠隔 @acronym{SMTP} サーバーに接続することができるのであれ
ば、@code{message-send-mail-function} を @code{smtpmail-send-it} に設定
することができます。@code{smtpmail} パッケージを使うために正しい設定がな
されているかどうか確認してください。例です:

@lisp
(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-default-smtp-server "YOUR SMTP HOST")
@end lisp

これと似たものに @code{message-smtpmail-send-it} があります。
ISP が @acronym{POP}-before-@acronym{SMTP} の認証を要求する場合に有用で
す。@xref{POP before SMTP, , POP before SMTP, gnus-ja, The Gnus Manual}.

@cindex X-Message-SMTP-Method
もし複数の @acronym{SMTP} 設定を使うことができて、あるメッセージは一つ
のメールサーバーを経由し、他のメッセージは別のものを通して出したい場合は、
@samp{X-Message-SMTP-Method} ヘッダーを使うことができます。以下はサポー
トされている値です:

@table @samp
@item smtpmail

@example
X-Message-SMTP-Method: smtp smtp.fsf.org 587
@end example

これは @samp{smtp.fsf.org} のポート 587 を経由してメッセージを送ります。

@example
X-Message-SMTP-Method: smtp smtp.fsf.org 587 other-user
@end example

これは上のものと同じですが、認証を行なうときに @samp{other-user} をユー
ザー名として使います。これは、同じサーバーに複数の @acronym{SMTP} アカウ
ントを持っている場合に役立ちます。

@item sendmail

@example
X-Message-SMTP-Method: sendmail
@end example

これはローカルにインストールされている sendmail や exim などを経由してメッ
セージを送ります。
@end table

@item message-mh-deletable-headers
@vindex message-mh-deletable-headers
ほとんどの版の MH は、この変数に設定されているヘッダーを含んでいるメッセー
ジを食わされるのを嫌います。この変数が @code{nil} でない (これがディフォ
ルトですが) なら、これらのヘッダーは MH を介してメッセージを送る前に取り
除かれます。あなたの MH がこれらのヘッダーを扱うことができるのであれば、
@code{nil} に設定してください。

@item message-qmail-inject-program
@vindex message-qmail-inject-program
@cindex qmail
qmail-inject プログラムがある場所です。

@item message-qmail-inject-args
@vindex message-qmail-inject-args
qmail-inject プログラムに渡す引数です。これは文字列のリストで、それぞれ
の引数は一つの文字列でなければなりません。これは関数でも構いません。

例えば、メールが弾かれてしまった場合の正しい戻り先を指定したり、メーリン
グリストのサーバーのアドレスの仕様規定に対処するために“envelope sender”
のアドレスを設定したい場合は、この変数
を @code{'("-f" "you@@some.where")} にすれば良いでしょう。

訳注:“envelope sender”はメールを送信するときに MTA に渡す真の送信者の
アドレスで、ヘッダーの @samp{From:} 行に書くものとは別です。

@item message-sendmail-f-is-evil
@vindex message-sendmail-f-is-evil
@cindex sendmail
@code{nil} ではない値にすると、sendmail のコマンド行
に @samp{-f username} を付加しません。そうすることは、付加するようにして
おくより邪悪ですらあるでしょう。

訳注: ディフォルトでは“envelope sender”を指定するために付加します。
sendmail のディフォルトの動作では、それを指定されると「真の送信者が書き
換えられた」という意味にも解釈されることが書かれ
た @samp{X-Authentication-Warning:} ヘッダーを追加します。

@item message-sendmail-envelope-from
@vindex message-sendmail-envelope-from
@code{message-sendmail-f-is-evil} が @code{nil} のとき、この文字列
で @acronym{SMTP} エンベロープで使うアドレス (“envelope sender”) を指
定します。@code{nil} だったら @code{user-mail-address} を使います。
@code{header} というシンボルだったら、メッセージの @samp{From} ヘッダー
を使います。

@item message-mailer-swallows-blank-line
@vindex message-mailer-swallows-blank-line
システムのメイラーがヘッダーと本文を一緒にしてしまう場合は @code{nil} で
はない値に設定してください。(SunOS 4 において sendmail がリモートモード
で動作する場合が該当します。) 値は、障害が実際に起きるかどうかをテストす
るための式にすべきです。

訳注: 具体的には、本文の第一行目以降にヘッダーのようなテキストがあると、
それらがヘッダーの一部だと見なされてしまう問題です。

@item message-send-mail-partially-limit
@vindex message-send-mail-partially-limit
@cindex split large message
message/partial として送信されるメッセージのサイズの制限です。それを越え
たらメッセージを分割して送るべきメッセージの大きさの下限を、文字数で換算
した値です (訳注: 日本語的には「下限」ではなく「上限」)。@code{nil} だっ
たら (それがディフォルトです)、サイズは無制限になります。
@end table

@node News Headers
@section ニュースヘッダー

@vindex message-required-news-headers
@code{message-required-news-headers} はヘッダーのシンボルのリストです。
これらのヘッダーは自動的に作成されるか、もしくはそれが不可能であれば (訳
注: 値が自動で定まらなければ)、利用者に入力してもらうことを要求します。
以下のシンボルが使えます:

@table @code
@item From
@cindex From
@findex user-full-name
@findex user-mail-address
この必須のヘッダーは @code{message-make-from} 関数によって作られます。そ
れは変数 @code{message-from-style}, @code{user-full-name},
@code{user-mail-address} に依存します。

@item Subject
@cindex Subject
この必須のヘッダーは、まだ存在しない場合は入力を求められます。

@item Newsgroups
@cindex Newsgroups
この必須のヘッダーは、記事を投稿するニュースグループを指定します。まだ存
在しない場合は入力を求められます。

@item Organization
@cindex organization
@vindex message-user-organization
@vindex message-user-organization-file
このあっても無くても良いヘッダーは、@code{message-user-organization} 変
数に応じた値が作られます。この変数が @code{t} だった
ら @code{message-user-organization-file} が使われます。この変数は文字列
でも良いし (その場合はその文字列が使われます)、関数であっても構いませ
ん (その関数は引数無しで呼ばれ、文字列を返さなければなりません)。

@item Lines
@cindex Lines
このあっても無くても良いヘッダーは Message が計算して作ります。

@item Message-ID
@cindex Message-ID
@vindex message-user-fqdn
@vindex mail-host-address
@vindex user-mail-address
@findex system-name
@cindex Sun
@cindex i-did-not-set--mail-host-address--so-tickle-me
この必須のヘッダーは Message によって作成されます。日付、時刻、 (ローカ
ル部のための) 利用者名、およびドメイン部に基づいたユニークな ID です。ド
メイン部については、有効な FQDN (完全に条件を満たしたドメイン名) らしい
ものが見つからない場合、message は @code{message-user-fqdn},
@code{system-name}, @code{mail-host-address} およ
び @code{message-user-mail-address} (すなわ
ち @code{user-mail-address}) を (この順で) 探します。

@item User-Agent
@cindex User-Agent
このあっても無くても良いヘッダーは、ローカル変
数 @code{message-newsreader} に従って作られます。

@item In-Reply-To
このあっても無くても良いヘッダーは、返答しようとしている記事
の @code{Date} と @code{From} ヘッダーを元に作られます。

@item Expires
@cindex Expires
@vindex message-expires
このあろうが無かろうが本当にどうでも良いヘッダーは、
@code{message-expires} 変数に従って挿入されます。これを使うことは強く非
難されているので、自分が何をしているかをわかっていないなら、使うべきでは
ありません。

@item Distribution
@cindex Distribution
@vindex message-distribution-function
このあっても無くても良いヘッダーは、
@code{message-distribution-function} 変数が指定する関数が作ります。これ
を使うことは非難されていて、非常に誤解されたヘッダーです。

訳注: @code{message-distribution-function} のディフォルト値
は @code{nil} なので、そのままではこれを指定して
も @samp{Distribution:} ヘッダーは挿入されません。@kbd{C-c C-f C-d} 命令
を使って、手で記入することはできます。ただし配送範囲の制限はニュースサー
バーが管理すべきであって、利用者が記入する必要は普通は無いはずです。

@item Path
@cindex path
@vindex message-user-path
このあろうが無かろうが本当にどうでも良いヘッダーは、おそらく決して (利用
者が) 使ってはいけないものです。しかしいくつかの @emph{とても} 古いサー
バーは、このヘッダーが存在することが必要なのです。
@code{message-user-path} 変数が、この @code{Path} ヘッダーをどういう見栄
えにするかをさらに制御します。@code{nil} だったらサーバー名を端点 (leaf
node) として使います。文字列だったら、その文字列を使います。それが文字列
でも @code{nil} でもなかったら、利用者の名前だけを使います。しかし、この
変数をいじくらなければならなくなる機会は非常に少ないでしょう。
@end table

@findex yow
@cindex Mime-Version
加えて、このリストに cons を入れることができます。こ
の cons の @sc{car} はシンボルでなければなりません。このシンボルの名前は
ヘッダー名です。また @sc{cdr} は、このヘッダーの値としてそのまま入れられ
る文字列か関数のどちらかです。例えば @code{Mime-Version: 1.0} を挿入した
い場合は、リストに @code{(Mime-Version . "1.0")} を入れなければなりませ
ん。もし滑稽な引用文を挿入したいのなら、@code{(X-Yow . yow)} のようなも
のをリストに入れることができるでしょう。そうすると、関数 @code{yow} が引
数無しで呼ばれます。

@sc{car} が @code{optional} である cons をリストが含んでいる場合は、そ
の cons の @sc{cdr} が @code{nil} でないときだけ (その @sc{cdr} が) 挿入
されます。

このリストからある項目を消したいときは、以下の Lisp の切れ端が役に立つで
しょう。他の要素を削除したいときはそれに合わせてください。

@lisp
(setq message-required-news-headers
      (delq 'Message-ID message-required-news-headers))
@end lisp

出て行くニュース記事をカスタマイズするための他の変数:

@table @code
@item message-syntax-checks
@vindex message-syntax-checks
出て行くメッセージの、どの構文の検査をすべきではないかを制御します。例え
ば、長い署名の検査を禁止するには、このリストに

@lisp
(signature . disabled)
@end lisp

を加えてください。

有効な検査は以下の通りです (訳注: これらの検査の一部はメールでも行なわれ
ます):

@table @code
@item approved
@cindex approved
記事に @code{Approved} ヘッダーがあるかどうかを調べます。それは司会者の
ような人だけが含めるはずのものです。
@item continuation-headers
空白で始まらない継続したヘッダー行があるかどうかを調べます。
@item control-chars
使ってはいけない文字を調べます。
@item empty
記事が空かどうかを調べます。
@item existing-newsgroups
@code{Newsgroups} と @code{Follouup-to} ヘッダーに記入されているニュース
グループが存在するかどうかを調べます。
@item from
@code{From} ヘッダーがまともかどうかを調べます。
@item illegible-text
本文に印字できない文字があるかどうかを調べます。
@item invisible-text
バッファーに見えないテキストがあるかどうかを調べます。
@item long-header-lines
長すぎるヘッダー行を調べます。
@item long-lines
@cindex long lines
本文の中の長すぎる行を調べます。
@item message-id
@code{Message-ID} が構文的にまともかどうかを調べます。
@item multiple-headers
複数の同じヘッダーの存在を調べます。
@item new-text
メッセージに新しい文があるかどうか (訳注: 引用ばかりでないかどうか) を調
べます。
@item newsgroups
空でない @code{Newsgroups} ヘッダーがあるかどうかを調べます。
@item quoting-style
最後の引用部分に続くテキストがあるかどうかを調べます。
@item repeated-newsgroups
@code{Newsgroups} と @code{Followup-to} ヘッダーで、同じグループ名が繰り
返し使われているかどうかを調べます。
@item reply-to
@code{Reply-To} ヘッダーがまともかどうかを調べます。
@item sender
@cindex Sender
@code{From} ヘッダーが変だったら、新しい @code{Sender} ヘッダーを挿入し
ます。
@item sendsys
@cindex sendsys
@samp{Sendsys:} か @samp{Version:} ヘッダーがあるかどうかを調べます (訳
注: いずれもニュースの管理人だけが使うものです)。
@item shoot
@code{Message-ID} ヘッダーのドメイン項がまともかどうかを調べます。
@item shorten-followup-to
投稿するグループの数を @code{Followup-to} ヘッダーを付け加えること
によって少なくするかどうかを調べます (訳注: 複数のニュースグルー
プに投稿する記事に @code{Followup-to} ヘッダーが無い場合に発動され、
@code{Followup-to} ヘッダーに記入する値の入力を要求します)。
@item signature
署名の長さを調べます。
@item size
サイズが大きすぎないかどうかを調べます。
@item subject
空でない @code{Subject} ヘッダーがあるかどうかを調べます。
@item subject-cmsg
ニュースのコントロールメッセージのような表題があるかどうかを調べます。
(訳注: 表題が @samp{cmsg} で始まるもので、ニュースの管理人だけが使います。
一般の利用者がニュース記事の取り消し (cancel) を行なうときにも使いますが、
その場合は、この検査を通らずに、それ専用の枠組みで実行されます。)
@item valid-newsgroups
@code{Newsgroups} と @code{Followup-to} ヘッダーが構文的に正しいかどうか
を調べます。
@end table

ディフォルトでは、これらすべての条件が調べられます。ただ
し @code{message-insert-canlock} が @code{nil} だったらディフォルトでは
検査が行なわれない @code{sender} を除きます。@xref{Canceling News}.

@item message-ignored-news-headers
@vindex message-ignored-news-headers
投稿する前に取り除かれるヘッダーの正規表現です。
ディフォルトは@*
@samp{^NNTP-Posting-Host:\\|^Xref:\\|^[BGF]cc:\\|^Resent-Fcc:\\|@*
^X-Draft-From:\\|^X-Gnus-Agent-Meta-Information:} です。

@item message-default-news-headers
@vindex message-default-news-headers
この文字列はニュースとして初期化されたすべてのメッセージバッファーの、ヘッ
ダーの最後尾に挿入されます。
@end table

@node News Variables
@section ニュース変数

@table @code
@item message-send-news-function
@vindex message-send-news-function
現在のバッファーをニュースとして送るために使われる関数です。ディフォルト
は @code{mesage-send-news} です。

@item message-post-method
@vindex message-post-method
できあがったニュースメッセージを投稿するために使われる Gnus の「選択方法」
(詳細は Gnus マニュアルを見てください) です。
@end table

@node Insertion Variables
@section 挿入するための変数

@table @code
@item message-cite-style
@vindex message-cite-style
返信するときに使う総体的な様式です。引用と返信文の位置関係をどうするか、
どんな形式で引用するか、シグネチャをどこに置くか、というような物事をこれ
で決定します。

値は @code{nil} (どの変数も覆しません) またはディフォルト値を覆すため
の @code{(VARIABLE VALUE)} というペアの let 型リストのどちらかです。

特定のグループのためにこの変数を設定するに
は @code{gnus-posting-styles} を参照してください。よく使われているいろい
ろなメール・エージェントをまねた設定が @code{message-cite-style-*} とい
う変数に用意されています。

@item message-cite-reply-position
@vindex message-cite-reply-position
返信文をどこに置くかを指定します。使うことができる様式には、インラインで
返信するための @code{traditional}、先頭に返信文を書く (top-posting) ため
の @code{above}、および文末に返信文を書くための @code{below} があります。

@item message-ignored-cited-headers
この正規表現に合致するすべてのヘッダーが、引用のために yank されたメッセー
ジから取り除かれます。ディフォルトは @samp{.} で、すべてのヘッダーが取り
除かれると言うことです。

@item message-cite-prefix-regexp
@vindex message-cite-prefix-regexp
行の引用接頭語として見なすことができるものに最大限に合致する正規表現です。

@item message-citation-line-function
@vindex message-citation-line-function
@cindex attribution line
引用行を挿入するために呼ばれる関数です。ディフォルト
は @code{message-insert-citation-line} で、これは引用行を次のようにしま
す:

@example
Hallvard B Furuseth <h.b.furuseth@@usit.uio.no> writes:
@end example

@c FIXME: `message-insert-formatted-citation-line' と
@c `message-citation-line-format' を追加すべし。
この関数が呼ばれたとき、ポイントはメッセージの本文の先頭に置かれるでしょ
う。

なお Gnus には、`writes:' の上でクリックすると引用されたテキストを隠す機
能があります。もしあなたが度を越して引用行を変更してしまうと、それを読む
人たちも彼らの Gnus を対応させなければならなくなるでしょう。変
数 @code{gnus-cite-attribution-suffix} を参照してください。詳細
は @xref{Article Highlighting, ,記事のハイライト, gnus-ja, The Gnus
Manual}, にあります。

@item message-yank-prefix
@vindex message-yank-prefix
@cindex yanking
@cindex quoting
記事に返答かフォローアップをするときは、普通はあなたが応答しようとしてい
る人を引用したいでしょう。引用文の挿入は“yank”することによって行なわれ、
それぞれの yank された行の前に @code{message-yank-prefix} が付けられま
す (すでに引用符 @code{message-yank-cited-prefix} が付いている行と、
@code{message-yank-empty-prefix} が付けられた空行は対象外です)。ディフォ
ルトは @samp{> } です。

@item message-yank-cited-prefix
@vindex message-yank-cited-prefix
@cindex yanking
@cindex cited
@cindex quoting
すでに引用されたテキストを含む記事から yank するとき、それぞれの行にはこ
の変数の値が前置されます。ディフォルトは @samp{>} です。
@code{message-yank-prefix} も参照してください。

@item message-yank-empty-prefix
@vindex message-yank-empty-prefix
@cindex yanking
@cindex quoting
記事からテキストを引用するとき、それぞれの空行にこの変数の値が前置されま
す。ディフォルトは @samp{>} です。この変数を空文字に設定することによって、
引用されたテキストを自動的に段落分けすることができます。
@code{message-yank-prefix} も参照してください。

@item message-indentation-spaces
@vindex message-indentation-spaces
Yank されたメッセージを字下げするための空白の数です。

@item message-cite-function
@vindex message-cite-function
@findex message-cite-original
@findex message-cite-original-without-signature
元記事を引用するための関数です。ディフォルト
は @code{message-cite-original} で、これは単純に元のメッセージを挿入して、
それぞれの行の頭に @samp{> } をくっ付けます。
@code{message-cite-original-without-signature} は同様のことをしますが、
署名を省きます。

@item message-indent-citation-function
@vindex message-indent-citation-function
メールバッファーに挿入された引用文を修正するための関数です。これは関数の
リストであることもできます。それぞれの関数
は @code{(point)} と @code{(mark t)} の間で引用を見つけることができます。
そしてそれぞれの関数は、修正された引用文の周り (の修正前と同等の場所) に
ポイントとマークが置かれたままになっているようにしなければなりません。

@item message-mark-insert-begin
@vindex message-mark-insert-begin
挿入された何らかのテキストの始まりに、印を付けるための文字列です。

@item message-mark-insert-end
@vindex message-mark-insert-end
挿入された何らかのテキストの終りに、印を付けるための文字列です。

@item message-signature
@vindex message-signature
メッセージバッファーの最後に挿入される文字列です。もし @code{t} (これが
ディフォルトです) であれば、ファイル @code{message-signature-file} が代
わりに挿入されます。もし関数であれば、関数の結果が代わりに使われます。も
し式であれば、式の結果が変わりに使われます。この変数が @code{nil} だった
ら、署名はまったく挿入されません。

@item message-signature-file
@vindex message-signature-file
バッファーの最後に挿入される、署名の入っているファイルです。ディレクトリー
が指定されていると、@code{message-signature-directory} の値はたとえ設定
されていても無視されます。ディフォルトは @file{~/.signature} です。

@item message-signature-directory
@vindex message-signature-directory
署名ファイルを置くディレクトリーの名前です。そういうファイルをたくさん持っ
ているならば、例えば投稿様式 (Gnus posting styles) でそれらを切り替える
際に役立ちます。もし @code{nil} だったら (それがディフォルト)、
@code{message-signature-file} がディレクトリーも指定すると見なされます。

@item message-signature-insert-empty-line
@vindex message-signature-insert-empty-line
@code{t} (ディフォルト値) だったら、署名と本文を分離する記号の前に空行が
挿入されます。
@end table

RFC1036bis は、署名はその前に @samp{-- } の三文字だけの行があるべきであ
ると言っていることに注意してください。これは受け手が自動的に署名を認識し
て、処理をすることを簡単にするためです。ですから、その、あなたの美しいデ
ザインを、それが台無しにしていると感じても、それらの文字を取り除かないで
ください。

署名は四行より多くなるべきでは無いと言うことも注意してください。
@acronym{ASCII} の絵を入れることは、皆にあなたが馬鹿で何も重要なことは言
わないということを信じさせるための効果的な方法です。

@node Various Message Variables
@section いろいろなメッセージ変数

@table @code
@item message-default-charset
@vindex message-default-charset
@cindex charset
@acronym{MIME} 文字セット名のシンボルです。メッセージ内の
非-@acronym{ASCII} 文字は、この文字セットを使ってエンコードされることに
なっています。ディフォルトは @sc{mule} 機能が無い Emacsen で
は @code{iso-8859-1} です。それ以外では @code{nil} で、利用者に尋ねるこ
とを意味します。(この変数は @sc{mule} 機能が無い Emacs でのみ使われます。)
@sc{mule} から @acronym{MIME} への置き換え処理の詳細
は @xref{Charset Translation, ,文字セットの変換, emacs-mime-ja, Emacs
MIME Manual}, を参照してください。

@item message-fill-column
@vindex message-fill-column
@cindex auto-fill
メッセージバッファーで行がこの桁数を越えると自動的な折り返しを起こすべき、
バッファーローカルな値です。@code{nil} ではない値 (ディフォルト) でメッ
セージバッファーの自動折り返しが ON になります。

@item message-signature-separator
@vindex message-signature-separator
署名と本文を分離する記号に合致する正規表現です。ディフォルト
は @samp{^-- *$} です。

@item mail-header-separator
@vindex mail-header-separator
ヘッダーを本文から分けるために使われる文字列です。ディフォルト
は @samp{--text follows this line--} です。

@item message-directory
@vindex message-directory
メールに関係する多くの処理で使われるディレクトリーです。ディフォルト
は @file{~/Mail/} です。メールに関する他のファイル名やディレクトリー名を
指定する変数の値は、この @code{message-directory} の値を基点にして派生し
ます。

@item message-auto-save-directory
@vindex message-auto-save-directory
Gnus が動作していないときに Message がバッファーを自動保存するディレクト
リーです。@code{nil} だったら Message は自動保存を行ないません。ディフォ
ルトは @file{~/Mail/drafts/} です。

@item message-signature-setup-hook
@vindex message-signature-setup-hook
メッセージバッファーを初期化するときに実行されるフックです。それはヘッダー
が挿入された後の、まだ署名が挿入されていないときに実行されます。

@item message-setup-hook
@vindex message-setup-hook
メッセージバッファーを初期化する処理の最後に、まだ yank される文章が挿入
されていないときに実行されるフックです。

@item message-header-setup-hook
@vindex message-header-setup-hook
ヘッダーを初期化した後に、ヘッダーに範囲を狭めて呼ばれるフックです。

例えば、Gnus を実行していて、すべてのニュース記事とメーリングリストに送
るすべてのメッセージに @samp{Mail-Copies-To} ヘッダーを挿入したいのであ
れば、以下のようなことができます:

@lisp
(defun my-message-header-setup-hook ()
  (let ((group (or gnus-newsgroup-name "")))
    (when (or (message-fetch-field "newsgroups")
              (gnus-group-find-parameter group 'to-address)
              (gnus-group-find-parameter group 'to-list))
      (insert "Mail-Copies-To: never\n"))))

(add-hook 'message-header-setup-hook
          'my-message-header-setup-hook)
@end lisp

@item message-send-hook
@vindex message-send-hook
メッセージを送る前に実行されるフックです。

もし送る前に特定のヘッダーを加えたいのであれば、
@code{message-add-header} 関数をこのフックに使うことができます。例えば:
@findex message-add-header

@lisp
(add-hook 'message-send-hook 'my-message-add-content)
(defun my-message-add-content ()
  (message-add-header "X-In-No-Sense: Nonsense")
  (message-add-header "X-Whatever: no"))
@end lisp

この関数は、そのヘッダーがすでに存在している場合はヘッダーを加えません。

@item message-send-mail-hook
@vindex message-send-mail-hook
メールメッセージを送る前に実行されるフックです。このフックは非常に遅い時
期---メッセージがメールとして実際に送信される直前---に実行されます。

@item message-send-news-hook
@vindex message-send-news-hook
ニュースメッセージを送る前に実行されるフックです。このフックは非常に遅い
時期---メッセージがニュースとして実際に送信される直前---に実行されます。

@item message-sent-hook
@vindex message-sent-hook
メッセージを送った後で実行されるフックです。

@item message-cancel-hook
@vindex message-cancel-hook
ニュース記事の取り消し (cancel) を行なうときに実行されるフックです。

@item message-mode-syntax-table
@vindex message-mode-syntax-table
メッセージモードのバッファーで使われる構文テーブルです。

@item message-cite-articles-with-x-no-archive
@vindex message-cite-articles-with-x-no-archive
非-@code{nil} だったら、@samp{X-No-Archive} が設定されている記事から引用
されたテキストを取り除きません。この変数が @code{nil} になっていても、
@code{undo} のキー操作を行なうことによって取り除かれたテキストを元に戻す
ことができます。

@item message-strip-special-text-properties
@vindex message-strip-special-text-properties
Emacs はメッセージ作成をいろいろに壊してしまうことができる多くの特別なテ
キスト属性 (text properties) を持っています。この変数が非-@code{nil} に
設定されていると、message はそれらの属性をメッセージを作成するバッファー
から剥ぎ取ります。しかしいくつかのパッケージは、動作するためにそれらの属
性が存在していることが必要です。それらのパッケージの一つを使うのならば、
このオプションを off にして、メッセージが壊れてしまわないことを祈ってく
ださい。

訳注: 日本語入力のためのパッケージである tamago 第四版は、まさにテキスト
属性を巧みに駆使しています。そのため、この変数が非-@code{nil} に設定され
ていても、message は tamago が使うテキスト属性だけは特別扱いして、剥ぎ取
らないようになっています。

@item message-send-method-alist
@vindex message-send-method-alist
@findex message-mail-p
@findex message-news-p
@findex message-send-via-mail
@findex message-send-via-news
メッセージを送出するための方法を指定する連想リストです。それぞれの要素は
次の形式になっています:

@lisp
(@var{type} @var{predicate} @var{function})
@end lisp

@table @var
@item type
方法の呼称を指定するシンボルです。

@item predicate
そのメッセージが @var{type} の型のメッセージであるかどうかを判定するため
に、引数無しで呼ばれる関数です。関数はそのメッセージがあるバッファーで呼
び出されます。

@item function
@var{predicate} が @code{nil} ではない値を返したときに呼ばれる関数です。
@var{function} は一つの引数---接頭引数 (訳注: @kbd{C-c C-c} 命令に先立っ
て与えられた接頭引数)---と共に呼ばれます。
@end table

ディフォルトは次のようになっています:

@lisp
((news message-news-p message-send-via-news)
 (mail message-mail-p message-send-via-mail))
@end lisp

@code{message-news-p} 関数はそのメッセージがニュース記事のように見える場
合に @code{nil} ではない値を返し、@code{message-send-via-news} 関数
は @code{message-send-news-function} 変数 (@pxref{News Variables}) に設
定された関数を呼び出して、そのメッセージを送信します。
@code{message-mail-p} 関数はそのメッセージがメールのように見える場合
に @code{nil} ではない値を返し、@code{message-send-via-mail} 関数
は @code{message-send-mail-function} 変数 (@pxref{Mail Variables}) に設
定された関数を呼び出して、そのメッセージを送信します。

@code{message-send-method-alist} の各要素は先頭から順にすべて試されるの
で、例えば有効な @samp{Newsgroups:} ヘッダーと @samp{To:} ヘッダーの両方
を持っているメッセージは、まずニュースとして送信された後にメールとしても
送信されます。
@end table

@node Sending Variables
@section 送るための変数

@table @code
@item message-fcc-handler-function
@vindex message-fcc-handler-function
出て行く記事を保存するために呼ばれる関数です。この関数は記事を格納するた
めのファイル名と共に呼ばれます。ディフォルトの関数は Unix mailbox 様式で
保存する @code{message-output} です。

@item message-courtesy-message
@vindex messsage-courtesy-messsage
複合メッセージ (訳注: ニュースとメールの両方で送信するメッセージ) を送る
ときに、この文字列がメールで送られる複製の方の本文の先頭に挿入されます。
もしその文字列が @samp{%s} 書法仕様を含んでいたら、記事が投稿されたニュー
スグループがそこに挿入されます。この変数が @code{nil} だったら、そのよう
な親切メッセージは加えられません。ディフォルト値は @samp{"The following
message is a courtesy copy of an article\nthat has been posted to %s as
well.\n\n"} です。

@item message-fcc-externalize-attachments
@vindex message-fcc-externalize-attachments
@code{nil} だったら、Fcc で保存するメッセージのコピーに通常のパートとし
てファイルを添付します。非-@code{nil} だった場合は、外部パートとしてロー
カルファイルを添付します (訳注: そのパートをローカルファイルに書き出し
て、メッセージにはそのファイルの格納場所を示すタグだけを含んでいるパート
を付けます)。

@item message-interactive
@vindex message-interactive
@code{nil} でなかったら、メッセージを送信するときにエラーが出るのを待っ
て表示します。@code{nil} だったら、エラーの報告をメールで行ないます。

@item message-confirm-send
@vindex message-confirm-send
@code{nil} でなかったら、Gnus はメッセージを送信するときに確認を求めます。
@end table

@node Message Buffers
@section メッセージバッファー

Message はあなたがメッセージバッファーを要求したときに、ユニークな (唯一
無二の) バッファー名で新しいバッファーを作ります。メッセージを送ったとき
に、バッファーは普通は削除されません。その名前は変更されて、特定の数の古
いメッセージバッファーが残されます。

@table @code
@item message-generate-new-buffers
@vindex message-generate-new-buffers
メッセージを書くために新しいメッセージバッファーを作るかどうかを制御しま
す。次の値が有効です:

@table @code
@item nil
メッセージのやり方でバッファーの名前を生成 (例えば *mail*, *news*, *mail
to whom*, *news on group* など) して、その名前の既存のバッファーで編集を
続行します。そのようなバッファーが無い場合は、新たに作られます。

@item unique
@item t
メッセージのやり方で生成された名前で新しいバッファーを作ります。

@item unsent
@code{unique} に似ていますが、バッファー名が "*unsent " で始まります。

@item standard
@code{nil} に似ていますが、*mail message* のような、より単純なバッファー
名になります。
@end table

@table @var
@item function
もしこれが関数だったら、その関数を三つの引数---その型、送り先のアドレス、
グループ名---と共に呼びます (これらのどれもが @code{nil} でありえます)。
その関数は新しいバッファー名を返さなければなりません。
@end table

ディフォルト値は @code{unsent} です。

@item message-max-buffers
@vindex message-max-buffers
この変数はどのくらい古いメッセージバッファーを残しておくかを指定します。
これより多いメッセージバッファーがあれば、一番古いバッファーが削除されま
す。ディフォルトは 10 です。この変数が @code{nil} だったら、古いメッセー
ジバッファーは削除されません。

@item message-send-rename-function
@vindex message-send-rename-function
メッセージを送った後で、バッファーの名前は、例え
ば @samp{*reply to Lars*} から @samp{*sent reply to Lars*} に変更されま
す。もしこれが好きではないのならば、この変数をあなたの好きな方法でバッ
ファーの名前を変更する関数に設定してください。そもそもバッファー名を変更
することを好まないのであれば、次のようにすれば良いでしょう:

@lisp
(setq message-send-rename-function 'ignore)
@end lisp

@item message-kill-buffer-on-exit
@vindex message-kill-buffer-on-exit
@code{nil} でなければ、終了時にすぐにバッファーを削除します。
@end table

@node Message Actions
@section メッセージが請け負う仕事

Message がニュース/メールリーダーから使われているときに、リーダーにはメッ
セージが送られた後で行なう何らかの仕事が課せられることがよくあります。お
そらく前のウィンドウ配置に戻したり、記事にそれが返答されたことを表す印を
付けるようなことでしょう。

@vindex message-kill-actions
@vindex message-postpone-actions
@vindex message-exit-actions
@vindex message-send-actions
利用者はいろいろな方法でメッセージバッファーを終わらせることができます。
最も良くあるのは @kbd{C-c C-c} で、それはメッセージを送って終了します。
他の可能性としては @kbd{C-c C-s} があります。これはメッセージを送るだけ
です。@kbd{C-c C-d} はメッセージを後で編集することにして、メッセージバッ
ファーを @code{bury-buffer} します (訳注: それを Emacs 上に存在するバッ
ファーのリストの最後の要素にして隠します)。そして @kbd{C-c C-k} はメッセー
ジバッファーを削除します。これらのそれぞれの動作は、それらと関連付けられ
た請け負い仕事を含んでいるリストを持っています。そのリスト
は @code{message-send-actions}, @code{message-exit-actions},
@code{message-postpone-actions} および @code{message-kill-actions} です。

Message はこれらのリストを操作するために @code{message-add-action} 関数
を用意しています。第一引数は加えられる請け負い仕事で、残りの引数はどのリ
ストにこの請け負い仕事を加えるかを指定します。これは Gnus から使う例です:

@lisp
  (message-add-action
   `(set-window-configuration ,(current-window-configuration))
   'exit 'postpone 'kill)
@end lisp

これはメッセージバッファーが削除 (kill)、延期 (postpone)、終了 (kill) さ
れたときに、Gnus のウィンドウ配置を復活させるためのものです。

第一引数に与える「請け負い仕事」は次のどれかです: 普通の関数、
@code{car} が関数で @sc{cdr} が引数のリストであるリスト、また
は @code{eval} (評価) される式です。

訳注: たぶん実際のソースコードを見た方が話が早いでしょう。

@node Compatibility
@chapter 互換性
@cindex compatibility

Message は事実上それ自身の変数しか使わず (*)、古い @code{mail-} 変数は考
慮に入れません。これらの変数を Message が考えに入れるようにさせたいので
あれば、以下のものを @file{.emacs} ファイルに入れれば良いでしょう:

@lisp
(require 'messcompat)
@end lisp

これは多くの Message 変数を、それらに対応する @code{mail-} 変数の値に基
づいて初期化します。

訳注*: 実際には随所で Gnus の変数を使っています。世の中うまくいきません。

@node Appendices
@chapter 付記

@menu
* Responses:: 応答がどこに行くかを決定する標準の規則
@end menu

@node Responses
@section 応答

メッセージがどこに行くかを決定するために、ディフォルトでは以下のアルゴリ
ズムが使われます。

@table @dfn
@item reply
「返答」(reply) は、メッセージを送った人 @emph{だけ} にメールで応答した
いときのものです。受取人は一人しかいません。受取人が誰であるかを決定する
ために、以下のヘッダーを順番に調べます:

@table @code
@item Reply-To

@item From
@end table

@item wide reply
「広い返答」(wide reply) は、応答しようとしているメッセージに書かれてい
た @emph{すべての} 人々へのメールによる応答です。以下のヘッダーから抽出
したすべてのメールアドレスを連結して、出て行く @code{To}/@code{Cc} ヘッ
ダーを作ります:

@table @code
@item From
(@code{Reply-To} が無い限りこれが使われますが、ある場合は代わりにそれが
使われます)。

@item Cc

@item To
@end table

@code{Mail-Copies-To} ヘッダーが存在していたならば、それも宛先のリストに
加えられます。このヘッダーが @samp{never} だったら、@code{From} (また
は @code{Reply-To}) のメールアドレスを除外しなければならないということで
す。

@item followup
「フォローアップ」(followup) はニュースで送る応答です。以下のヘッ
ダー (優先順位が高い順に並んでいます) で、どこに応答を送るかを決定します:

@table @code
@item Followup-To

@item Newsgroups
@end table

もし @code{Mail-Copies-To} ヘッダーがあったならば、それ
が @samp{never} でない限り、新しい @code{Cc} ヘッダーの基として使われま
す。
@end table

@node GNU Free Documentation License
@chapter GNU フリー文書利用許諾契約書

訳注: @uref{http://www.opensource.jp/fdl/fdl.ja.html.euc-jp,
非公式な日本語訳} があります。

@include doclicense.texi

@node Index
@chapter Index
@printindex cp

@node Key Index
@chapter Key Index
@printindex ky

@bye

@c Local Variables:
@c coding: iso-2022-7bit
@c fill-column: 72
@c mode: texinfo
@c use-kuten-for-period: t
@c use-touten-for-comma: t
@c End:
@item

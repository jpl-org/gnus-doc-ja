\input texinfo-ja               @c -*- mode: texinfo -*-
@c %**start of header
@setfilename epa-ja.info
@settitle EasyPG Assistant User's Manual
@c %**end of header
@documentencoding UTF-8
@documentlanguage ja

@set VERSION 1.0.0

@copying
これは EasyPG アシスタント @value{VERSION} の説明書です。

Copyright @copyright{} 2007--2023 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''.

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.3 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分は指定しません。“A GNU Manual”は表表紙
テキスト、以下の (a) は裏表紙テキストです。この利用許諾契約書の複写は
「GNU フリー文書利用許諾契約書」という章に含まれています。

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.

(a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を複製したり変更す
る自由があります。」
@end quotation
@end copying

@dircategory Emacs misc features
@direntry
* EasyPG Assistant-ja: (epa-ja).   An Emacs user interface to GNU Privacy Guard (Japanese).
@end direntry

@titlepage
@title EasyPG Assistant

@author by Daiki Ueno
@page

@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top EasyPG Assistant User's manual
@cindex easypg assistant
@cindex gnu privacy guard
@cindex gnupg

EasyPG アシスタントは GNU Privacy Guard (GnuPG, @pxref{Top, , Top,
gnupg, Using the GNU Privacy Guard}) への Emacs ユーザーインターフェース
です。

EasyPG アシスタントは Emacs のためのオールインワン GnuPG インターフェー
スである EasyPG というパッケージの一部です。EasyPG は EasyPG ライブラリー
というライブラリー・インターフェースも含んでいます。

@ifnottex
@insertcopying
@end ifnottex

@c 残念ながら、このマニュアルのノード名は大文字と小文字の区別にあまり一
@c 貫性がありません。しかしノード名では大文字と小文字が区別されるので、
@c 外部参照を壊さないようにするためには、変更しないほうがよいでしょう。
@c Structure titles はより緩和されているので、一貫して title-case (ある
@c ルールに基づいて単語毎に先頭を大文字にする、またはしないやり方) に更
@c 新しました。
@c Fixme: Structure title(s) って何?

@menu
* Overview::
* Quick start::
* Commands::
* GnuPG version compatibility::
* GnuPG Pinentry::
* Caching Passphrases::
* Bug Reports::
* GNU Free Documentation License:: この文書の利用許諾契約書
* Concept Index::
* Key Index::
* Function Index::
* Variable Index::
@end menu

@node Overview
@chapter 概要
@cindex features of easypg assistant

EasyPG アシスタントは @acronym{GnuPG, GNU Privacy Guard} の Emacs フロン
トエンド・アプリケーションです。以下の機能を提供します:

@itemize @bullet
@item 鍵の管理
@item 領域の暗号や署名の操作
@item ファイルの暗号や署名の操作
@item Dired の統合
@item Mail モードの統合
@item *.gpg ファイルの自動暗号化/復号
@end itemize

@node Quick start
@chapter とりあえず始める
@cindex introduction to easypg assistant
@cindex gnupg documentation
@cindex documentation on gnupg
@cindex configuration of gnupg
@cindex introduction to gnupg

EasyPG アシスタントは Emacs や GnuPG の設定を何もしなくても使うことがで
きます。例えば対称鍵暗号を使ってファイルを自動的に暗号化したり復号化でき
ます。@ref{Encrypting/decrypting gpg files} を参照してください。ただ
し EasyPG アシスタントの機能の完全なセットを使うには、少なくとも最少限
の GnuPG の適切な設定が必要です。

John Michael Ashley の GNU プライバシー・ハンドブックはオンライン
で @uref{https://gnupg.org/documentation/guides.html, the GnuPG user guides} の
一部として入手可能で、GnuPG の使いかたと設定の入門方法を提供しています。
それとは対照的に、GnuPG マニュアル (@pxref{Top, , Top, gnupg, Using the
GNU Privacy Guard}) はより詳しいリファレンス マニュアルのようなものです。

EasyPG アシスタント・コマンドは @samp{epa-} で始まります。例えば、

@itemize @bullet
@item 鍵リングを眺めるには @kbd{M-x epa-list-keys}

@item 領域のクリアテキスト署名を作るには @kbd{M-x epa-sign-region}

@item ファイルを暗号化するには @kbd{M-x epa-encrypt-file}

@item キーサーバーにキーを問い合わせるには @kbd{M-xepa-search-keys}
@end itemize

EasyPG アシスタントは Emacs の他の機能性に統合することができるいくつかの
暗号や署名の機能を提供します。例えば @file{*.gpg} ファイルの暗号化と復号
です。

@node Commands
@chapter コマンド

この章は代表的な使い方のための様々なコマンドを紹介します。

@menu
* Key management::                      鍵の管理
* Cryptographic operations on regions:: 領域の暗号や署名の操作
* Cryptographic operations on files::   ファイルの暗号や署名の操作
* Dired integration::                   Dired の統合
* Mail-mode integration::               Mail モードの統合
* Encrypting/decrypting gpg files::     gpg ファイルの暗号化と復号
* Querying a key server::               キーサーバーへの問い合わせ
@end menu

@node Key management
@section 鍵の管理
@cindex key management

@cindex key ring, browsing
@cindex browse key ring
おそらく EasyPG アシスタントを使う最初の一歩は鍵リングを眺めることでしょ
う。@kbd{M-x epa-list-keys} はコマンドラインから使
う @samp{gpg--list-keys} に相当しています。

@deffn Command epa-list-keys name mode
公開鍵リングの @var{name} に合致するすべての鍵を表示します。
@end deffn

@noindent
その出力は次のようなものです。

@example
  u A5B6B2D4B15813FE Daiki Ueno <ueno@@unixuser.org>
@end example

@noindent
左端の桁の文字はその鍵の信頼度を表します。もし @samp{u} ならば、その鍵は
究極的に信頼されるものとして印されています。二つ目の桁はその鍵の ID、残
りはユーザー ID です。

@key{TAB} で項目を移動できます。ある項目で @key{RET} をタイプするかマウ
スの第1ボタンをクリックすると、選択した鍵のもっと詳細な情報を見ることが
できます。

@example
 u Daiki Ueno <ueno@@unixuser.org>
 u A5B6B2D4B15813FE 1024bits DSA
        Created: 2001-10-09
        Expires: 2007-09-04
        Capabilities: sign certify
        Fingerprint: 8003 7CD0 0F1A 9400 03CA  50AA A5B6 B2D4 B158 13FE
 u 4447461B2A9BEA2D 2048bits ELGAMAL_E
        Created: 2001-10-09
        Expires: 2007-09-04
        Capabilities: encrypt
        Fingerprint: 9003 D76B 73B7 4A8A E588  10AF 4447 461B 2A9B EA2D
@end example

@cindex private key ring, browsing
@noindent
秘密鍵リングを眺めるには @kbd{M-x epa-list-secret-keys} を使ってください。

@deffn Command epa-list-secret-keys name
秘密鍵リングの中の @var{name} に合致するすべての鍵を表示します。
@end deffn

@noindent
@file{*Keys*} バッファーではいくつかのコマンドを利用できます。よくある用
途はいくつかの鍵をファイルに書き出すことです。それには @kbd{m} をタイプ
して鍵を選択し、@kbd{o} をタイプした後でファイル名を入力してください。

以下は鍵の管理に関する他のコマンドです。それらのいくつかはファイルを対象
に入出力を行ない、他は現在設定されている領域が対象になります。

@cindex insert keys
@deffn Command epa-insert-keys keys
カーソルの後ろに選択された @var{keys} を挿入します。挿入する前に鍵を選択
することを促されます。ディフォルトでは鍵を OpenPGP の装甲フォーマットで
エンコードします。
@end deffn

@cindex import keys
@deffn Command epa-import-keys file
鍵を @var{file} から鍵リングに取り込みます。
@end deffn

@deffn Command epa-import-keys-region start end
鍵を @var{start} と @var{end} の間の現在の領域から鍵リングに取り込みます。
@end deffn

@deffn Command epa-import-armor-in-region start end
鍵を @var{start} と @var{end} の間の現在の領域にある OpenPGP の装甲フォー
マットから鍵リングに取り込みます。@code{epa-import-keys-region} との違い
は @code{epa-import-armor-in-region} が領域にある装甲を探して、それらを
逐一 @code{epa-import-keys-region} が処理することです。
@end deffn

@cindex delete keys
@deffn Command epa-delete-keys allow-secret
選択された鍵を取り除きます。@var{allow-secret} が @code{nil} でなかった
ら秘密鍵も取り除きます。
@end deffn

@node Cryptographic operations on regions
@section 領域の暗号や署名の操作
@cindex cryptographic operations on regions
@cindex region operations, cryptographic

@cindex decrypt region
@deffn Command epa-decrypt-region start end
@var{start} と @var{end} の間の現在の領域を復号します。復号されたテキス
トで領域を置き換えます。
@end deffn

@deffn Command epa-decrypt-armor-in-region start end
@var{start} と @var{end} の間の現在の領域にある OpenPGP 装甲を復号します。
@code{epa-decrypt-region} との違い
は @code{epa-decrypt-armor-in-region} が領域にある装甲を探して、それらを
逐一 @code{epa-decrypt-region} が処理することです。したがってこのコマン
ドは装甲の前後にある元のテキストを改変しません。
@end deffn

@cindex verify region
@deffn Command epa-verify-region start end
@var{start} と @var{end} の間の現在の領域を検証します。検証結果はミニバッ
ファーかポップアップされるウィンドウに送ります。領域を署名されたテキスト
で置き換えます。
@end deffn

@deffn Command epa-verify-cleartext-in-region
@var{start} と @var{end} の間の現在の領域にある OpenPGP のクリアテキスト・
ブロックを検証します。@code{epa-verify-region}との違い
は @code{epa-verify-cleartext-in-region} が領域にあるクリアテキスト・ブ
ロックを探して、それらを逐一 @code{epa-verify-region} が処理することです。
したがってこのコマンドはクリアテキスト・ブロックの前後にある元のテキスト
を改変しません。
@end deffn

@cindex sign region
@deffn Command epa-sign-region start end signers type
@var{start} と @var{end} の間の現在の領域に署名します。ディフォルトでは
クリアテキストの署名を作ります。接頭引数を与えると署名に使う鍵と署名のタ
イプを選択することを促されます。
@end deffn

@cindex encrypt region
@deffn Command epa-encrypt-region start end recipients sign signers
@var{start} と @var{end} の間の現在の領域を暗号化します。受取人を選択す
ることを促されます。接頭引数を与えると暗号化する前にテキストに署名するか
どうかを尋ねられ、yes と答えた場合は署名に使う鍵を選択することを促されま
す。
@end deffn

@node Cryptographic operations on files
@section ファイルの暗号や署名の操作
@cindex cryptographic operations on files
@cindex file operations, cryptographic

@cindex decrypt file
@deffn Command epa-decrypt-file file &optional output
@var{file} を復号します。もし複合した結果を格納するファイルの名前
を @var{output} で指定しないと、それを入力することを求めます。
@end deffn

@cindex verify file
@deffn Command epa-verify-file file
@var{file} を検証します。
@end deffn

@cindex sign file
@deffn Command epa-sign-file file signers type
@var{file} に署名します。接頭引数を与えると署名に使う鍵と署名のタイプを
選択することを促されます。
@end deffn

@cindex encrypt file
@deffn Command epa-encrypt-file file recipients
@var{file} を暗号化します。受取人を選択することを促されます。
@end deffn

@node Dired integration
@section Dired の統合
@cindex dired integration
@cindex directory operations
@cindex multiple file operations

EasyPG アシスタントは GNU Emacs の dired モードを拡張して、ファイルの暗
号や署名の操作ができるようにします。例えば次のようなことができます。

@example
M-x dired
(いくつかのファイルに選択マークを付けて)
: e (or M-x epa-dired-do-encrypt)
(`m' で受取人を選択して [OK] をクリック)
@end example

@noindent
以下のキーが割り当てられています。

@table @kbd
@item : d
@kindex : d
@findex epa-dired-do-decrypt
マークされたファイルを復号します。

@item : v
@kindex : v
@findex epa-dired-do-verify
マークされたファイルを検証します。

@item : s
@kindex : s
@findex epa-dired-do-sign
マークされたファイルに署名します。

@item : e
@kindex : e
@findex epa-dired-do-encrypt
マークされたファイルを暗号化します。
@end table

@node Mail-mode integration
@section Mail モードの統合
@cindex mail-mode integration
@cindex sending signed/encrypted mails

EasyPG アシスタントはインライン OpenPGP メッセージの作成を支援するために
マイナーモード @code{epa-mail-mode} を提供します。インライン OpenPGP メッ
セージは、現代的な MIME フォーマットを使わずに生の OpenPGP blobs (バイナ
リーデータ) をメッセージの本分に埋め込むことによって、署名をしたり暗号化
した電子メールを送る伝統的な形式です。

注: インライン OpenPGP は推奨されません。PGP/MIME を使うことを考えるべき
です。@uref{https://josefsson.org/inline-openpgp-considered-harmful.html,
Inline OpenPGP in E-mail is bad@comma{} Mm'kay?} を参照してください。

@noindent
@code{epa-mail-mode} を有効にすると以下のキーが割り当てられます。このマ
イナーモードを有効にするには @kbd{C-u 1 M-x epa-mail-mode} を実行するか、
カスタムのインターフェースを通して行なってくださ
い (@kbd{M-x customize-variable epa-global-mail-mode} を試してください)。

@table @kbd
@item C-c C-e C-d and C-c C-e d
@kindex C-c C-e C-d
@kindex C-c C-e d
@findex epa-mail-decrypt
現在のバッファーにある OpenPGP 装甲を復号します。

@item C-c C-e C-v and C-c C-e v
@kindex C-c C-e C-v
@kindex C-c C-e v
@findex epa-mail-verify
現在のバッファーにある OpenPGP のクリアテキストで署名されたメッセージを
検証します。

@item C-c C-e C-s and C-c C-e s
@kindex C-c C-e C-s
@kindex C-c C-e s
@findex epa-mail-sign
ディフォルトの鍵を使って現在のバッファーから署名されたメッセージを作りま
す。接頭引数を与えると鍵を対話的に選ぶことができます。

@item C-c C-e C-e and C-c C-e e
@kindex C-c C-e C-e
@kindex C-c C-e e
@findex epa-mail-encrypt
@vindex epa-mail-aliases
現在のバッファーから暗号化されたメッセージを作ります。ディフォルトではメー
ルのヘッダーの @samp{to}、@samp{cc}、および @samp{bcc} フィールドから受
取人リストを作ろうとします。受取人リストにあなたの鍵を含めたい場合
は @file{~/.gnupg/gpg.conf} で @samp{encrypt-to} オプションを使ってくだ
さい。この関数は @code{epa-mail-aliases} リストを使って受取人アドレスを
書き換えます。そのオプションを特定の受取人を暗号化の対象としないために使
うこともできます。

接頭引数を与えると、受取人の選択、署名するかどうか、およびどの鍵で署名す
るかを対話的に指示することができます。
@end table

@node Encrypting/decrypting gpg files
@section gpg ファイルの暗号化と復号
@cindex encrypting gpg files
@cindex decrypting gpg files
@cindex gpg files, encrypting and decrypting
@cindex automatic file encryption and decryption

ディフォルトでは名前が @file{.gpg} で終わるファイルは暗号化されたものと
して扱われます。即ちそのようなファイルを開くと、暗号化されたままのもので
はなく復号されたテキストがバッファーに挿入されます。同様にバッファー
を @file{foo.gpg} ファイルにセーブすると暗号化されたデータが書かれます。

初めてバッファーを暗号化ファイルに保存しようとすると、EasyPG アシスタン
トはバッファー @file{*Keys*} にある鍵のリストを表示して、そこで暗号化す
る対象の受信者を選択することができます。バッファーの形式の説明について
は @xref{Key management}.  この受信者を選択する手順は、この章で後述する
変数 @code{epa-file-encrypt-to} および @code{epa-file-select-keys} をカ
スタマイズすることによって効率化することができます。

@cindex symmetric encryption, passphrase entry for
この段階で受信者を選択しない場合、EasyPG アシスタントは対称鍵暗号を使い
ます。その結果、バッファーを保存するたびにパスフレーズを 2回入力しなけれ
ばならないし、ファイルを読み取るときにも頻繁にパスフレーズの入力が必要に
なります。それは、GnuPG エージェントは、少なくともしばらくの間ファイル読
み取り用にパスフレーズをキャッシュしますが、バッファーの保存用にはキャッ
シュしないからです。より多くの情報は @xref{Caching Passphrases}.

@cindex public key encryption, passphrase entry for
自分で鍵の対を作った場合@footnote{共有する予定のないファイルを暗号化およ
び復号するときは、鍵の対を作る際に受信者として電子メールアドレスを使用す
る必要はありません。@code{backup} や @code{account database} など、鍵の
対の使途に関する情報を提供する自由形式の文字列を使うこともできます。}、
それは受信者として選択することができ、EasyPG アシスタントはそのファイル
に公開鍵暗号を使用します。GnuPG は公開鍵を使って暗号化を実行するので、バッ
ファー保存の場合はパスフレーズの入力を求められませんが、GnuPG エージェン
トのキャッシュ設定に応じて、ファイル読み取りの場合はパスフレーズの入力を
求められることがあります。

@cindex temporary files created by easypg assistant
上述のように、ファイルを暗号化および復号するために EasyPG アシスタントは
ある特定の状況の下では、処理するファイルのプレーンテキスト・コンテンツを
含む一時的な中間ファイルを使います。EasyPG アシスタントは、関
数 @code{temporary-file-directory} (@pxref{Unique File Names, ,
Generating Unique File Names, elisp, GNU Emacs Lisp Reference Manual}) が
返すディレクトリーの下にそれらを作成します。プレーンテキストの痕跡を残し
たくないのであれば、少なくともそのディレクトリーでは暗号化されたファイル
システムを使用してください。

暗号化されたファイルの名前パターンは @code{epa-file-name-regexp} で制御
することができます。

@defvar epa-file-name-regexp
暗号化されたものとして扱われるファイル名に合致する正規表現です。
@end defvar

この動作は @kbd{M-x epa-file-disable} で無効に、そし
て @kbd{M-x epa-file-enable} で元に戻すことができます。

@deffn Command epa-file-disable
*.gpg ファイルの自動暗号化/復号を無効にします。
@end deffn

@deffn Command epa-file-enable
*.gpg ファイルの自動暗号化/復号を有効にします。
@end deffn

@noindent
ディフォルトでは @code{epa-file} は対称鍵暗号 (symmetric encryption)、言
い換えるとパスワードに基づいた暗号を使おうとします。代わりに公開鍵暗
号 (public key encryption) を使いたいのであれ
ば @kbd{M-x epa-file-select-keys} を行なってください。するとキーを選択す
るための対話窓がポップアップします。

@deffn Command epa-file-select-keys
現在開いているファイルを公開鍵で暗号化するための受取人の鍵を選択します。
@end deffn

変数 @code{epa-file-select-keys} でディフォルトの動作を変更することもで
きます。

@defvar epa-file-select-keys
鍵を選択するための対話窓をポップアップするかどうかを制御します。
@end defvar

@vindex epa-file-encrypt-to
頻繁に開くファイルについては、どの暗号方式を使うべきかをファイル変
数 (@pxref{File Variables, , Local Variables in Files, emacs, The Emacs
Editor}) を介して Emacs に伝えておくことは良い考えかもしれません。この目
的にはローカル変数 @code{epa-file-encrypt-to} を使ってください。

例えば ELisp ファイルを電子メールアドレス @samp{ueno@@unixuser.org} に対
応する公開鍵暗号で暗号化したいのであれば、そのファイルの先頭に以下の行を
加えてください。

@cartouche
@lisp
;; -*- epa-file-encrypt-to: ("ueno@@unixuser.org") -*-
@end lisp
@end cartouche

逆にファイルを常に (@code{epa-file-select-keys} 変数の値に関わらず) 対称
鍵暗号で暗号化したいのであれば、その行を以下のように変更してください。

@cartouche
@lisp
;; -*- epa-file-encrypt-to: nil -*-
@end lisp
@end cartouche

自動暗号化/復号の動作を制御する他の変数は以下の通りです。

@defvar epa-file-cache-passphrase-for-symmetric-encryption
@code{nil} 以外の値だったら対称鍵暗号のためのパスフレーズをキャッシュし
ます。ディフォルト値は @code{nil} です。

安全上の理由から、このオプションはディフォルトでオフになっていて、使うこ
とを推奨しません。代わりに、多くの場合同じ仕事をより安全な方法で行なうこ
とができる GnuPG エージェントを使うことを考慮してください。詳細について
は、@xref{Caching Passphrases}.
@end defvar

@defvar epa-file-inhibit-auto-save
@code{nil} 以外の値だったら開いている暗号化されたファイルの自動セーブを
禁止します。ディフォルト値は @code{t} です。
@end defvar

@node Querying a key server
@section Querying a key server
@cindex query key server
@cindex key server, querying

@code{epa-search-keys} コマンドを使って、@acronym{GPG} キーサーバーに問
い合わせることができます。その際 Emacs は合致するものを一覧できるバッファー
をポップアップし、そこで個人のキーリングにキーを取り込む (および追加す
る) ことができます。

そのキーの検索結果を表示するバッファーでは、@kbd{f} コマンドを使ってキー
を取り込むようにマークしてから @kbd{x} を使ってキーを取り込んで (および
キーリングに組み込んで) ください。

変数 @code{epa-keyserver} で、どのサーバーに問い合わせるかを指示します。

@node GnuPG version compatibility
@chapter GnuPG のバージョンの互換性
@cindex gnupg version compatibility
@cindex version compatibility with gnupg
@cindex compatibility with gnupg

2023年6月現在 GnuPG には 3つの活動的な枝があります; 2.4、2.2、およ
び 1.4 です。GnuPG バージョン 2.4.1 以降
は @uref{https://dev.gnupg.org/T6481, GnuPG bug T6481} の影響を受けてい
て、Emacs ではほとんど使えません。少なくとも GnuPG バージョン 2.4.1 では、
そのバグに対するパッチが存在していて、オペレーティングシステムまたはディ
ストリビューションがすでに提供している可能性があります。GnuPG 1.4 はレガ
シーバージョンとみなされます。

それに加えて、上記のブランチはすべて、基本的なユースケースでは Emacs で
問題なく動作するはずです。ただし、Emacs から使うと目に見えるかもしれない
互換性のない特徴があります。

@itemize
@item
GnuPG 2.1 の鍵を格納するためのフォーマットは 1.4 と異なります。それ
は GnuPG 2.1 で作成された鍵が 1.4 では見えないかもしれないということです。

@item
GnuPG 2.1 は @command{gpg-agent} と通信するために固定アドレスの Unix ド
メインソケットを使います。GnuPG 2.0 と 1.4 で使われてい
る @code{GPG_AGENT_INFO} 環境変数は無視します。このことは、もしあなたの
システムに GnuPG 2.1 と 1.4 の両方があるとすると、GnuPG 1.4 由来
の gpg コマンドは 2.1 が提供する @command{gpg-agent} を (少なくともその
ままでは) 使えないことを意味します。

@item
GnuPG 2.1 (2.1.5 以降) は Emacs のミニバッファーから直接 Pinentry を入力
することができます。@xref{GnuPG Pinentry}.
@end itemize

@node GnuPG Pinentry
@chapter GnuPG Pinentry
@cindex gnupg pinentry
@cindex pinentry provided by gnupg

GnuPG スイーツの重要な構成要素は Pinentry です。これによって GnuPG が要
求するパスフレーズを安全に入力することができます。GnuPG は淡泊な TTY の
みの @command{pinentry-tty} から色々なデスクトップ環境用の華美なグラフィ
カル・ダイアログ、例えば @command{pinentry-gnome3} に至るまで、様々なプ
ログラムを Pinentry として提供します。通常はオペレーティングシステムによっ
て、これらのどれがデフォルトで使用されるかが決まります。

具体的な Pinentry プログラムの選択によって、@emph{どのくらいの頻度} では
なく、@emph{どのように} GnuPG がパスフレーズを要求するかのみが決定される
ことに注意してください。後者の質問について
は @ref{Caching Passphrases} を参照してください。

@cindex pinentry, emacs as
いくつかの設定を行うと、Emacs は Pinentry の役割を果たすこともできます。
GnuPG 2.1.5 以降で利用できる最も自然な選択は、Emacs によってトリガーされ
るリクエストの Pinentry として Emacs 自体を使用することです。たとえば、
名前が @file{.gpg} で終わるファイルを自動復号化を使用して開く場合、その
リクエストのパスフレーズも Emacs に入力する必要があるでしょう。

@cindex loopback pinentry
このいわゆる @dfn{loopback Pinentry} には、Emacs をリモートまたはテキス
ト専用端末から使用する場合にも機能するという追加の利点があります。有効に
するには:

@enumerate
@item
@vindex allow-loopback-pinentry
オプション @code{allow-loopback-pinentry} が @command{gpg-agent} に設定
されていることを確認してください。これはディフォルトであるべきです。
@xref{Agent Options, , Option Summary, gnupg, Using the GNU Privacy Guard}.

@item
@vindex epg-pinentry-mode
Emacs で変数 @code{epg-pinentry-mode} を @code{loopback} にカスタマイズ
してください。
@end enumerate

Emacs を Pinentry として使用するために利用できるオプションは他にもありま
す。@command{pinentry-emacs} または @command{gpg-agent} のオプションであ
る @code{allow-emacs-pinentry} と呼ばれる Pinentry が見つかるかもしれま
せん。ただし、これらは安全でないか半ば廃れている (semi-obsolete) と考え
られていて、オペレーティングシステムやディストリビューションによってはサ
ポートされていない可能性があります。たとえば、Debian GNU/Linux は、上記
のループバック Pinentry のみをサポートします。

@ignore
誰かがこれらを要求した場合に備えて:

すべての GnuPG リクエストに Emacs を使う:

オペレーティングシステムの手段によって @command{pinentry-emacs} をディフォ
ルトの Pinentry にします。GNU ELPA からパッケー
ジ @file{pinentry.el} をインストールし、@kbd{M-x pinentry-start} を実行
して Emacs Pinentry サービスを開始します。@emph{All}GnuPG パスフレーズリ
クエストにより、実行中の Emacs にミニバッファープロンプトが表示されます。
Emacs または Emacs Pinentry サービスが実行されていない場合、パスフレーズ
要求は失敗します。

他の Pinentry を控え (fallback) として、Emacs をすべての GnuPG リクエス
トに 使う:

他の Pinentry が Emacs をサポートしていることを確認してください。例え
ば @command{pinentry-curses} は大丈夫です。@command{gpg-agent} のオプショ
ンである @code{allow-emacs-pinentry} を設定してください。プロセスを呼び
出すときのための環境変数 @code{INSIDE_EMACS} を設定してください。パッケー
ジ @file{pinentry.el} をインストールしてください。稼働中
の Emacs で、@kbd{M-x pinentry-start} が実行済みであるならば、GnuPG のパ
スフレーズ要求のすべてに対して、稼働中の Emacs のミニバッファーにプロン
プトが現れるはずです。Emacs または Emacs Pinentry サービスが実行されてい
ない場合、GnuPG は代わりに他の Pinentry を使用します。
@end ignore

@node Caching Passphrases
@chapter Caching Passphrases
@cindex caching passphrases
@cindex entering passphrases
@cindex passphrases, entering and caching

もし同じファイルを開いたり閉じたりする機会が度々あるのであれば、パスフレー
ズをタイプするのはわずらわしい仕事でしょう。GnuPG と EasyPG アシスタント
は、一定の時間に限ってあなたのパスフレーズを記憶する機構を提供します。こ
れらを使うと、パスフレーズを時々入力し直すだけで済みます。しかしながらそ
の設定は少々込み入っています。それは、インストールされている GnuPG の
版 (@pxref{GnuPG version compatibility})、暗号方式 (対称鍵か公開鍵か)、
そして GnuPG Agent を使いたいかどうかによるからです。以下にいくつかの設
問があります。

@enumerate
@item
GnuPG バージョン 1.4 の代わりに 2.0 かそれ以降のものを使いますか?
@item
公開鍵暗号ではなく対称鍵暗号を使いますか?
@item
GnuPG Agent を使いたいですか?
@end enumerate

あなたの回答に対応する設定は次の通りです。

@multitable {111} {222} {333} {configuration configuration configuration}
@item @b{1} @tab @b{2} @tab @b{3} @tab Configuration
@item Yes   @tab Yes   @tab Must  @tab GnuPG Agent を使えるようにしてください。
@item Yes   @tab No    @tab Must  @tab GnuPG Agent を使えるようにしてください。
@item No    @tab Yes   @tab Yes   @tab Elisp のパスフレーズ・キャッシュを使ってください。
@item No    @tab Yes   @tab No    @tab Elisp のパスフレーズ・キャッシュを使ってください。
@item No    @tab No    @tab Yes   @tab GnuPG Agent を使えるようにしてください。
@item No    @tab No    @tab No    @tab GnuPG Agent 無しではできません。
@end multitable

GnuPG Agent を使えるようにするに
は @ref{Invoking GPG-AGENT, , , gnupg, Using the GNU Privacy Guard} の説
明に従ってください。

Elisp のパスフレーズ・キャッシュを使うに
は @code{epa-file-cache-passphrase-for-symmetric-encryption} 変数
に @code{nil} 以外の値を設定してください。
@xref{Encrypting/decrypting gpg files}.

@node Bug Reports
@chapter バグリポート
@cindex bug reports
@cindex reporting bugs

EasyPG アシスタントのバグと諸問題は Emacs 開発チームが活発に対処していま
す。新機能の要望と提案もおおいに歓迎します。@kbd{M-x report-emacs-bug}
(@pxref{Bugs, ,Bugs, emacs, Reporting Bugs}) を使ってください。

バグリポートを書くときは、その問題を再現するための操作を十分過ぎると思う
ほど詳細に説明してください。さらにそのバグを修正するために必要な情報を以
下のように集めてください。

@itemize @bullet
@item GnuPG のバージョン。@samp{gpg --version} が示すものです。
@item GnuPG の設定。@file{~/.gnupg/gpg.conf} の中身です。
@end itemize

バグを知らせる前に @file{~/.emacs} ファイルで @code{epg-debug} 変数
に @code{nil} 以外の値を設定して、そのバグを再度確認してください。そし
て @file{ *epg-debug*} バッファーの中身を含めてください。バッファー名の
最初の文字は空白であることに注意してください。

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include doclicense.texi

@node Concept Index
@unnumbered Concept Index
@printindex cp

@node Key Index
@unnumbered Key Index
@printindex ky

@node Function Index
@unnumbered Function Index
@printindex fn

@node Variable Index
@unnumbered Variable Index
@printindex vr
@bye

@c Local Variables:
@c fill-column: 72
@c End:

\input texinfo                  @c -*-texinfo-*-

@setfilename sasl-ja

@set VERSION 0.2

@dircategory Emacs
@direntry
* SASL-ja: (sasl-ja).           The Emacs SASL library (Japanese).
@end direntry

@settitle Emacs SASL Library @value{VERSION}

@ifinfo
このファイルは Emacs SASL ライブラリーを説明します。

Copyright (C) 2000 Daiki Ueno.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.1 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分、表表紙テキストおよび裏表紙テキストは指
定しません。この利用許諾契約書の複写は「GNU フリー文書利用許諾契約書」と
いう章に含まれています。
@end ifinfo

@tex

@titlepage
@title Emacs SASL Library

@author by Daiki Ueno
@page

@vskip 0pt plus 1filll
Copyright @copyright{} 2000 Daiki Ueno.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.1 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分、表表紙テキストおよび裏表紙テキストは指
定しません。この利用許諾契約書の複写は「GNU フリー文書利用許諾契約書」と
いう章に含まれています。
@end titlepage
@page

@end tex

@node Top
@top Emacs SASL

このマニュアルは Emacs SASL ライブラリーを説明します。

異なるプロトコルを使うアプリケーション間で、複数の認証メカニズムを共有す
るための共通インターフェースです。

@menu
* Overview::                    Emacs SASL ライブラリーとは
* How to use::                  アプリケーションに認証サポートを追加する
* Data types::
* Back end drivers::            独自のドライバーを書く
* Index::
* Function Index::
* Variable Index::
@end menu

@node Overview
@chapter 大要

@sc{sasl} は @dfn{Simple Authentication and Security Layer} の略です。標
準は RFC2222 に文書化されています。これは、さまざまなアプリケーション・
プロトコルに、認証サポートを追加するための簡単な手段を提供します。

このライブラリーの最上位のインターフェースは、Java @sc{sasl} Application
Program Interface によって触発されました。それは、抽象化した一連の認証メ
カニズムのドライバーを定義します。

バックエンドのドライバーは、なるべく認証メカニズムに密接していることを目
指しています。どこにある追加の設定情報にも、この実装からアクセスすること
ができます。

@node How to use
@chapter 使い方

(まだ書かれていません)。

Emacs SASL ライブラリーを使うには、アプリケーション・プログラムの最初で、
以下の式を評価して下さい。

@lisp
(require 'sasl)
@end lisp

実行時にのみ sasl.el が存在していることを検査したいならば、代わりに必要
な関数の autoload の設定を並べておいても構いません。

@node Data types
@chapter データの型

ネゴシエートされたセキュリティー層の伝送に使われる三つのデータの型として、
メカニズム、クライアント・パラメータ、および認証ステップがあります。

@menu
* Mechanisms::
* Clients::
* Steps::
@end menu

@node Mechanisms
@section メカニズム

メカニズム (@code{sasl-mechanism} オブジェクト) が、@sc{sasl} 認証メカニ
ズムのドライバーの schema です。

@defvar sasl-mechanisms
メカニズム名のリスト。
@end defvar

@defun sasl-find-mechanism mechanisms
適切なメカニズムを取得します。@*
この関数は @var{mechanisms} と @code{sasl-mechanisms} を比較して、適切
な @code{sasl-mechanism} オブジェクトを返します。

@lisp
(let ((sasl-mechanisms '("CRAM-MD5" "DIGEST-MD5")))
  (setq mechanism (sasl-find-mechanism server-supported-mechanisms)))
@end lisp
@end defun

@defun sasl-mechanism-name mechanism
メカニズムの名前を文字列で返します。
@end defun

認証メカニズムのドライバー (@ref{Back end drivers}) を書きたければ、
@code{sasl-make-mechanism} を使い、@code{sasl-mechanisms} およ
び @code{sasl-mechanism-alist} を正しく変更して下さい。

@defun sasl-make-mechanism name steps
@code{sasl-mechanism} オブジェクトを割り当てます。@*
この関数は二つのパラメータ、すなわちメカニズムの名前、および認証するため
の関数のリストを受け取ります。

@lisp
(defconst sasl-anonymous-steps
  '(identity                            ; 最初は応答無し
    sasl-anonymous-response))

(put 'sasl-anonymous 'sasl-mechanism
     (sasl-make-mechanism "ANONYMOUS" sasl-anonymous-steps))
@end lisp
@end defun

@node Clients
@section クライアント

クライアント (@code{sasl-client} オブジェクト) は四つのパラメータ、すな
わちメカニズム、ユーザー名、サービス名、およびサーバー名によって初期化さ
れます。

@defun sasl-make-client mechanism name service server
@code{sasl-client} オブジェクトを用意します。
@end defun

@defun sasl-client-mechanism client
クライアントのメカニズム (@code{sasl-mechanism} オブジェクト) を返します。
@end defun

@defun sasl-client-name client
クライアントの認証名を文字列で返します。
@end defun

@defun sasl-client-service client
クライアントのサービス名を文字列で返します。
@end defun

@defun sasl-client-server client
クライアントのサーバー名を文字列で返します。
@end defun

属性の設定を追加したい場合は、@code{sasl-client-set-property} を使って下
さい。

@defun sasl-client-set-property client property value
与えられた属性およびその値をクライアントに追加します。
@end defun

@defun sasl-client-property client property
クライントの属性の値を返します。
@end defun

@defun sasl-client-set-properties client plist
クライアントの属性を破壊的に設定します。@*
第二引数は新しいプロパティー・リスト (plist) です。
@end defun

@defun sasl-client-properties client
クライアントの設定のプロパティー・リストを、まるごと返します。
@end defun

@node Steps
@section ステップ

ステップ (@code{sasl-step} オブジェクト) は認証ステップの抽象化です。そ
れは、応答の値と次回の認証処理の入り口を保持します (後者はアクセスできま
せん)。

@defun sasl-step-data step
@var{step} が保持するデータを文字列で返します。
@end defun

@defun sasl-step-set-data step data
@var{step} に @var{data} の文字列を格納します。
@end defun

最初の応答を得るには、第二引数を @code{nil} にして関
数 @code{sasl-next-step} を呼ばなければなりません。

@lisp
(setq name (sasl-mechanism-name mechanism))
@end lisp

この段階で、SASL の認証プロトコルの交換を開始するコマンドを送ることがで
きます。例です。

@lisp
(process-send-string
 process
 (if (sasl-step-data step)              ; 最初の応答
     (format "AUTH %s %s\r\n"
             name (base64-encode-string (sasl-step-data step) t))
   (format "AUTH %s\r\n" name)))
@end lisp

認証処理を続けるために行なわなければならないことは、連続し
て @code{sasl-next-step} を呼ぶことです。

@defun sasl-next-step client step
認証ステップを実行します。@*
最初は @var{step} を @code{nil} に設定しなければなりません。
@end defun

@node Back end drivers
@chapter バックエンド・ドライバー

(まだ書かれていません)。

@node Index
@chapter Index
@printindex cp

@node Function Index
@chapter Function Index
@printindex fn

@node Variable Index
@chapter Variable Index
@printindex vr

@summarycontents
@contents
@bye

@c Local Variables:
@c coding: iso-2022-7bit
@c fill-column: 72
@c mode: texinfo
@c use-kuten-for-period: t
@c use-touten-for-comma: t
@c End:
